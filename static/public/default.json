{
  "workspaces": [
    {
      "id": "6c3c4242-e14d-4188-af9c-c4ad6fc3b7dc",
      "name": "Sucesso do Cliente",
      "description": "Relatório de BI dos departamentos de Pós Vendas.",
      "type": "Workspace",
      "state": "Active",
      "isOnDedicatedCapacity": false,
      "reports": [
        {
          "reportType": "PowerBIReport",
          "id": "40b11fdd-c878-4dd8-9a9d-357778203ebd",
          "name": "Fidelização UAU",
          "datasetId": "51c97923-f568-4f45-b1b8-a056ea96f16c",
          "modifiedDateTime": "2025-02-10T17:43:54.54",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "9ffdfbd8-9a10-42e1-b0b3-46287ecaca4c",
          "name": "Report Usage Metrics Report",
          "datasetId": "56ace384-ed0a-46f1-a3ea-25e625b841a4"
        },
        {
          "reportType": "PowerBIReport",
          "id": "e387d83f-0dd0-4cbd-b57b-5e2b90aa5eac",
          "name": "BIPs",
          "datasetId": "455c1865-7ead-4ea5-b44c-ed1588da14eb",
          "createdDateTime": "2020-02-14T22:36:14.883",
          "modifiedDateTime": "2025-02-11T16:12:38.55",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "9c203168-fcf1-4e1a-9468-9c8c99303f14",
          "name": "Controle de Boletos",
          "datasetId": "cd6fd25d-ec86-4697-8494-c2d10df667cf",
          "createdDateTime": "2021-12-08T23:48:20.707",
          "modifiedDateTime": "2025-01-20T14:53:01.18",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "564864f2-b513-44bc-b9a3-ee269843d309",
          "name": "GAV - Acompanhamento de Recebimentos",
          "datasetId": "72e68e0a-087f-4cbb-b210-570fbd60ac5c",
          "createdDateTime": "2022-02-04T21:05:43.507",
          "modifiedDateTime": "2025-02-10T17:55:42.213",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "ed16156f-6a9f-40af-84e9-5740a5276b7d",
          "name": "Fidelização Dynamics",
          "datasetId": "f40a8912-183d-41fe-9e18-8d24b4fc832c",
          "createdDateTime": "2023-04-17T18:52:34.423",
          "modifiedDateTime": "2025-01-20T14:12:05.26",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "c371608c-1de2-427d-b2fe-a641e95f21bf",
          "name": "Gestão de Carteira",
          "datasetId": "bb2fd829-dcc0-4243-9a4f-ef005f8e88fa",
          "createdDateTime": "2024-02-08T19:45:49.737",
          "modifiedDateTime": "2024-12-03T13:08:04.243",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "40c29700-236a-4645-a77d-1be8245c4756",
          "name": "Usage Metrics Report",
          "datasetId": "8748463b-fc8b-44df-94ce-5a5e05478c8d",
          "createdDateTime": "2024-07-26T11:25:12.243",
          "modifiedDateTime": "2024-07-26T11:25:12.243",
          "modifiedBy": "powerbi@gavresorts.com.br",
          "createdBy": "powerbi@gavresorts.com.br",
          "modifiedById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "createdById": "ba508337-dcf1-4d48-8660-98bd3cef1d24"
        },
        {
          "reportType": "PowerBIReport",
          "id": "afda4835-9fe5-42dc-a308-7308e63c4059",
          "name": "Painel Acompanhamento Recebimentos",
          "datasetId": "1afc3784-7d5c-406f-b664-7d32e8890a8e",
          "createdDateTime": "2024-07-31T18:04:29.047",
          "modifiedDateTime": "2025-02-04T17:40:28.22",
          "modifiedBy": "bi.controladoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "fb7df61d-5b73-44a9-8dcf-b5aed8984fea",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "25ae0e36-147f-4605-b17b-348c795472c1",
          "name": "Painel Acompanhamento Recebimentos - Julho",
          "datasetId": "d1814b1a-ac27-4a0d-adf7-70e5c53802a6",
          "createdDateTime": "2024-08-05T18:44:05.173",
          "modifiedDateTime": "2024-08-14T22:06:23.107",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "0c69575b-892e-4f18-9c2b-8c77c822270c",
          "name": "Painel Acompanhamento Recebimentos - Agosto",
          "datasetId": "ad19aed7-3228-4be3-ac9d-58007a4884e6",
          "createdDateTime": "2024-09-02T21:49:50.91",
          "modifiedDateTime": "2024-09-03T14:42:56.05",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "cbdd38a0-af3a-4575-a089-4bddc6697174",
          "name": "Painel Acompanhamento Recebimentos - Setembro",
          "datasetId": "b9e7dfe9-b749-4208-ab1c-745b4e4e246f",
          "createdDateTime": "2024-10-01T21:44:37.747",
          "modifiedDateTime": "2024-10-03T00:13:17.183",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "3836433f-159b-49aa-8d76-39f778aefccc",
          "name": "Painel Acompanhamento Recebimentos - Outubro",
          "datasetId": "8ad4f05a-fff9-4301-bbff-439d0565c1db",
          "createdDateTime": "2024-11-01T17:40:11.173",
          "modifiedDateTime": "2024-11-01T17:40:11.173",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "27d47ca9-eb63-4a60-9015-71e41abadf0a",
          "name": "Painel Acompanhamento Recebimentos - Novembro",
          "datasetId": "c19a2044-8ae7-4a57-86bf-4a8be5ccf09e",
          "createdDateTime": "2024-12-02T20:17:53.17",
          "modifiedDateTime": "2024-12-02T20:43:27.48",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        },
        {
          "reportType": "PowerBIReport",
          "id": "393e48da-9a56-454e-bd87-d04d8a953b56",
          "name": "Painel Acompanhamento Recebimentos - Dezembro",
          "datasetId": "fe2d1580-8147-49cc-8d08-43e97ab600bc",
          "createdDateTime": "2025-01-02T18:19:05.957",
          "modifiedDateTime": "2025-01-07T16:57:45.89",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.controladoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "fb7df61d-5b73-44a9-8dcf-b5aed8984fea"
        },
        {
          "reportType": "PowerBIReport",
          "id": "7dffd508-c1d3-4bdc-9e5b-2f7a8e305d0d",
          "name": "Painel Acompanhamento Recebimentos - Janeiro",
          "datasetId": "59dd4756-05d2-4730-99cb-a13a06334bad",
          "createdDateTime": "2025-02-03T14:51:25.813",
          "modifiedDateTime": "2025-02-03T14:51:25.813",
          "modifiedBy": "bi.consultoria@gavresorts.com.br",
          "createdBy": "bi.consultoria@gavresorts.com.br",
          "modifiedById": "86772481-5847-410b-9d2f-e751fa00339f",
          "createdById": "86772481-5847-410b-9d2f-e751fa00339f"
        }
      ],
      "dashboards": [],
      "datasets": [
        {
          "id": "51c97923-f568-4f45-b1b8-a056ea96f16c",
          "name": "Fidelização UAU",
          "tables": [
            {
              "name": "Pendencias",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Status_pen",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Obs_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Pendência",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Pendencias'[Status_pen]),\n  \"(Em branco)\",\n  'Pendencias'[Status_pen] IN {3},\n  \"Cancelada\",\n  'Pendencias'[Status_pen] IN {0},\n  \"Pendente\",\n  'Pendencias'[Status_pen] IN {1},\n  \"Resolvida\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "NumVtwf_pwfp",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Etapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "RespostaEtapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tempo Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF('Pendencias'[DataAtivacao],TODAY(),DAY)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status Contenção",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Pendencias'[RespostaEtapa]),\n  \"(Em branco)\",\n  'Pendencias'[RespostaEtapa] IN {\"Cancelado\"},\n  \"Cancelado\",\n  'Pendencias'[RespostaEtapa] IN {\"Downgrade\",\n    \"Renegociado\",\n    \"Reversão Time Share\",\n    \"Sem Alteração\",\n    \"Upgrade\"},\n  \"Contido\",\n  'Pendencias'[RespostaEtapa] IN {\"Devolvido Para Carteira\",\n    \"Prazo Finalizado\"},\n  \"Devolvido Carteira\",\n  'Pendencias'[RespostaEtapa] IN {\"Em Negociação\"},\n  \"Em Negociação\",\n  'Pendencias'[RespostaEtapa] IN {\"Reativado\"},\n  \"Reativado\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "CodCateg_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_pen",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrRespon_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrResponPendencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataLancamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataPrevista",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtivacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEtapa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Identificador_pwfp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DescrResp_pwpr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrRespon",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Contidos",
                  "expression": "[Solicitações Contidas]+[Solicitações Reativadas]",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Canceladas",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações],\n    FILTER(Pendencias,(Pendencias[Etapa]=\"Realizar Contenção\" || Pendencias[Etapa]=\"Encaminhar Proposta\") && Pendencias[Status Contenção]=\"Cancelado\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Cancelamento",
                  "expression": "\nCALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[CodCateg_pen]=\"07.04\"))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Contidas",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[Status Contenção]=\"Contido\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Devolvidas Carteira",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[Status Contenção]=\"Devolvido Carteira\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Em Negociação",
                  "expression": "\nCALCULATE([Solicitações],\n    FILTER(CALCULATETABLE(Pendencias,ALL(Pendencias[DataResolucao])),Pendencias[Status Contenção]=\"Em Negociação\" && ISBLANK(Pendencias[DataResolucao])))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Finalizadas",
                  "expression": "[Solicitações Contidas]+[Solicitações Reativadas]+[Solicitações Canceladas]",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Reativação",
                  "expression": "\nCALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[CodCateg_pen]=\"15\"))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Reativadas",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações Reativação],\n    FILTER(Pendencias,Pendencias[Status Contenção]=\"Reativado\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                },
                {
                  "name": "Cancelados",
                  "expression": "[Solicitações Canceladas]+[Solicitações Devolvidas Carteira]",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Cancelamento Resolvidas",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[CodCateg_pen]=\"07.04\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações Reativação Resolvidas",
                  "expression": "\nCALCULATE(CALCULATE([Solicitações],\n    FILTER(Pendencias,Pendencias[CodCateg_pen]=\"15\")),\n    USERELATIONSHIP(Pendencias[DataResolucao],'Calendário'[DataReferência]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\"),\n    dbo_VwPendencia = Fonte{[Schema=\"dbo\",Item=\"VwPendencia\"]}[Data],\n    #\"CodCateg Filtradas\" = Table.SelectRows(dbo_VwPendencia, each ([CodCateg_pen] = \"07.04\")),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"CodCateg Filtradas\", each [DataLancamento] >= #datetime(2018, 6, 18, 0, 0, 0)),\n    #\"Consultas Mescladas1\" = Table.NestedJoin(#\"Linhas Filtradas\", {\"Num_pen\", \"UsrRespon_pen\", \"DataLancamento\"}, Respostas, {\"NumPen_ppwpr\", \"QuemRPen_ppwpr\", \"QdoLPen_ppwpr\"}, \"Respostas\", JoinKind.LeftOuter),\n    #\"Respostas Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas1\", \"Respostas\", {\"DescrResp_pwpr\"}, {\"DescrResp_pwpr\"}),\n    #\"Valor Substituído\" = Table.ReplaceValue(#\"Respostas Expandido\",\"RENEGOCIAÇÃO\",\"RENEGOCIADO\",Replacer.ReplaceText,{\"DescrResp_pwpr\"}),\n    #\"Etapa Adicionada\" = Table.AddColumn(#\"Valor Substituído\", \"Etapa\", each Text.Proper(\nif [Identificador_pwfp] = \"PROCESSO FÍSICO\" then \"MONTAR PROCESSO\" \nelse if [Identificador_pwfp] = \"CONCILIAÇÃO\" then \"VERIFICAR CONCILIAÇÃO\" \nelse if [Identificador_pwfp] = \"ATENDIMENTO CONCILIAÇÃO\" then \"SOLICITAR ESTORNO/CONCIL.\" \nelse if [Identificador_pwfp] = \"GERAR DISTRATO\" then \"GERAR TERMO\" \nelse if [Identificador_pwfp] = \"CONFERIR DISTRATO\" then \"CONFERIR TERMO\" \nelse if [Identificador_pwfp] = \"ENVIAR DISTRATO CLIENTE\" then \"ENVIAR TERMO CLIENTE\" \nelse if [Identificador_pwfp] = \"LANÇAR PROCESSO PAGAMENTO\" then \"CADASTRAR PROCESSO PAGTO\" \nelse [Identificador_pwfp])),\n    #\"RespostaEtapa Adicionada\" = Table.AddColumn(#\"Etapa Adicionada\", \"RespostaEtapa\", each Text.Proper(if [CodEtapa] = 4 and [DescrResp_pwpr] = null then \"EM NEGOCIAÇÃO\" else [DescrResp_pwpr])),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"RespostaEtapa Adicionada\", {{\"UsrRespon_pen\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"Descricao\", Text.Proper, type text}}),\n    #\"Dividir Coluna por Delimitador\" = Table.SplitColumn(Table.TransformColumnTypes(#\"Colocar Cada Palavra Em Maiúscula\", {{\"DataResolucao\", type text}}, \"en-US\"), \"DataResolucao\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, false), {\"DataResolucao\", \"HoraResolucao\"}),\n    #\"Tipo Alterado com Localidade\" = Table.TransformColumnTypes(#\"Dividir Coluna por Delimitador\", {{\"DataResolucao\", type date}}, \"en-US\"),\n    #\"Tipo Alterado com Localidade1\" = Table.TransformColumnTypes(#\"Tipo Alterado com Localidade\", {{\"HoraResolucao\", type time}}, \"en-US\"),\n    #\"Texto Inserido Antes do Delimitador\" = Table.AddColumn(#\"Tipo Alterado com Localidade1\", \"UsrRespon\", each Text.BeforeDelimiter([UsrResponPendencia], \" \"), type text),\n    #\"Colocar Cada Palavra Em Maiúscula2\" = Table.TransformColumns(#\"Texto Inserido Antes do Delimitador\",{{\"UsrResponPendencia\", Text.Proper, type text}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula2\""
                }
              ]
            },
            {
              "name": "CategoriasDeComentario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Codigo_cger",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Desc_cger",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\"),\n    dbo_CategoriasDeComentario = Fonte{[Schema=\"dbo\",Item=\"CategoriasDeComentario\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(dbo_CategoriasDeComentario,{\"Codigo_cger\", \"Desc_cger\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Respostas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "QuemRPen_ppwpr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "QdoLPen_ppwpr",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumPen_ppwpr",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "QuemRPen_ppwpr2",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "QdoLPen_ppwpr2",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DescrResp_pwpr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\", [Query=\"SELECT ppwpr.QuemRPen_ppwpr, ppwpr.QdoLPen_ppwpr, ppwpr.NumPen_ppwpr,#(lf)ppwpr.QuemRPen_ppwpr, ppwpr.QdoLPen_ppwpr, pwpr.DescrResp_pwpr#(lf)FROM PendenciaPassoWorkflowPendRespostas ppwpr#(lf)LEFT JOIN PassoWorkflowPendRespostas pwpr#(lf)ON ppwpr.NumVtwf_ppwpr = pwpr.NumVtwf_pwpr#(lf)AND ppwpr.NumResp_ppwpr = pwpr.NumResp_pwpr#(lf)AND ppwpr.NumPasso_ppwpr = pwpr.NumPasso_pwpr#(lf)AND ppwpr.TipoResp_ppwpr = pwpr.TipoResp_pwpr\"])\nin\n    Fonte"
                }
              ]
            },
            {
              "name": "dAtualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualização",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #table({\"Ultima Atualização\"},{{DateTime.LocalNow()-#duration(0,3,0,0)}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualização\", type datetime}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "VwVendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idContrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('VwVendas'[CodEmpresa]),\n  \"(Em branco)\",\n  'VwVendas'[CodEmpresa] IN {35},\n  \"Beach\",\n  'VwVendas'[CodEmpresa] IN {26},\n  \"Condomínio\",\n  'VwVendas'[CodEmpresa] IN {13},\n  \"Exclusive\",\n  'VwVendas'[CodEmpresa] IN {10},\n  \"Park\",\n  'VwVendas'[CodEmpresa] IN {41},\n  \"Porto\",\n  'VwVendas'[CodEmpresa] IN {43},\n  \"Porto 2\",\n  'VwVendas'[CodEmpresa] IN {18},\n  \"Premium\",\n  'VwVendas'[CodEmpresa] IN {42},\n  \"Pyrenéus\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "ChaveUnidVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidCliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelMês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaPrazoCancelDia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFimContrato",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoFimContratoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaFimContratoMes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodVendedor",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_proposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Vendas",
                  "expression": "DISTINCTCOUNT(VwVendas[ChaveVenda])",
                  "isHidden": false
                },
                {
                  "name": "Vlr Venda",
                  "expression": "SUM(VwVendas[ValorVenda])",
                  "isHidden": false
                },
                {
                  "name": "Vendas Canceladas",
                  "expression": "\n-CALCULATE([Qtd Vendas],\nUSERELATIONSHIP(VwVendas[DataCancel],'Calendário (Atendimento)'[DataAtendimento]),\nVwVendas[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Quitadas",
                  "expression": "CALCULATE([Qtd Vendas], VwVendas[StatusVenda]=\"Quitada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Ativas",
                  "expression": "\nCALCULATE(CALCULATE([Qtd Vendas]),\n    FILTER(ALLEXCEPT(VwVendas,VwVendas[Empreendimento]),VwVendas[DataVenda]<=MAX('Calendário (Atendimento)'[DataAtendimento])))\n-CALCULATE(CALCULATE(DISTINCTCOUNT([ChaveVenda]),\n    FILTER(FILTER(ALLEXCEPT(VwVendas,VwVendas[Empreendimento]),VwVendas[DataCancel]<=MAX('Calendário (Atendimento)'[DataAtendimento])),\n        VwVendas[StatusVenda]=\"Cancelada\")),\n    USERELATIONSHIP(VwVendas[DataCancel],'Calendário (Atendimento)'[DataAtendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Venda",
                  "expression": "CALCULATE(SUM(VwVendas[ValorVenda]),CROSSFILTER('Solicitações'[ChaveUnidVenda],VwVendas[ChaveUnidVenda],Both))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\", [Query=\"SELECT#(lf)        ISNULL(pp.ChaveProposta, 'TSE-' + CAST(vcs.idContrato AS varchar)) AS chave_proposta,#(lf)        vcs.*#(lf)FROM VwVendasCessao vcs#(lf)LEFT JOIN VwPropostas AS pp#(lf)#(tab)ON vcs.ChaveVenda = pp.[Vendas.ChaveVenda]\", CreateNavigationProperties=false]),\n    #\"Chave-Cliente Inserida\" = Table.AddColumn(Fonte, \"ChaveUnidCliente\", each Text.Combine({[ChaveUnidade], Text.From([CodCliente], \"pt-BR\")}, \"-\"), type text),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Chave-Cliente Inserida\",{\"CodObra\", \"CodProduto\", \"CodPerson\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"DataVenda\", type date}, {\"DataCessao\", type date}, {\"DataCancel\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"ChaveUnidVenda\", each Text.Combine({[ChaveUnidade], Text.PadStart(Text.From([Venda], \"pt-BR\"),5,\"0\")}, \"-\"), type text)\nin\n    #\"Coluna Mesclada Inserida\""
                }
              ]
            },
            {
              "name": "Calendário",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "DataReferência",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"DataReferência\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"DataReferência\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "Ano-Mês",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ano-Mês",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.AddDays(Date.EndOfMonth(DateTime.LocalNow()),1))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Nome do Mês Inserido\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Mês\", Text.Proper}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Colocar Cada Palavra Em Maiúscula\", \"Ano/Mês\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\")),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida\",{{\"Ano/Mês\", type date}}),\n    #\"Ano/Mês1\" = #\"Tipo Alterado1\"[#\"Data\"]\nin\n    #\"Ano/Mês1\""
                }
              ]
            },
            {
              "name": "Calendário (Atendimento)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "DataAtendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"DataAtendimento\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"DataAtendimento\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "MetaContenção",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Meta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Meta Contenção",
                  "expression": "SUM('MetaContenção'[Meta])",
                  "isHidden": false
                },
                {
                  "name": "Contenção (Meta)",
                  "expression": "\nvar Meta = [Solicitações Finalizadas]*'MetaContenção'[Meta Contenção]\nvar Vlr = Meta<1\nreturn\nSWITCH(Vlr,\n    TRUE(),ROUNDUP(Meta,0),\n    Meta)",
                  "isHidden": false
                },
                {
                  "name": "Dif. Meta",
                  "expression": "[Contenção (Meta)]-([Solicitações Contidas]+[Solicitações Reativadas])",
                  "isHidden": false
                },
                {
                  "name": "% Contido",
                  "expression": "[Contidos]/[Solicitações Finalizadas]",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WCkgsylbSUTLQMVGK1YlWcq1IziktzixLBYsZQwQDilJzM0tzIULmYKGQ/JT8YrhALAA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [Empreendimento = _t, Meta = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Empreendimento\", type text}, {\"Meta\", type number}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "VwContrato",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idcontrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datavenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datacancelamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idempresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "statuscontrato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valornegociado",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idpessoacessionario",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idpessoacocessionario",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idproduto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idcotaadquirida",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idorigemvenda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idgrupotabelapontos",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtdpontoscontratados",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtdpontosdebitarpornaoutilizacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "lancardebitoptspornaoutilizacaocomopendente",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtdanospendenciadebitoptspornaoutilizacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idrespcadastro",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_vwcontrato = Fonte{[Schema=\"public\",Item=\"vwcontrato\"]}[Data]\nin\n    public_vwcontrato"
                }
              ]
            },
            {
              "name": "VwCasal",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idempresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datacadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datahoraagendamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idsalavendas",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nomecasal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idlocalcaptacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idorigemcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idmotivoqualificacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idpromotortlmkt",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idpromotor",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idliner",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idcloser",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idpep",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idgerentesalavendas",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idlidermarketing",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idsupervisormarketing",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idsublidermarketing",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "respcadastro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "excluido",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "respexcluir",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "agendado",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "statusatd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tiporelacionamento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "temporelacionamentoanos",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "temporelacionamentomeses",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idcidade",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "rendafamiliar",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "residenciapropria",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipoderesidencia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datanascimento1",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datanascimento2",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idnacionalidade1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idnacionalidade2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idade1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idade2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idprofissao1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idprofissao2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "aposentado1",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "aposentado2",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtdfilhos",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "descricaofilhos",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtdvezesviajoucidade",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "possuiimovelcidade",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "carromodelo1",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "carroano1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "carromodelo2",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "carroano2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idveiculo1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idveiculo2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idmodeloveiculo1",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idmodeloveiculo2",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "noshow",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "motivonotour",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idmotivonotour",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "reagendado",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datahoraagendamentooriginal",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ordemchegada",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Fechador",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "respalteracao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "respalt",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "respalteracaopep",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Fixo_1",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Movel_1",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "email",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SalaVendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CidadeVendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_vwcasal = Fonte{[Schema=\"public\",Item=\"vwcasal\"]}[Data],\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(public_vwcasal, \"Fechador\", each if [idpep] = null then [idcloser] else if [idpep] = 51 then [idcloser] else [idpep]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Coluna Condicional Adicionada\",{{\"Fechador\", Int64.Type}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Tipo Alterado\",{\"datahoraatendimento\", \"datahoraencerramentoatendimento\"})\nin\n    #\"Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Sala de Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idunidadenegocio",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idtenant",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Sala de Vendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_unidadenegocio = Fonte{[Schema=\"public\",Item=\"unidadenegocio\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(public_unidadenegocio, each ([idtenant] <> 4)),\n    #\"Texto Inserido Antes do Delimitador\" = Table.AddColumn(#\"Linhas Filtradas\", \"Texto Antes do Delimitador\", each Text.BeforeDelimiter([cidade], \" -\"), type text),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Texto Inserido Antes do Delimitador\", \"Sala de Vendas\", each Text.Combine({[Texto Antes do Delimitador], [descricao]}, \" - \"), type text),\n    #\"Valor Substituído\" = Table.ReplaceValue(#\"Coluna Mesclada Inserida\",\" SHOPPING\",\"\",Replacer.ReplaceText,{\"Sala de Vendas\"}),\n    #\"Colocar Cada Palavra Em Maiúscula1\" = Table.TransformColumns(#\"Valor Substituído\",{{\"Sala de Vendas\", Text.Proper, type text}}),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Colocar Cada Palavra Em Maiúscula1\",{\"idunidadenegocio\", \"descricao\", \"cidade\", \"idtenant\", \"Sala de Vendas\"}),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Outras Colunas Removidas\",{{\"descricao\", Order.Ascending}, {\"idtenant\", Order.Ascending}})\nin\n    #\"Linhas Classificadas\""
                }
              ]
            },
            {
              "name": "Funcionario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idfuncionario",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "apelido",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_funcionario = Fonte{[Schema=\"public\",Item=\"funcionario\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(public_funcionario,{\"idfuncionario\", \"apelido\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Erros em Pendencias",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Status_pen",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCateg_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Obs_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_pwfp",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Etapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "RespostaEtapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_pen",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrRespon_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrResponPendencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataLancamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataPrevista",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtivacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEtapa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Identificador_pwfp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DescrResp_pwpr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrRespon",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Pendencias,\n    #\"Erros Mantidos\" = Table.SelectRowsWithErrors(Fonte)\nin\n    #\"Erros Mantidos\""
                }
              ]
            },
            {
              "name": "VwVendas (2)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveUnidCliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = VwVendas,\n    #\"Linhas Agrupadas\" = Table.Group(Fonte, {\"ChaveUnidCliente\"}, {{\"Venda\", each List.Max([Venda]), type nullable number}})\nin\n    #\"Linhas Agrupadas\""
                }
              ]
            },
            {
              "name": "VwPessoas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "CodPessoa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Pessoa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Apelido",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CpfCnpj",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataNasc",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Sexo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "EstadoCivil",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UniaoEstavel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Email",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Profissao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CpfCnpjMascarado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoPessoa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AtivInat",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "MatriculaFunc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CidadeNatal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UFNatal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCidadeNatal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "RegCasamento",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "GrauInstrucao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Raca",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Departamento",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NomeFantasia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEstadoCivil",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"10.20.0.153\\AMEC\"),\n    UAU = Fonte{[Name=\"UAU\"]}[Data],\n    dbo_VwPessoas = UAU{[Schema=\"dbo\",Item=\"VwPessoas\"]}[Data],\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(dbo_VwPessoas,{{\"CodEstadoCivil\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "VwOcorrenciaVendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveOcorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumDoc_ocv",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodOcV",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ObsOcV",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusOcV",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodOcorrencia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Ocorrencias",
                  "expression": "CALCULATE(DISTINCTCOUNT(VwOcorrenciaVendas[ChaveOcorrencia]), CROSSFILTER(VwVendas[ChaveUnidVenda],'Solicitações'[ChaveUnidVenda],Both))",
                  "isHidden": false
                },
                {
                  "name": "Ocorrências Solicitação Cancelamento",
                  "expression": "CALCULATE(VwOcorrenciaVendas[Qtd Ocorrencias],VwOcorrenciaVendas[CodOcorrencia]=12)",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"10.20.0.153\\AMEC\"),\n    UAU = Fonte{[Name=\"UAU\"]}[Data],\n    dbo_VwOcorrenciaVendas = UAU{[Schema=\"dbo\",Item=\"VwOcorrenciaVendas\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(dbo_VwOcorrenciaVendas, each ([CodObra] <> \"SLPTS\")),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Linhas Filtradas\",{{\"CodEmpresa\", Int64.Type}, {\"StatusOcV\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "VwOcorrenciaItensBloq",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "CodOcorrencia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodBloqueio",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Bloqueio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"10.20.0.153\\AMEC\"),\n    UAU = Fonte{[Name=\"UAU\"]}[Data],\n    dbo_VwOcorrenciaItensBloq = UAU{[Schema=\"dbo\",Item=\"VwOcorrenciaItensBloq\"]}[Data]\nin\n    dbo_VwOcorrenciaItensBloq"
                }
              ]
            },
            {
              "name": "VwPessoasEnd",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "CodPessoa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_pend",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoEndereco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Proprio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Endereco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Logradouro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Numero",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Bairro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UF",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CEP",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Complemento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"10.20.0.153\\AMEC\"),\n    UAU = Fonte{[Name=\"UAU\"]}[Data],\n    dbo_VwPessoasEnd = UAU{[Schema=\"dbo\",Item=\"VwPessoasEnd\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(dbo_VwPessoasEnd, each ([TipoEndereco] = \"Principal\"))\nin\n    #\"Linhas Filtradas\""
                }
              ]
            },
            {
              "name": "Solicitações",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumAtendimento",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusAtendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoAtendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrResponAtendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFim",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descr_atd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataSolicitação",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SubMotivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade-Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empresa_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo Solicitação",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo da Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF(RELATED(VwVendas[DataVenda]),'Solicitações'[DataSolicitação],DAY)",
                  "columnType": "Calculated"
                },
                {
                  "name": "UsrResponPendencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivos",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Solicitações'[Motivo]),\n  \"(Em branco)\",\n  'Solicitações'[Motivo] IN {\"ARRENDIMENTO\",\n    \"ARREPENDIMENTO\",\n    \"INSATISFAÇÃO ARREPENDIMENTO\"},\n  \"Arrependimento\",\n  'Solicitações'[Motivo] IN {\"CANCELAMENTO\",\n    \"COMPRA SEM PAGAMENTO\",\n    \"SIMULAÇÃO DE DISTRATO\",\n    \"SOLICITAÇÃO DE CANCELAMENTO\",\n    \"TEVE OUTRA COTA CANCELADA\"},\n  \"Cancelamento\",\n  'Solicitações'[Motivo] IN {\"CESSAO DE DIREITO\",\n    \"CESSÃO DE DIREITOS\"},\n  \"Cessão De Direitos\",\n  'Solicitações'[Motivo] IN {\"CONTRADIÇÃO SALA\"},\n  \"Contradição\",\n  'Solicitações'[Motivo] IN {\"CORANA VÍRUS\",\n    \"CORNA VÍRUS\",\n    \"CORONA VÍRUS\"},\n  \"Covid\",\n  'Solicitações'[Motivo] IN {\"CRONOGRAMA\",\n    \"CRONOGRAMA DE USO\"},\n  \"Cronograma\",\n  'Solicitações'[Motivo] IN {\"DESEMPREGADA\",\n    \"DESEMPREGADO\",\n    \"DESEMPREGO\",\n    \"FINANCEIRO DESEMPREGO\"},\n  \"Desemprego\",\n  'Solicitações'[Motivo] IN {\"DESISTENCIA\",\n    \"DESISTÊNCIA\"},\n  \"Desistencia\",\n  'Solicitações'[Motivo] IN {\"COBRANÇAS\",\n    \"DIFICULDADE FIANCEIRA\",\n    \"DIFICULDADE FINANCEIRA\",\n    \"FALTA DE RENDA\",\n    \"FIANANCEIRO\",\n    \"FIANCEIRO\",\n    \"FIANCEIROS\",\n    \"FIN ANCEIROS\",\n    \"FINACEIRO\",\n    \"FINACEIROS\",\n    \"FINANCEIRA\",\n    \"FINANCEIRO\",\n    \"FINANCEIRO E PESSOAIS\",\n    \"FINANCEIRO OUTROS\",\n    \"FINANCEIRO REAJUSTES\",\n    \"FINANCEIRO REDUÇÃO DE RENDA\",\n    \"FINANCEIRO RENDA INSUFICIENTE\",\n    \"FINANCEIRO/SAÚDE\",\n    \"FINANCEIRO; REDUÇÃO DE RENDA\",\n    \"FINANCEIROS\",\n    \"FINANCEIROS E SAÚDE\",\n    \"FINANDEIRO\",\n    \"FINCANCEIRO\",\n    \"FINCEIRO. NÃO CONSEGUE HONRAR COM O CONTRATO.\",\n    \"FINNACEIRO\",\n    \"FINNCEIRO\",\n    \"FNANCEROS\",\n    \"IFINANCEIRO\",\n    \"INSATISFAÇÃO FINANCEIRO\",\n    \"INSATISFAÇÃO/FINANCEIRO\",\n    \"MOTIVOS FINANCEIRO\",\n    \"PESSOAIS E FINANCEIROS\",\n    \"PESSOAIS FINANCEIRO\",\n    \"PESSOAL/FINANCEIRO\",\n    \"REDUÇÃO DE RENDA\",\n    \"RENDA INSUFICIENTE\",\n    \"RENTABILIDADE BAIXA\",\n    \"SAÚDE/FINANCEIRO\"},\n  \"Dificuldade Financeira\",\n  'Solicitações'[Motivo] IN {\"DIVERGÊNCIA DE INFORMAÇÕES\",\n    \"DIVERGÊNCIA DE INFORMAÇÕES SEM CONDOMÍNIO\",\n    \"DIVERGENCIA FORMA DE UTILIZAÇÃO\",\n    \"DIVERGENCIAS DE INFROMAÇÕES\",\n    \"INFORMAÇÕES\",\n    \"INFORMAÇÕES DIVERGENTES NO ATO DA VENDA\",\n    \"INFORMAÇOES DO CONTRATO DIVERGENTES COM INOFRMAÇOES DO VENDEDOR\"},\n  \"Divergência De Informações\",\n  'Solicitações'[Motivo] IN {\"DIVORCIO\",\n    \"DIVÓRCIO\",\n    \"DIVÓRCIO / SEPARAÇÃO\",\n    \"DIVORCIO SEPARAÇÃO\",\n    \"DIVÓRCIO SEPARAÇÃO\",\n    \"DIVÓRCIO/SEPARAÇÃO\",\n    \"PROBLEMAS DE SAÚDE\",\n    \"SAUDE FAMILIAR\",\n    \"SEPARAÇÃO\",\n    \"SEPARAÇÃO DIVÓRCIO\"},\n  \"Divorcio\",\n  'Solicitações'[Motivo] IN {\"DOENÇA\",\n    \"DOENÇA FAMILIAR\",\n    \"DOENCA GRAVE\",\n    \"DOENÇA NA FAMILIA\",\n    \"DOENÇAS GRAVES\",\n    \"SAUDE\",\n    \"SAÚDE\",\n    \"SAUDE DOENCAS GRAVE\",\n    \"SAÚDE DOENÇAS GRAVES\",\n    \"SAÚDE OUTROS\"},\n  \"Doença\",\n  'Solicitações'[Motivo] IN {\"DÚVIDAS\",\n    \"DÚVIDAS CONTRATUAIS\"},\n  \"Dúvidas\",\n  'Solicitações'[Motivo] IN {\"CONTRATO\",\n    \"DESACORDO - CONTRATO NÃO ASSINADO\",\n    \"DESACORDO- CONTRATO NÃO ASSINADO\",\n    \"DESACOROD\"},\n  \"Em desacordo\",\n  'Solicitações'[Motivo] IN {\"FALECIMENTO\",\n    \"SAÚDE FALECIMENTO\"},\n  \"Falecimento\",\n  'Solicitações'[Motivo] IN {\"iINSATISFAÇÃO\",\n    \"INSARISFAÇÃO\",\n    \"INSASTIFAÇÃO\",\n    \"INSASTISFAÇÃO\",\n    \"INSATIFAÇÃO\",\n    \"INSATIFASÇÃO\",\n    \"INSATISFAÇÃO\",\n    \"INSATISFAÇÃO CAPACIDADE DOS APARTAMENTOS\",\n    \"INSATISFAÇÃO CLÁUSULAS CONTRATUAIS\",\n    \"INSATISFAÇÃO COBRANÇA\",\n    \"INSATISFAÇÃO COM CUSTOS OPERACIONAIS DA COTA/CONDOMINIO\",\n    \"INSATISFAÇÃO COM PLANTA\",\n    \"INSATISFAÇÃO COM PRODUTO\",\n    \"INSATISFAÇÃO NO ATENDIMENTO\",\n    \"INSATISFAÇÃO OUTROS\",\n    \"INSATISFAÇÃO SINAL DE NEGÓCIO\",\n    \"INSATISFAÇÃO; ATENDIMENTO\",\n    \"INSATISFEITO\"},\n  \"Insatisfação\",\n  'Solicitações'[Motivo] IN {\"INSATISFAÇÃO CRONOGRAMA DE USO\",\n    \"SEMANAS DA COTA\",\n    \"UTILIZAÇÃO\"},\n  \"Insatisfação Com Cronograma\",\n  'Solicitações'[Motivo] IN {\"HOTELARIA\",\n    \"HOTELARIA ATENDIMENTO\",\n    \"HOTELARIA ESTRUTURA DO APARTAMENTO\",\n    \"HOTELARIA LOCALIZAÇÃO\"},\n  \"Insatisfação Com Hotelaria\",\n  'Solicitações'[Motivo] IN {\"DIVERGÊNCIA DE INFORMAÇÕES REAJUSTE\",\n    \"DIVERGÊNCIA DE INFORMAÇÕES SEM REAJUSTE\",\n    \"IGPM+1%\",\n    \"IGPM+1%/CRONOGRAMA DE USO\",\n    \"INSATISFAÇÃO IGPM+1%\",\n    \"INSATISFAÇÃO REAJUSTE\",\n    \"INSATISFAÇÃO REAJUSTE IGPM\",\n    \"INSATISFAÇÃO REAJUSTE NAS PARCELAS\",\n    \"INSATISFAÇÃO REAJUSTES\",\n    \"INSATISFAÇÃO REAJUSTES IGPM\",\n    \"REAJUSTE DAS PARCELAS\"},\n  \"Insatisfação Com Reajuste\",\n  'Solicitações'[Motivo] IN {\"INSASTISFAÇÃO VENDA\",\n    \"INSATISFAÇÃO NA VENDA\",\n    \"INSATISFAÇÃO VENDA\",\n    \"INSTATISFAÇÃO VEMDA\",\n    \"INSTATISFAÇÃO VENDA\",\n    \"INSTISFAÇÃO VENDA\"},\n  \"Insatisfação Com Venda\",\n  'Solicitações'[Motivo] IN {\"INSEGURANÇA\",\n    \"QUER CONHECER O RESORT PESSOALMENTE\"},\n  \"Insegurança\",\n  'Solicitações'[Motivo] IN {\"MUDANÇA\",\n    \"MUDANÇA DE CIDADE\",\n    \"MUDANÇA DE ESTADO\",\n    \"MUDANÇA DE PAIS\"},\n  \"Mudança Geográfica\",\n  'Solicitações'[Motivo] IN {\"\",\n    \"?\",\n    \"12/02/2021\",\n    \"27/08/2020\",\n    \"N INFORMADO\",\n    \"NÃO ESPECIFICADO\",\n    \"NÃO INFORMADO\",\n    \"NAO INFORMOU\"},\n  \"Não Informado\",\n  'Solicitações'[Motivo] IN {\"POOL\",\n    \"POOL DE LOCAÇÃO\",\n    \"POOL RETORNO FINANCEIRO\",\n    \"POOL RETORNO FINANCEIRTO\",\n    \"POOL TAXA DE CONDOMÍNIO\"},\n  \"Problema De Locação/Cota\",\n  'Solicitações'[Motivo] IN {\"FAMILIAR\",\n    \"FAMILIARES\",\n    \"PROBLEMA FAMILIAR\",\n    \"PROBLEMAS DE SAÚDE NA FAMILIA\",\n    \"PROBLEMAS FAMILIARES\"},\n  \"Problema Familiar\",\n  'Solicitações'[Motivo] IN {\"PROBLEMA NA VENDA\",\n    \"SALA DE VENDAS\"},\n  \"Problema Na Venda\",\n  'Solicitações'[Motivo] IN {\"MOTIVOS PESSOAIS\",\n    \"PARTICULAR\",\n    \"PARTICULARES\",\n    \"PESOAIS\",\n    \"PESSAIS\",\n    \"PESSOAIS\",\n    \"PESSOAL\",\n    \"PESSOAS\",\n    \"PESSOIAS\",\n    \"PESSSOAIS\",\n    \"PESSSOIAS\",\n    \"POSSOAIS\"},\n  \"Problema Pessoal\",\n  'Solicitações'[Motivo] IN {\"PROBLEMAS COM A RCI\",\n    \"RCI\"},\n  \"Problemas Com RCI\",\n  'Solicitações'[Motivo] IN {\"CONDOMÍNIO\",\n    \"HOTELARIA REGRAS DE UTILIZAÇÃO\",\n    \"REGRAS ANIMAIS DOMÉSTICOS\"},\n  \"Regra De Utilização\",\n  'Solicitações'[Motivo] IN {\"TROCA DE UNIDADE\"},\n  \"Troca De Unidade\",\n  'Solicitações'[Motivo] IN {\"VIAGEM\",\n    \"VIAGEM E NÃO VAI PODER USUFRUIR\"},\n  \"Viagem\",\n  'Solicitações'[Motivo]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "UsrCad.",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Responsável Contenção",
                  "expression": "CALCULATE(MAX(Pendencias[UsrResponPendencia]),FILTER(ALLEXCEPT(Pendencias,'Solicitações'[NumAtendimento]),Pendencias[Etapa]=\"Realizar Contenção\"))",
                  "isHidden": false
                },
                {
                  "name": "Solicitações",
                  "expression": "CALCULATE(DISTINCTCOUNT('Solicitações'[NumAtendimento]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\"),\n    dbo_VwSolicitacaoCancelamento = Fonte{[Schema=\"dbo\",Item=\"VwSolicitacaoCancelamento\"]}[Data],\n    #\"Linhas Filtradas1\" = Table.SelectRows(dbo_VwSolicitacaoCancelamento, each ([Status_Atendimento] <> \"Cancelado\")),\n    #\"ChaveUnidade-Cliente Inserida\" = Table.AddColumn(#\"Linhas Filtradas1\", \"ChaveUnidade-Cliente\", each Text.Combine({[ChaveUnidade], Text.From([CodCliente], \"pt-BR\")}, \"-\"), type text),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"ChaveUnidade-Cliente Inserida\",{\"ChaveUnidade\", \"ChaveVenda\", \"Num_atd\", \"CodCliente\", \"Cliente\", \"Status_Atendimento\", \"Tipo_Atendimento\", \"Usuário_Responsável\", \"DataCad_atd\", \"DataFim_atd\", \"NumVtwf_atd\", \"Descr_atd\", \"Data_Solicitação\", \"Motivo_Solicitação\", \"Tipo_Solicitação\", \"ChaveUnidade-Cliente\"}),\n    #\"DataCad Filtradas\" = Table.SelectRows(#\"Outras Colunas Removidas\", each [DataCad_atd] >= #datetime(2018, 6, 1, 0, 0, 0)),\n    #\"Texto Inserido Antes do Delimitador\" = Table.AddColumn(#\"DataCad Filtradas\", \"DataCad\", each Text.BeforeDelimiter(Text.From([DataCad_atd], \"pt-BR\"), \" \"), type text),\n    #\"Texto Extraído Após o Delimitador1\" = Table.TransformColumns(#\"Texto Inserido Antes do Delimitador\", {{\"Motivo_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}, {\"Data_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}}),\n    #\"Dividir Coluna por Delimitador1\" = Table.SplitColumn(#\"Texto Extraído Após o Delimitador1\", \"Motivo_Solicitação\", Splitter.SplitTextByEachDelimiter({\":\"}, QuoteStyle.Csv, false), {\"Motivo\", \"SubMotivo\"}),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"Dividir Coluna por Delimitador1\", {{\"Tipo_Solicitação\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Texto Aparado\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"Motivo\", Text.Trim, type text}, {\"SubMotivo\", Text.Trim, type text}}),\n    #\"VwVendas Mesclada\" = Table.NestedJoin(#\"Texto Aparado\", {\"ChaveUnidade-Cliente\"}, #\"VwVendas (2)\", {\"ChaveUnidCliente\"}, \"VwVendas\", JoinKind.LeftOuter),\n    #\"VwVendas Expandido\" = Table.ExpandTableColumn(#\"VwVendas Mesclada\", \"VwVendas\", {\"Venda\"}, {\"Venda\"}),\n    #\"ChaveUnidVenda Inserida\" = Table.AddColumn(#\"VwVendas Expandido\", \"ChaveUnidVenda\", each Text.Combine({[ChaveUnidade], Text.PadStart(Text.From([Venda], \"pt-BR\"),5,\"0\")}, \"-\"), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"ChaveUnidVenda Inserida\",{{\"Num_atd\", \"NumAtendimento\"}, {\"Usuário_Responsável\", \"UsrResponAtendimento\"}, {\"DataFim_atd\", \"DataFim\"}, {\"DataCad_atd\", \"DataCadastro\"}, {\"Tipo_Atendimento\", \"TipoAtendimento\"}, {\"Data_Solicitação\", \"DataSolicitação\"}, {\"Status_Atendimento\", \"StatusAtendimento\"}}),\n    #\"Texto Inserido Antes do Delimitador1\" = Table.AddColumn(#\"Colunas Renomeadas\", \"Empresa_atd\", each Text.BeforeDelimiter([ChaveUnidade], \"-\"), type text),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Texto Inserido Antes do Delimitador1\",{{\"DataSolicitação\", type date}, {\"DataCad\", type date}, {\"Venda\", Int64.Type}, {\"Empresa_atd\", Int64.Type}}),\n    #\"Empreendimento Adicionado\" = Table.AddColumn(#\"Tipo Alterado1\", \"Empreendimento\", each if [Empresa_atd] = 10 then \"Park\" else if [Empresa_atd] = 13 then \"Exclusive\" else if [Empresa_atd] = 18 then \"Premium\" else if [Empresa_atd] = 41 then \"Porto\" else if [Empresa_atd] = 42 then \"Pyrenéus\" else if [Empresa_atd] = 35 then \"Beach\" else if [Empresa_atd] = 36 then \"Jeriquiá\" else if [Empresa_atd] = 39 then \"Pipa\" else if [Empresa_atd] = 43 then \"Porto 2\"  else if [Empresa_atd] = 44 then \"Oikos Maragogi\" else if [Empresa_atd] = 80 then \"Gran Valley\" else if [Empresa_atd] = 94 then \"Time Share\" else if [Empresa_atd] = 99 then \"Gran Garden\" else \"N/A\"),\n    #\"Idade Inserida\" = Table.AddColumn(#\"Empreendimento Adicionado\", \"Prazo Solicitação\", each Date.From(DateTime.LocalNow()) - [DataSolicitação], type duration),\n    #\"Dias Extraídos\" = Table.TransformColumns(#\"Idade Inserida\",{{\"Prazo Solicitação\", Duration.Days, Int64.Type}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Dias Extraídos\", {\"NumVtwf_atd\"}, UsrResponPendencia, {\"NumVtwf_pwfp\"}, \"Pendencias (2)\", JoinKind.LeftOuter),\n    #\"Pendencias (2) Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Pendencias (2)\", {\"UsrResponPendencia\"}, {\"UsrResponPendencia\"}),\n    #\"Texto Inserido Antes do Delimitador2\" = Table.AddColumn(#\"Pendencias (2) Expandido\", \"Texto Antes do Delimitador\", each Text.BeforeDelimiter([UsrResponAtendimento], \" \"), type text),\n    #\"Colunas Renomeadas1\" = Table.RenameColumns(#\"Texto Inserido Antes do Delimitador2\",{{\"Texto Antes do Delimitador\", \"UsrCad.\"}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Colunas Renomeadas1\",{{\"UsrCad.\", Text.Proper, type text}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "VwProposta UAU",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveProposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorUnidade",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodProduto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodPerson",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Proposta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "IdCasal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodProspect",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CpfProspect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prospect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Fechador",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_pven",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusProp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataProp",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataExpiracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCancel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCanc",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrConf",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConf",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrVend",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVend",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idorigemvenda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoProduto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.IdCasal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "VendaNova",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\", [Query=\"SELECT * FROM vwpropostas\"]),\n    #\"Consulta Acrescentada\" = Table.Combine({Fonte, #\"VwProposta TSE\"})\nin\n    #\"Consulta Acrescentada\""
                }
              ]
            },
            {
              "name": "VwProposta TSE",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveProposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodProduto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodPerson",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Proposta",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "IdCasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CpfProspect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prospect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusProp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataProp",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idorigemvenda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoProduto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Value.NativeQuery(PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"), \"SELECT * FROM vwpropostas\", null, [EnableFolding=true])\nin\n    Fonte"
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "Erros em VwCasal",
              "expression": "let\n    Fonte = VwCasal,\n    #\"Erros Mantidos\" = Table.SelectRowsWithErrors(Fonte, {\"idcasal\", \"idempresa\", \"datacadastro\", \"datahoraagendamento\", \"idsalavendas\", \"nomecasal\", \"idlocalcaptacao\", \"idorigemcasal\", \"idmotivoqualificacao\", \"idpromotortlmkt\", \"idpromotor\", \"idliner\", \"idcloser\", \"idpep\", \"idgerentesalavendas\", \"idlidermarketing\", \"idsupervisormarketing\", \"idsublidermarketing\", \"respcadastro\", \"excluido\", \"respexcluir\", \"agendado\", \"statusatd\", \"tiporelacionamento\", \"temporelacionamentoanos\", \"temporelacionamentomeses\", \"idcidade\", \"rendafamiliar\", \"residenciapropria\", \"tipoderesidencia\", \"datanascimento1\", \"datanascimento2\", \"idnacionalidade1\", \"idnacionalidade2\", \"idade1\", \"idade2\", \"idprofissao1\", \"idprofissao2\", \"aposentado1\", \"aposentado2\", \"qtdfilhos\", \"descricaofilhos\", \"qtdvezesviajoucidade\", \"possuiimovelcidade\", \"carromodelo1\", \"carroano1\", \"carromodelo2\", \"carroano2\", \"idveiculo1\", \"idveiculo2\", \"idmodeloveiculo1\", \"idmodeloveiculo2\", \"noshow\", \"idmotivonotour\", \"motivonotour\", \"reagendado\", \"datahoraagendamentooriginal\", \"ordemchegada\", \"Fechador\"})\nin\n    #\"Erros Mantidos\""
            },
            {
              "name": "UsrResponPendencia",
              "expression": "let\n    Fonte = Sql.Database(\"10.20.0.153\\AMEC\", \"UAU\"),\n    dbo_VwPendencia = Fonte{[Schema=\"dbo\",Item=\"VwPendencia\"]}[Data],\n    #\"CodCateg Filtradas\" = Table.SelectRows(dbo_VwPendencia, each ([CodCateg_pen] = \"07.04\") and ([Identificador_pwfp] = \"REALIZAR CONTENÇÃO\")),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"CodCateg Filtradas\", each [DataLancamento] >= #datetime(2018, 6, 18, 0, 0, 0)),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Linhas Filtradas\",{\"UsrResponPendencia\", \"NumVtwf_pwfp\"}),\n    #\"Dividir Coluna por Delimitador\" = Table.SplitColumn(#\"Outras Colunas Removidas\", \"UsrResponPendencia\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, false), {\"UsrResponPendencia.1\", \"UsrResponPendencia.2\"}),\n    #\"Dividir Coluna por Delimitador1\" = Table.SplitColumn(#\"Dividir Coluna por Delimitador\", \"UsrResponPendencia.2\", Splitter.SplitTextByEachDelimiter({\" \"}, QuoteStyle.Csv, true), {\"UsrResponPendencia.2.1\", \"UsrResponPendencia.2.2\"}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Dividir Coluna por Delimitador1\",{\"UsrResponPendencia.2.1\"}),\n    #\"Colunas Mescladas\" = Table.CombineColumns(#\"Colunas Removidas\",{\"UsrResponPendencia.1\", \"UsrResponPendencia.2.2\"},Combiner.CombineTextByDelimiter(\" \", QuoteStyle.None),\"UsrResponPendencia\"),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Colunas Mescladas\",{{\"UsrResponPendencia\", Text.Proper, type text}}),\n    #\"Valor Substituído\" = Table.ReplaceValue(#\"Colocar Cada Palavra Em Maiúscula\",\"Erica Je\",\"Erica Jesus\",Replacer.ReplaceText,{\"UsrResponPendencia\"})\nin\n    #\"Valor Substituído\""
            },
            {
              "name": "Erros em Solicitações (2)",
              "expression": "let\nFonte = Solicitações,\n  #\"Incompatibilidades de Tipo Detectadas\" = let\n    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),\n    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),\n    fieldNames = Record.FieldNames(recordTypeFields),\n    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),\n    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = \"O tipo do valor não corresponde ao tipo da coluna.\", Detail = v], fieldTypes{i}})\nin\n    Table.TransformColumns(Fonte, pairs),\n  #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Incompatibilidades de Tipo Detectadas\", \"Número da Linha\" ,1),\n  #\"Erros Mantidos\" = Table.SelectRowsWithErrors(#\"Índice Adicionado\", {\"ChaveUnidade\", \"ChaveVenda\", \"NumAtendimento\", \"CodCliente\", \"Cliente\", \"StatusAtendimento\", \"TipoAtendimento\", \"UsrResponAtendimento\", \"DataCadastro\", \"DataFim\", \"NumVtwf_atd\", \"Descr_atd\", \"DataSolicitação\", \"Motivo\", \"SubMotivo\", \"Tipo_Solicitação\", \"ChaveUnidade-Cliente\", \"DataCad\", \"Venda\", \"ChaveUnidVenda\", \"Empresa_atd\", \"Empreendimento\", \"Prazo Solicitação\", \"UsrResponPendencia\", \"UsrCad.\"}),\n  #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Erros Mantidos\", {\"Número da Linha\", \"ChaveUnidade\", \"ChaveVenda\", \"NumAtendimento\", \"CodCliente\", \"Cliente\", \"StatusAtendimento\", \"TipoAtendimento\", \"UsrResponAtendimento\", \"DataCadastro\", \"DataFim\", \"NumVtwf_atd\", \"Descr_atd\", \"DataSolicitação\", \"Motivo\", \"SubMotivo\", \"Tipo_Solicitação\", \"ChaveUnidade-Cliente\", \"DataCad\", \"Venda\", \"ChaveUnidVenda\", \"Empresa_atd\", \"Empreendimento\", \"Prazo Solicitação\", \"UsrResponPendencia\", \"UsrCad.\"})\nin\n  #\"Colunas Reordenadas\""
            },
            {
              "name": "Erros em VwPessoas (2)",
              "expression": "let\nFonte = VwPessoas,\n  #\"Incompatibilidades de Tipo Detectadas\" = let\n    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),\n    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),\n    fieldNames = Record.FieldNames(recordTypeFields),\n    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),\n    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = \"O tipo do valor não corresponde ao tipo da coluna.\", Detail = v], fieldTypes{i}})\nin\n    Table.TransformColumns(Fonte, pairs),\n  #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Incompatibilidades de Tipo Detectadas\", \"Número da Linha\" ,1),\n  #\"Erros Mantidos\" = Table.SelectRowsWithErrors(#\"Índice Adicionado\", {\"CodPessoa\", \"Pessoa\", \"Apelido\", \"NomeFantasia\", \"CpfCnpj\", \"CpfCnpjMascarado\", \"TipoPessoa\", \"AtivInat\", \"DataCad\", \"DataNasc\", \"MatriculaFunc\", \"Sexo\", \"CidadeNatal\", \"UFNatal\", \"CodCidadeNatal\", \"CodEstadoCivil\", \"EstadoCivil\", \"RegCasamento\", \"UniaoEstavel\", \"GrauInstrucao\", \"Raca\", \"Profissao\", \"Departamento\", \"Email\"}),\n  #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Erros Mantidos\", {\"Número da Linha\", \"CodPessoa\", \"Pessoa\", \"Apelido\", \"NomeFantasia\", \"CpfCnpj\", \"CpfCnpjMascarado\", \"TipoPessoa\", \"AtivInat\", \"DataCad\", \"DataNasc\", \"MatriculaFunc\", \"Sexo\", \"CidadeNatal\", \"UFNatal\", \"CodCidadeNatal\", \"CodEstadoCivil\", \"EstadoCivil\", \"RegCasamento\", \"UniaoEstavel\", \"GrauInstrucao\", \"Raca\", \"Profissao\", \"Departamento\", \"Email\"})\nin\n  #\"Colunas Reordenadas\""
            },
            {
              "name": "Erros em Solicitações",
              "expression": "let\nFonte = Solicitações,\n  #\"Incompatibilidades de Tipo Detectadas\" = let\n    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),\n    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),\n    fieldNames = Record.FieldNames(recordTypeFields),\n    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),\n    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = \"O tipo do valor não corresponde ao tipo da coluna.\", Detail = v], fieldTypes{i}})\nin\n    Table.TransformColumns(Fonte, pairs),\n  #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Incompatibilidades de Tipo Detectadas\", \"Número da Linha\" ,1),\n  #\"Erros Mantidos\" = Table.SelectRowsWithErrors(#\"Índice Adicionado\", {\"ChaveUnidade\", \"ChaveVenda\", \"NumAtendimento\", \"CodCliente\", \"Cliente\", \"StatusAtendimento\", \"TipoAtendimento\", \"UsrResponAtendimento\", \"DataCadastro\", \"DataFim\", \"NumVtwf_atd\", \"Descr_atd\", \"DataSolicitação\", \"Motivo\", \"SubMotivo\", \"Tipo_Solicitação\", \"ChaveUnidade-Cliente\", \"DataCad\", \"Venda\", \"ChaveUnidVenda\", \"Empresa_atd\", \"Empreendimento\", \"Prazo Solicitação\", \"UsrResponPendencia\", \"UsrCad.\"}),\n  #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Erros Mantidos\", {\"Número da Linha\", \"ChaveUnidade\", \"ChaveVenda\", \"NumAtendimento\", \"CodCliente\", \"Cliente\", \"StatusAtendimento\", \"TipoAtendimento\", \"UsrResponAtendimento\", \"DataCadastro\", \"DataFim\", \"NumVtwf_atd\", \"Descr_atd\", \"DataSolicitação\", \"Motivo\", \"SubMotivo\", \"Tipo_Solicitação\", \"ChaveUnidade-Cliente\", \"DataCad\", \"Venda\", \"ChaveUnidVenda\", \"Empresa_atd\", \"Empreendimento\", \"Prazo Solicitação\", \"UsrResponPendencia\", \"UsrCad.\"})\nin\n  #\"Colunas Reordenadas\""
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2019-02-05T15:27:52.057",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "56ace384-ed0a-46f1-a3ea-25e625b841a4",
          "name": "Report Usage Metrics Model",
          "tables": [],
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "directQueryRefreshSchedule": {
            "frequency": 120,
            "days": [],
            "times": [],
            "localTimeZoneId": "UTC"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2019-05-03T16:02:20.8",
          "contentProviderType": "UsageMetricsUserReport"
        },
        {
          "id": "455c1865-7ead-4ea5-b44c-ed1588da14eb",
          "name": "BIPs",
          "tables": [
            {
              "name": "dOrigemVenda",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idorigemvenda",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_origemvenda = Fonte{[Schema=\"public\",Item=\"origemvenda\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(public_origemvenda,{\"idorigemvenda\", \"descricao\"}),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Outras Colunas Removidas\",{{\"descricao\", \"OrigemVenda\"}})\nin\n    #\"Colunas Renomeadas\""
                }
              ]
            },
            {
              "name": "dCalendario (UAU)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data Atendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano-Mês Referência",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês-Ano",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês Abrev",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Text.Proper(Date.MonthName([Column1])), type text),\n    #\"Primeiros Caracteres Inseridos\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Mês Abrev\", each Text.Proper(Text.Start(Text.From([Mês], \"pt-BR\"), 3)), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Primeiros Caracteres Inseridos\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Text.Proper(Date.ToText([Column1],\"dddd\")), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data Atendimento\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data Atendimento\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"Ano-Mês Referência\", each Text.Combine({Text.From([Ano], \"pt-BR\"), [Mês Abrev]}, \"-\"), type text),\n    #\"Coluna Mesclada Inserida2\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"Mês-Ano\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\"), type text),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida2\",{{\"Mês-Ano\", type date}})\nin\n    #\"Tipo Alterado1\""
                }
              ]
            },
            {
              "name": "Propostas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idorigemvenda",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveProposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Proposta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "IdCasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CpfProspect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prospect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusProp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataProp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vendas.ChaveVenda",
                  "dataType": "String",
                  "isHidden": true,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd de Vendas (TSE)",
                  "expression": "CALCULATE(DISTINCTCOUNT('Propostas'[ChaveProposta]),USERELATIONSHIP('Propostas'[DataProp],'dCalendario (TSE)'[Data Atendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Valor de Vendas (TSE)",
                  "expression": "SUMX(VALUES('Propostas'[ChaveProposta]),CALCULATE(AVERAGE('Propostas'[ValorVenda])))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Casais (Vendas)",
                  "expression": "DISTINCTCOUNT('Propostas'[idcasal])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tChaveProposta,\n\tCodEmpresa,\n\tCodObra,\n\tVenda,\n\tValorUnidade,\n\tValorVenda,\n\tValorDesconto,\n\tValorAcrescimo,\n\tCodProduto,\n\tCodPerson,\n\tChaveUnidade,\n\tUnidade,\n\tProposta,\n\tIdCasal,\n\tCodCliente,\n\tCodProspect,\n\tCpfProspect,\n\tProspect,\n\tFechador,\n\tStatus_pven,\n\tStatusProp,\n\tDataProp,\n\tDataCad,\n\tDataExpiracao,\n\tUsrCancel,\n\tDataCanc,\n\tUsrConf,\n\tDataConf,\n\tUsrVend,\n\tDataVend,\n\tidorigemvenda,\n\tOrigemVenda,\n\tTipoProduto,\n\t[Vendas.ChaveVenda],\n\t[Vendas.IdCasal],\n\t[Vendas.StatusVenda],\n\t[Vendas.DataVenda],\n\t[Vendas.DataCancel],\n\tVendaNova\n  FROM\tUAU.dbo.VwPropostas\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Linhas Filtradas\" = Table.SelectRows(Consulta, each ([StatusProp] <> \"Cancelada\" and [StatusProp] <> \"Expirada\")),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Linhas Filtradas\",{\"ChaveProposta\", \"CodEmpresa\", \"CodObra\", \"Venda\", \"ValorVenda\", \"Unidade\", \"Proposta\", \"IdCasal\", \"CpfProspect\", \"Prospect\", \"StatusProp\", \"DataProp\", \"DataCad\", \"idorigemvenda\", \"OrigemVenda\", \"Vendas.ChaveVenda\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Outras Colunas Removidas\",{{\"IdCasal\", Int64.Type}, {\"Venda\", Int64.Type}, {\"CodEmpresa\", Int64.Type}}),\n    #\"Consulta Acrescentada\" = Table.Combine({#\"Tipo Alterado\", VwPropostasTSE})\nin\n    #\"Consulta Acrescentada\""
                }
              ]
            },
            {
              "name": "AtendimentoCasal",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idsalavendas",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idcidade",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idlocalcaptacao",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "excluido",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "noshow",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "motivonotour",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idmotivonotour",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idmotivoqualificacao",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idorigemcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Qtd Vendas",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE(DISTINCTCOUNT('Propostas'[ChaveProposta]),FILTER('Propostas','Propostas'[idcasal]=AtendimentoCasal[idcasal]))",
                  "columnType": "Calculated"
                },
                {
                  "name": "Closer",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Liner",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PEP",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Captador",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Fechador",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datacadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "datahoraencerramentoatendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idtenant",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "statusatendimentocasal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Sala de Vendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CidadeVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Casal",
                  "expression": "DISTINCTCOUNT(AtendimentoCasal[idcasal]) ",
                  "isHidden": false
                },
                {
                  "name": "Casal Qualificado",
                  "expression": "CALCULATE([Casal],AtendimentoCasal[idmotivoqualificacao]=8) ",
                  "isHidden": false
                },
                {
                  "name": "Casal Ñ Qualificado",
                  "expression": "CALCULATE([Casal],AtendimentoCasal[idmotivoqualificacao]<>8,ISBLANK(AtendimentoCasal[idmotivoqualificacao])=FALSE()) ",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Vendas",
                  "expression": "[Qtd Vendas (TSE)]/[Casal] ",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Casais Q",
                  "expression": "[Casal Qualificado]/[Casal]",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Casais NQ",
                  "expression": "[Casal Ñ Qualificado]/[Casal]",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Comprador",
                  "expression": "[Comprador]/[Casal]",
                  "isHidden": false
                },
                {
                  "name": "Qtd Cotas Casal",
                  "expression": "CALCULATE([Qtd de Vendas (TSE)],AtendimentoCasal[idcasal])",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Vendas/Qualif",
                  "expression": "[Qtd Vendas (TSE)]/[Casal Qualificado]",
                  "isHidden": false
                },
                {
                  "name": "Comprador",
                  "expression": "DISTINCTCOUNT('Propostas'[idcasal])",
                  "isHidden": false
                },
                {
                  "name": "Casal YoY%",
                  "expression": "\nIF(\n\tISFILTERED('dCalendario (TSE)'[Data Atendimento]),\n\tERROR(\"Medidas rápidas de inteligência de tempo somente podem ser agrupadas ou filtradas pela hierarquia de data fornecida pelo Power BI ou pela coluna de data primária.\"),\n\tVAR __PREV_YEAR =\n\t\tCALCULATE(\n\t\t\t[Casal],\n\t\t\tDATEADD('dCalendario (TSE)'[Data Atendimento].[Date], -1, YEAR)\n\t\t)\n\tRETURN\n\t\tDIVIDE([Casal] - __PREV_YEAR, __PREV_YEAR)\n)",
                  "isHidden": false
                },
                {
                  "name": "Casal Qualificado YoY%",
                  "expression": "\nIF(\n\tISFILTERED('dCalendario (TSE)'[Data Atendimento]),\n\tERROR(\"Medidas rápidas de inteligência de tempo somente podem ser agrupadas ou filtradas pela hierarquia de data fornecida pelo Power BI ou pela coluna de data primária.\"),\n\tVAR __PREV_YEAR =\n\t\tCALCULATE(\n\t\t\t[Casal Qualificado],\n\t\t\tDATEADD('dCalendario (TSE)'[Data Atendimento].[Date], -1, YEAR)\n\t\t)\n\tRETURN\n\t\tDIVIDE([Casal Qualificado] - __PREV_YEAR, __PREV_YEAR)\n)",
                  "isHidden": false
                },
                {
                  "name": "Casais NQ c/ Venda",
                  "expression": "CALCULATE(DISTINCTCOUNT(AtendimentoCasal[idcasal]),USERELATIONSHIP(AtendimentoCasal[DataAtendimento],'dCalendario (TSE)'[Data Atendimento]),AtendimentoCasal[idmotivoqualificacao]<>8,NOT(ISBLANK(AtendimentoCasal[Qtd Vendas])))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Value.NativeQuery(PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\", [CreateNavigationProperties=false]), \"select#(lf)vwc.*,#(lf)fn1.apelido as \"\"Closer\"\",#(lf)fn2.apelido as \"\"Liner\"\",#(lf)fn3.apelido as \"\"PEP\"\",#(lf)fn4.apelido as \"\"Captador\"\"#(lf)from vwcasal vwc#(lf)left join funcionario fn1 on vwc.idcloser = fn1.idfuncionario#(lf)left join funcionario fn2 on vwc.idliner = fn2.idfuncionario#(lf)left join funcionario fn3 on vwc.idpep = fn3.idfuncionario#(lf)left join funcionario fn4 on vwc.idpromotor = fn4.idfuncionario\", null, [EnableFolding=true]),\n    #\"Data Inserida\" = Table.AddColumn(Fonte, \"DataAtendimento\", each DateTime.Date([datacadastro]), type date),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Data Inserida\",{{\"SalaVendas\", \"Sala de Vendas\"}, {\"CidadeVendas\", \"CidadeVenda\"}, {\"statusatd\", \"statusatendimentocasal\"}, {\"idempresa\", \"idtenant\"}}),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Colunas Renomeadas\",{\"idcasal\", \"idtenant\", \"datacadastro\", \"datahoraencerramentoatendimento\", \"idsalavendas\", \"idlocalcaptacao\", \"idorigemcasal\", \"idmotivoqualificacao\", \"excluido\", \"statusatendimentocasal\", \"idcidade\", \"noshow\", \"idmotivonotour\", \"motivonotour\", \"Sala de Vendas\", \"CidadeVenda\", \"Closer\", \"Liner\", \"PEP\", \"Captador\", \"DataAtendimento\"}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Outras Colunas Removidas\", \"Fechador\", each if [PEP] = null then [Closer] else if [PEP] = \"NÃO COMISSIONAR\" then [Closer] else [PEP], type text),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Coluna Condicional Adicionada\",{{\"Sala de Vendas\", Text.Proper, type text}, {\"CidadeVenda\", Text.Proper, type text}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "fParcelas-UAU",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "TipoParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Parc/Tot",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Acres/Desc",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Antecipado?",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar prazo = DATEDIFF('fParcelas-UAU'[DataRecebimento],'fParcelas-UAU'[DataVencimento],MONTH)>0\nreturn\nSWITCH(prazo,\n    TRUE(),\"SIM\",\n    \"NÃO\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Parcela",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TotParc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FormaPgto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPrincipal",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorCorrecao",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorJuros",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorCorrecaoAtr",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "ValorMultaAtr",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorJurosAtr",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDescontoAntec",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorParcela",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPresente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPago",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "StatusParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_prc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusConciliado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataRecebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataDevolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancelamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencVendaMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencVendaDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencHojeMes",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencHojeDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoRecebVencMes",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoRecebVencDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusCarteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Imposto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaVencVendaDias",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaVencMes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaVencDias",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaRecebDias",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigParc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoRecebVendaMes",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF('fParcelas-UAU'[DataVenda],'fParcelas-UAU'[DataRecebimento],MONTH)",
                  "columnType": "Calculated"
                },
                {
                  "name": "ValorTotalAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorTotalDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idcontrato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveParcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Valor Acresc/Desc",
                  "expression": "SUM('fParcelas-UAU'[Acres/Desc])",
                  "isHidden": false
                },
                {
                  "name": "Prazo Médio (UAU)",
                  "expression": "MEDIAN('fParcelas-UAU'[PrazoVencHojeMes])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas",
                  "expression": "COUNT('fParcelas-UAU'[Parc/Tot])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas Inadimplentes",
                  "expression": "CALCULATE([Qtd Parcelas],\n    'fParcelas-UAU'[StatusParc]=\"Receber\",'fParcelas-UAU'[PrazoVencHojeDia]<0)",
                  "isHidden": false
                },
                {
                  "name": "Status Prazo",
                  "expression": "\nvar ColunaPrazo = MAXX('fParcelas-UAU','fParcelas-UAU'[PrazoVencHojeMes])\nreturn\nMAXX(ADDCOLUMNS('fParcelas-UAU',\"Status Prazo\",\n        IF(ColunaPrazo<0,\"Inadimplente\",\n                IF(ColunaPrazo=0,\"Mês Atual\",\n                        IF('fParcelas-UAU'[StatusCarteira]=\"Receber\",\"A Vencer\",\"Antecipado\")))\n),[Status Prazo])",
                  "isHidden": false
                },
                {
                  "name": "Valor Receber",
                  "expression": "CALCULATE([Valor Parcela],'fParcelas-UAU'[StatusCarteira]=\"Receber\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Parcela",
                  "expression": "SUMX('fParcelas-UAU','fParcelas-UAU'[ValorPrincipal]+'fParcelas-UAU'[ValorCorrecao]+'fParcelas-UAU'[ValorJuros])",
                  "isHidden": false
                },
                {
                  "name": "Valor Inadimplente",
                  "expression": "CALCULATE([Valor Parcela],\n    'fParcelas-UAU'[StatusParc]=\"Receber\",'fParcelas-UAU'[PrazoVencHojeDia]<0)",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido",
                  "expression": "CALCULATE([Valor Parcela], \n    'fParcelas-UAU'[StatusParc]=\"A Compensar\" || 'fParcelas-UAU'[StatusParc]=\"Recebida\",\n    USERELATIONSHIP('fParcelas-UAU'[DataRecebimento],'dCalendario (Carteira)'[Data Parcela]))",
                  "isHidden": false
                },
                {
                  "name": "% Inadimplência (Parc)",
                  "expression": "CALCULATE([Valor Parcela],'fParcelas-UAU'[StatusParc]=\"Receber\")/[Valor Parcela]",
                  "isHidden": false
                },
                {
                  "name": "% Inadimplência Geral (Parc)",
                  "expression": "\n(CALCULATE([Valor Parcela],EOMONTH('fParcelas-UAU'[DataVencimento],0)=EOMONTH(TODAY(),0),'fParcelas-UAU'[DataVencimento]<TODAY(),'fParcelas-UAU'[PrazoRecebVencMes]<=0)\n    -CALCULATE([Valor Parcela],'fParcelas-UAU'[StatusParc]=\"A Compensar\"||'fParcelas-UAU'[StatusParc]=\"Recebida\",EOMONTH('fParcelas-UAU'[DataRecebimento],0)=EOMONTH(TODAY(),0),'fParcelas-UAU'[DataRecebimento]<TODAY()))\n/CALCULATE([Valor Parcela],EOMONTH('fParcelas-UAU'[DataVencimento],0)=EOMONTH(TODAY(),0),'fParcelas-UAU'[DataVencimento]<TODAY(),'fParcelas-UAU'[PrazoRecebVencMes]<=0)",
                  "isHidden": false
                },
                {
                  "name": "Valor Conciliado",
                  "expression": "\nCALCULATE([Valor Parcela],\n    USERELATIONSHIP('dCalendario (Carteira)'[Data Parcela],\n                    'fParcelas-UAU'[DataConciliacao]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recuperado (Venc)",
                  "expression": "CALCULATE([Valor Parcela],\n    FILTER('fParcelas-UAU','fParcelas-UAU'[StatusCarteira]=\"Recebida\" && 'fParcelas-UAU'[PrazoRecebVencMes]>=1))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Antecipado (Venc)",
                  "expression": "CALCULATE([Valor Parcela],\n    FILTER('fParcelas-UAU','fParcelas-UAU'[StatusCarteira]=\"Recebida\" && 'fParcelas-UAU'[PrazoRecebVencMes]<=-1))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Venc)",
                  "expression": "CALCULATE([Valor Parcela],\n    FILTER('fParcelas-UAU','fParcelas-UAU'[StatusCarteira]=\"Recebida\" && ('fParcelas-UAU'[PrazoRecebVencMes]>-1 && 'fParcelas-UAU'[PrazoRecebVencMes]<1)))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Total Recebido)",
                  "expression": "[Vlr Recebido (Venc)]+[Vlr Recuperado (Venc)]+[Vlr Antecipado (Venc)]",
                  "isHidden": false
                },
                {
                  "name": "Prazo Médio (Inicio)",
                  "expression": "MEDIANX('fParcelas-UAU','fParcelas-UAU'[PrazoVencVendaMes])",
                  "isHidden": false
                },
                {
                  "name": "Valor Imposto Parcela",
                  "expression": "CALCULATE(SUMX('fParcelas-UAU',[Valor Parcela]*'fParcelas-UAU'[Imposto]),'fParcelas-UAU'[TipoParc]=\"E\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Pago",
                  "expression": "CALCULATE(SUM('fParcelas-UAU'[ValorPago]),FILTER('fParcelas-UAU','fParcelas-UAU'[StatusConciliado]=\"Sim\" && 'fParcelas-UAU'[StatusParc]=\"Recebida\"))",
                  "isHidden": false
                },
                {
                  "name": "Valor a Vencer",
                  "expression": "CALCULATE([Valor Parcela],'fParcelas-UAU'[StatusCarteira]=\"Receber\",'fParcelas-UAU'[DataVencimento]>=TODAY())",
                  "isHidden": false
                },
                {
                  "name": "Valor Pago (DtConcil)",
                  "expression": "CALCULATE([Valor Pago], \n    USERELATIONSHIP('fParcelas-UAU'[DataConciliacao],'dCalendario (Carteira)'[Data Parcela]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Presente",
                  "expression": "CALCULATE(SUM('fParcelas-UAU'[ValorPresente]),FILTER('fParcelas-UAU','fParcelas-UAU'[StatusParc]=\"Receber\"))",
                  "isHidden": false
                },
                {
                  "name": "Valor Carteira",
                  "expression": "[Valor Pago]+[Valor Conciliar]+[Valor Presente]",
                  "isHidden": false
                },
                {
                  "name": "Valor Conciliar",
                  "expression": "CALCULATE(SUM('fParcelas-UAU'[ValorParcela]),FILTER('fParcelas-UAU','fParcelas-UAU'[StatusConciliado]=\"Não\" && ('fParcelas-UAU'[StatusParc]=\"Recebida\" || 'fParcelas-UAU'[StatusParc]=\"A Compensar\")))",
                  "isHidden": false
                },
                {
                  "name": "Valor Pago (Cancelada)",
                  "expression": "CALCULATE(CALCULATE(SUM('fParcelas-UAU'[ValorPago]),FILTER('fParcelas-UAU',RELATED('fVendas-UAU'[StatusVenda])=\"Cancelada\" && 'fParcelas-UAU'[StatusConciliado]=\"Sim\" && 'fParcelas-UAU'[StatusParc]=\"Recebida\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Pago (Ativa)",
                  "expression": "CALCULATE(SUM('fParcelas-UAU'[ValorPago]),FILTER('fParcelas-UAU',RELATED('fVendas-UAU'[StatusVenda])<>\"Cancelada\" && 'fParcelas-UAU'[StatusConciliado]=\"Sim\" && 'fParcelas-UAU'[StatusParc]=\"Recebida\"))",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido (Entrada)",
                  "expression": "CALCULATE('fParcelas-UAU'[Valor Recebido],'fParcelas-UAU'[TipoParc]=\"E\")",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tChaveVenda,\n\tChaveParcela,\n\tCodEmpresa,\n\tCodObra,\n\tVenda,\n\tidcontrato,\n\tParcela,\n\tParcGer,\n\tOrigParc,\n\tTotParc,\n\tTipoParc,\n\tNumReceb,\n\tNumDep,\n\tFormaPgto,\n\tValorPrincipal,\n\tValorCorrecao,\n\tValorJuros,\n\tValorCorrecaoAtr,\n\tValorMultaAtr,\n\tValorJurosAtr,\n\tValorAcrescimo,\n\tValorTotalAcrescimo,\n\tValorDesconto,\n\tValorTotalDesconto,\n\tValorDescontoAntec,\n\tValorParcela,\n\tValorPresente,\n\tValorPago,\n\tStatusParc,\n\tStatus_prc,\n\tStatusConciliado,\n\tBancoDep,\n\tContaDep,\n\tDataVencimento,\n\tDataRecebimento,\n\tDataConciliacao,\n\tDataDevolucao,\n\tDataCancelamento,\n\tPrazoVencVendaMes,\n\tPrazoVencVendaDia,\n\tPrazoVencHojeMes,\n\tPrazoVencHojeDia,\n\tPrazoRecebVencMes,\n\tPrazoRecebVencDia\n  FROM\tUAU.dbo.VwParcelasTS\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Parc/Tot Inserida\" = Table.AddColumn(Consulta, \"Parc/Tot\", each Text.Combine({Text.From([Parcela], \"pt-BR\"), Text.From([TotParc], \"pt-BR\")}, \"/\"), type text),\n    #\"StatusCarteira Adicionada\" = Table.AddColumn(#\"Parc/Tot Inserida\", \"StatusCarteira\", each if [StatusParc] = \"A Compensar\" then \"Receber\" else [StatusParc], type text),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"StatusCarteira Adicionada\",{\"ChaveVenda\"},#\"fVendas-UAU\",{\"ChaveVenda\"},\"fVendas-UAU\",JoinKind.LeftOuter),\n    #\"fVendas-UAU Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"fVendas-UAU\", {\"DataVenda\"}, {\"DataVenda\"}),\n    #\"Imposto Adicionado\" = Table.AddColumn(#\"fVendas-UAU Expandido\", \"Imposto\", each if [CodEmpresa] = 10 then (\n\tif [DataVenda] = null then 0\n\t\telse if [DataVenda] <= #date(2018, 8, 9) then (\n\t\t\tif [DataConciliacao] = null then 0.0665\n\t\t\telse if [DataConciliacao] < #datetime(2018, 7, 5, 0, 0, 0) then 0.0665 else 0.04)\n\t\t\telse 0.0665)\nelse if [DataConciliacao] = null then 0.04\nelse if [DataConciliacao] < #datetime(2018, 7, 5, 0, 0, 0) then 0.0665\nelse if [DataConciliacao] >= #datetime(2018, 7, 5, 0, 0, 0) then 0.04\nelse 0),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Imposto Adicionado\",{\"CodEmpresa\", \"CodObra\", \"ParcGer\", \"NumReceb\", \"NumDep\", \"BancoDep\", \"ContaDep\"}),\n    #\"Acres/Desc Inserida\" = Table.AddColumn(#\"Colunas Removidas\", \"Acres/Desc\", each List.Sum({[ValorCorrecaoAtr], [ValorMultaAtr], [ValorJurosAtr], [ValorAcrescimo]}) - List.Sum({[ValorDesconto], [ValorDescontoAntec]}), type number),\n    #\"FaixaVencVendaDias Adicionada\" = Table.AddColumn(#\"Acres/Desc Inserida\", \"FaixaVencVendaDias\", each if [PrazoVencVendaDia] = null then \"N/A\" else if [PrazoVencVendaDia] < 0 then \"Antecipado\" else if [PrazoVencVendaDia] <= 5 then \"000-005\" else if [PrazoVencVendaDia] <= 30 then \"006-030\" else if [PrazoVencVendaDia] <= 60 then \"031-060\" else if [PrazoVencVendaDia] <= 90 then \"061-090\" else if [PrazoVencVendaDia] <= 120 then \"091-120\" else if [PrazoVencVendaDia] <= 150 then \"121-150\" else if [PrazoVencVendaDia] <= 180 then \"151-180\" else if [PrazoVencVendaDia] > 180 then \"180+\" else \"N/A\", type text),\n    #\"FaixaVencMes Adicionada\" = Table.AddColumn(#\"FaixaVencVendaDias Adicionada\", \"FaixaVencMes\", each if [PrazoVencHojeMes] = null then \"N/A\" else if [PrazoVencHojeMes] > 84 then \"84+\" else if [PrazoVencHojeMes] > 72 then \"73-84\" else if [PrazoVencHojeMes] > 60 then \"61-72\" else if [PrazoVencHojeMes] > 48 then \"49-60\" else if [PrazoVencHojeMes] > 36 then \"37-48\" else if [PrazoVencHojeMes] > 24 then \"25-36\" else if [PrazoVencHojeMes] > 12 then \"13-24\" else if [PrazoVencHojeMes] >= 1 then \"01-12\" else if [PrazoVencHojeMes] >= 0 then \" Mês Atual\" else if [PrazoVencHojeMes] < 0 then \" Inadimplente\" else \"N/A\", type text),\n    #\"FaixaVencDias Adicionada\" = Table.AddColumn(#\"FaixaVencMes Adicionada\", \"FaixaVencDias\", each if [PrazoVencHojeDia] = null then \"N/A\" else if [PrazoVencHojeDia] < -360 then \"360+\" else if [PrazoVencHojeDia] < -330 then \"331-360\" else if [PrazoVencHojeDia] < -300 then \"301-330\" else if [PrazoVencHojeDia] < -270 then \"271-300\" else if [PrazoVencHojeDia] < -240 then \"241-270\" else if [PrazoVencHojeDia] < -210 then \"211-240\" else if [PrazoVencHojeDia] < -180 then \"181-210\" else if [PrazoVencHojeDia] < -150 then \"151-180\" else if [PrazoVencHojeDia] < -120 then \"121-150\" else if [PrazoVencHojeDia] < -90 then \"091-120\" else if [PrazoVencHojeDia] < -60 then \"061-090\" else if [PrazoVencHojeDia] < -30 then \"031-060\" else if [PrazoVencHojeDia] < 0 then \"001-030\" else if [PrazoVencHojeDia] = 0 then \" Em Dia\" else if [PrazoVencHojeDia] <= 30 then \"001-030\" else if [PrazoVencHojeDia] <= 60 then \"031-060\" else if [PrazoVencHojeDia] <= 90 then \"061-090\" else if [PrazoVencHojeDia] <= 120 then \"091-120\" else if [PrazoVencHojeDia] <= 150 then \"121-150\" else if [PrazoVencHojeDia] <= 180 then \"151-180\" else if [PrazoVencHojeDia] <= 210 then \"181-210\" else if [PrazoVencHojeDia] <= 240 then \"211-240\" else if [PrazoVencHojeDia] <= 270 then \"241-270\" else if [PrazoVencHojeDia] <= 300 then \"271-300\" else if [PrazoVencHojeDia] <= 330 then \"301-330\" else if [PrazoVencHojeDia] <= 360 then \"331-360\" else if [PrazoVencHojeDia] > 360 then \"360+\" else \"N/A\", type text),\n    #\"FaixaRecebDias Adicionada\" = Table.AddColumn(#\"FaixaVencDias Adicionada\", \"FaixaRecebDias\", each if [PrazoRecebVencDia] = null then \"N/A\" else if [PrazoRecebVencDia] < -360 then \"360+\" else if [PrazoRecebVencDia] < -330 then \"331-360\" else if [PrazoRecebVencDia] < -300 then \"301-330\" else if [PrazoRecebVencDia] < -270 then \"271-300\" else if [PrazoRecebVencDia] < -240 then \"241-270\" else if [PrazoRecebVencDia] < -210 then \"211-240\" else if [PrazoRecebVencDia] < -180 then \"181-210\" else if [PrazoRecebVencDia] < -150 then \"151-180\" else if [PrazoRecebVencDia] < -120 then \"121-150\" else if [PrazoRecebVencDia] < -90 then \"091-120\" else if [PrazoRecebVencDia] < -60 then \"061-090\" else if [PrazoRecebVencDia] < -30 then \"031-060\" else if [PrazoRecebVencDia] < 0 then \"001-030\" else if [PrazoRecebVencDia] = 0 then \" Em Dia\" else if [PrazoRecebVencDia] <= 30 then \"001-030\" else if [PrazoRecebVencDia] <= 60 then \"031-060\" else if [PrazoRecebVencDia] <= 90 then \"061-090\" else if [PrazoRecebVencDia] <= 120 then \"091-120\" else if [PrazoRecebVencDia] <= 150 then \"121-150\" else if [PrazoRecebVencDia] <= 180 then \"151-180\" else if [PrazoRecebVencDia] <= 210 then \"181-210\" else if [PrazoRecebVencDia] <= 240 then \"211-240\" else if [PrazoRecebVencDia] <= 270 then \"241-270\" else if [PrazoRecebVencDia] <= 300 then \"271-300\" else if [PrazoRecebVencDia] <= 330 then \"301-330\" else if [PrazoRecebVencDia] <= 360 then \"331-360\" else if [PrazoRecebVencDia] > 360 then \"360+\" else \"N/A\", type text),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"FaixaRecebDias Adicionada\",{{\"DataVencimento\", type date}, {\"DataRecebimento\", type date}, {\"DataConciliacao\", type date}, {\"DataDevolucao\", type date}, {\"DataCancelamento\", type date}, {\"Imposto\", type number}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "fVendas-UAU",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idContrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataQuitacao",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar Data = IF(ISBLANK(CALCULATE(MAX('fParcelas-UAU'[DataRecebimento]))),'fVendas-UAU'[DataCessao],CALCULATE(MAX('fParcelas-UAU'[DataRecebimento])))\nreturn\nSWITCH(TRUE(),\n'fVendas-UAU'[StatusVenda]=\"Quitada\", MAXX(ADDCOLUMNS(VALUES('fParcelas-UAU'[DataRecebimento]),\"DataQuitação\",Data),[DataQuitação]),\nBLANK())",
                  "columnType": "Calculated"
                },
                {
                  "name": "Faixa Inadimplência",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar ColunaPrazo = MINX(ADDCOLUMNS(VALUES('fParcelas-UAU'[PrazoVencHojeDia]),\"Faixa Inad.\",\n    CALCULATE(MIN('fParcelas-UAU'[PrazoVencHojeDia]),\n        'fParcelas-UAU'[StatusParc]=\"Receber\",'fParcelas-UAU'[PrazoVencHojeDia]<0\n    )),[Faixa Inad.])\nreturn\nMINX(ADDCOLUMNS('fParcelas-UAU',\"Status Prazo\",\nIF(ColunaPrazo < -360, \"360+\", \nIF(ColunaPrazo < -330, \"331-360\", \nIF(ColunaPrazo < -300, \"301-330\", \nIF(ColunaPrazo < -270, \"271-300\", \nIF(ColunaPrazo < -240, \"241-270\", \nIF(ColunaPrazo < -210, \"211-240\", \nIF(ColunaPrazo < -180, \"181-210\", \nIF(ColunaPrazo < -150, \"151-180\", \nIF(ColunaPrazo < -120, \"121-150\", \nIF(ColunaPrazo < -90, \"091-120\", \nIF(ColunaPrazo < -60, \"061-090\", \nIF(ColunaPrazo < -30, \"031-060\", \nIF(ColunaPrazo < 0, \"001-030\", \nIF(ColunaPrazo >= 0, \" Em Dia\", \n\"N/A\"))))))))))))))\n),[Status Prazo])",
                  "columnType": "Calculated"
                },
                {
                  "name": "Qtd de Parcelas Inadimplentes",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar QtdParc = [Qtd Parcelas Inadimplentes]\nreturn\nCALCULATE(QtdParc,'fParcelas-UAU'[StatusCarteira]=\"Receber\",'fParcelas-UAU'[PrazoVencHojeDia]<-1)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Inicio Saldo",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar Prazo = DATEDIFF('fVendas-UAU'[DataVenda],MINX(ADDCOLUMNS(VALUES('fParcelas-UAU'[DataVencimento]),\"InicioSaldo\",IF(ISBLANK(CALCULATE(MIN('fParcelas-UAU'[DataVencimento]),'fParcelas-UAU'[TipoParc]=\"P\")),BLANK(),CALCULATE(MIN('fParcelas-UAU'[DataVencimento]),'fParcelas-UAU'[TipoParc]=\"P\"))),[InicioSaldo]),DAY)\nreturn\nMAXX(ADDCOLUMNS('fVendas-UAU',\"Status Prazo\",\nIF(Prazo = 0, \" No Dia\",\nIF(Prazo <= 30, \"001-030\", \nIF(Prazo <= 60, \"031-060\", \nIF(Prazo <= 90, \"061-090\", \nIF(Prazo <= 120, \"091-120\", \nIF(Prazo <= 150, \"121-150\", \nIF(Prazo <= 180, \"151-180\", \nIF(Prazo > 180, \"181+\", \n\"N/A\")))))))))\n,[Status Prazo])",
                  "columnType": "Calculated"
                },
                {
                  "name": "Chave-Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Qtd de Parcelas Inadimplentes (Grupo)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('fVendas-UAU'[Qtd de Parcelas Inadimplentes]),\n  \"(Em branco)\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {1},\n  \"1\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {2},\n  \"2\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {3},\n  \"3\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {4},\n  \"4\",\n  \"5+\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelMês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaPrazoCancelDia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFimContrato",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoFimContratoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaFimContratoMes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Comissão",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Qtd de Parcelas Inadimplentes (10+)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('fVendas-UAU'[Qtd de Parcelas Inadimplentes]),\n  \"(Em branco)\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {1,\n    2,\n    3},\n  \"01-03\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {4},\n  \"04\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {5},\n  \"05\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {6},\n  \"06\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {7},\n  \"07\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {8},\n  \"08\",\n  'fVendas-UAU'[Qtd de Parcelas Inadimplentes] IN {9},\n  \"09\",\n  \"10+\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "QtdVendas",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Fim Entrada",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nvar Prazo = DATEDIFF('fVendas-UAU'[DataVenda],MAXX(ADDCOLUMNS(VALUES('fParcelas-UAU'[DataVencimento]),\"FimEntrada\",IF(ISBLANK(CALCULATE(MAX('fParcelas-UAU'[DataVencimento]),'fParcelas-UAU'[TipoParc]=\"E\")),BLANK(),CALCULATE(MAX('fParcelas-UAU'[DataVencimento]),'fParcelas-UAU'[TipoParc]=\"E\"))),[FimEntrada]),DAY)\nreturn\nMAXX(ADDCOLUMNS('fVendas-UAU',\"Status Prazo\",\nIF(Prazo = 0, \" No Dia\",\nIF(Prazo <= 30, \"001-030\", \nIF(Prazo <= 60, \"031-060\", \nIF(Prazo <= 90, \"061-090\", \nIF(Prazo <= 120, \"091-120\", \nIF(Prazo <= 150, \"121-150\", \nIF(Prazo <= 180, \"151-180\", \nIF(Prazo > 180, \"181+\", \n\"N/A\")))))))))\n,[Status Prazo])",
                  "columnType": "Calculated"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCancel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodVendedor",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Faixa Cancelamento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('fVendas-UAU'[FaixaPrazoCancelDia]),\n  \"(Blank)\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"271-300\"},\n  \"10\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"301-330\"},\n  \"11\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"331-360\"},\n  \"12\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"360+\"},\n  \"13+\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\" No Dia\",\n    \"001-030\"},\n  \"1º Mês\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"031-060\"},\n  \"2\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"061-090\"},\n  \"3\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"091-120\"},\n  \"4\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"121-150\"},\n  \"5\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"151-180\"},\n  \"6\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"181-210\"},\n  \"7\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"211-240\"},\n  \"8\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"241-270\"},\n  \"9\",\n  'fVendas-UAU'[FaixaPrazoCancelDia] IN {\"N/A\"},\n  \"N/A\",\n  'fVendas-UAU'[FaixaPrazoCancelDia]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Tipo Produto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusAprovação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Proposta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveProposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipos Distrato",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('fVendas-UAU'[Motivo]),\n  \"(Em branco)\",\n  'fVendas-UAU'[Motivo] IN {\"CANCELAMENTO EM MESA\",\n    \"CESSÃO DE DIREITO\",\n    \"CORREÇÃO DE LANÇAMENTO DE VENDA\",\n    \"REATIVAÇÃO DE UNIDADE\"},\n  \"Administrativo\",\n  'fVendas-UAU'[Motivo] IN {\"DESCISÃO JUDICIAL\"},\n  \"Decisão Judicial\",\n  'fVendas-UAU'[Motivo] IN {\"INADIMPLÊNCIA\"},\n  \"Inadimplência\",\n  'fVendas-UAU'[Motivo] IN {\"DESACORDO COMERCIAL\",\n    \"DESISTENCIA DO CLIENTE\",\n    \"DIVERGÊNCIAS DE INFORMAÇÕES NA VENDA\",\n    \"DIVÓRCIO\",\n    \"DOWNGRADE\",\n    \"FINANCEIRO\",\n    \"INSATISFAÇÃO DE USO RCI\",\n    \"OUTROS\",\n    \"PESSOAL (SAUDE, FAMILIAR, ETC.)\",\n    \"REDUÇÃO DE CONTRATOS\",\n    \"TROCA DE UNIDADE\",\n    \"UPGRADE\"},\n  \"Solicitação\",\n  'fVendas-UAU'[Motivo]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Vlr Recebido",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE(SUM('fParcelas-UAU'[ValorParcela]),'fParcelas-UAU'[StatusParc] = \"Recebida\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Faixa Recebido",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF('fVendas-UAU'[Vlr Recebido] <= 1330, \"0-1330\",\nIF('fVendas-UAU'[Vlr Recebido] <= 2660, \"1330-2660\",\nIF('fVendas-UAU'[Vlr Recebido] <= 3990, \"2661-3990\",\"3990+\")))",
                  "columnType": "Calculated"
                }
              ],
              "measures": [
                {
                  "name": "Valor de Vendas (UAU)",
                  "expression": "SUMX('fVendas-UAU','fVendas-UAU'[ValorVenda]+'fVendas-UAU'[ValorAcrescimo]-'fVendas-UAU'[ValorDesconto])",
                  "isHidden": false
                },
                {
                  "name": "Qtd de Vendas (UAU)",
                  "expression": "CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]))",
                  "isHidden": false
                },
                {
                  "name": "Vendas Canceladas",
                  "expression": "\n-CALCULATE([Qtd de Vendas (UAU)],\nUSERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]),\n'fVendas-UAU'[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Ativas",
                  "expression": "\nCALCULATE(CALCULATE([Qtd de Vendas (UAU)]),\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda],'fVendas-UAU'[Tipo Produto],'dEstoque-UAU'[QtdQuartos], Propostas[OrigemVenda]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))\n-CALCULATE(CALCULATE(DISTINCTCOUNT([ChaveVenda]),\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda],'fVendas-UAU'[Tipo Produto],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda]),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\")),\n    USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vendas Quitadas",
                  "expression": "CALCULATE([Qtd de Vendas (UAU)],\nUSERELATIONSHIP('fVendas-UAU'[DataQuitacao],'dCalendario (UAU)'[Data Atendimento]),\n'fVendas-UAU'[StatusVenda]=\"Quitada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Cancel.",
                  "expression": "\nCALCULATE([Qtd de Vendas (UAU)],\nUSERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]),\n'fVendas-UAU'[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Venda Acumulada",
                  "expression": "CALCULATE([Qtd de Vendas (UAU)],FILTER(ALLEXCEPT('fVendas-UAU',Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento]),'fVendas-UAU'[DataVenda]<=MAX('fVendas-UAU'[DataVenda])))",
                  "isHidden": false
                },
                {
                  "name": "Qtd de Vendas (CRC)",
                  "expression": "CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),USERELATIONSHIP('Propostas'[ChaveProposta],'fVendas-UAU'[ChaveProposta])),'Propostas'[idorigemvenda]<>1 && 'Propostas'[idorigemvenda]<>2)",
                  "isHidden": false
                },
                {
                  "name": "Vendas Cancel. Inadim.",
                  "expression": "\nCALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),\n    USERELATIONSHIP('dCalendario (UAU)'[Data Atendimento],'fVendas-UAU'[DataCancel])\n    ,'fVendas-UAU'[Motivo]=\"INADIMPLÊNCIA\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Comissão",
                  "expression": "SUM('fVendas-UAU'[Comissão])",
                  "isHidden": false
                },
                {
                  "name": "RCI",
                  "expression": "([Qtd de Vendas (UAU)]*0.6)*1113",
                  "isHidden": false
                },
                {
                  "name": "Comissão Sócios",
                  "expression": "[Valor de Vendas (UAU)]*0.0466",
                  "isHidden": false
                },
                {
                  "name": "Vendas Cancel./DtVenda",
                  "expression": "-CALCULATE([Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Comissão Paga",
                  "expression": "\n[Valor Comissão]*(1-CALCULATE([Valor Parcela],'fParcelas-UAU'[StatusParc]=\"Cancelado\",'fParcelas-UAU'[TipoParc]=\"E\")/CALCULATE([Valor Parcela],'fParcelas-UAU'[TipoParc]=\"E\")) \n-(CALCULATE([Valor Pago],'fParcelas-UAU'[TipoParc]=\"E\",VendaDistrato[GeraProcesso]=\"Gerado\")-CALCULATE([Valor Desconto Distrato],VendaDistratoDesconto[Tipo Desconto]=\"Entrada\",VendaDistrato[GeraProcesso]=\"Gerado\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd de Clientes",
                  "expression": "DISTINCTCOUNT('fVendas-UAU'[CodCliente])",
                  "isHidden": false
                },
                {
                  "name": "Vendas Ativas YoY%",
                  "expression": "\nIF(\n\tISFILTERED('dCalendario (UAU)'[Data Atendimento]),\n\tERROR(\"Medidas rápidas de inteligência de tempo somente podem ser agrupadas ou filtradas pela hierarquia de data fornecida pelo Power BI ou pela coluna de data primária.\"),\n\tVAR __PREV_YEAR =\n\t\tCALCULATE(\n\t\t\t[Vendas Ativas],\n\t\t\tDATEADD('dCalendario (UAU)'[Data Atendimento].[Date], -1, YEAR)\n\t\t)\n\tRETURN\n\t\tDIVIDE([Vendas Ativas] - __PREV_YEAR, __PREV_YEAR)\n)",
                  "isHidden": false
                },
                {
                  "name": "Valor Vendas Canceladas (UAU)",
                  "expression": "\nCALCULATE([Valor de Vendas (UAU)],USERELATIONSHIP('dCalendario (UAU)'[Data Atendimento],'fVendas-UAU'[DataCancel]),'fVendas-UAU'[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Vendas (Ativas)",
                  "expression": "[Valor de Vendas (UAU)]-[Valor Vendas Canceladas (UAU)]",
                  "isHidden": false
                },
                {
                  "name": "% Cancelamento",
                  "expression": "CALCULATE(DIVIDE(Estrutura_Bips[BIPs DtVenda (Consultor)], [Qtd de Vendas (UAU)]))",
                  "isHidden": false
                },
                {
                  "name": "% Cancelamento (DtCancel)",
                  "expression": "CALCULATE(DIVIDE(Estrutura_Bips[BIPs DtCancel (Consultor)], [Qtd de Vendas (UAU)]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tChaveVenda,\n\tChaveUnidade,\n\tUnidade,\n\tCodEmpresa,\n\tCodObra,\n\tCodProduto,\n\tCodPerson,\n\tDataCad,\n\tDataVenda,\n\tUsrCad,\n\tUsrCancel,\n\tVenda,\n\tValorVenda,\n\tValorAcrescimo,\n\tValorDesconto,\n\tDataCessao,\n\tDataCancel,\n\tStatusVenda,\n\tPrazoVendaCancelMês,\n\tPrazoVendaCancelDia,\n\tFaixaPrazoCancelDia,\n\tDataFimContrato,\n\tPrazoFimContratoMes,\n\tFaixaFimContratoMes,\n\tCodCliente,\n\tCodVendedor,\n\tidContrato\n  FROM\tUAU.dbo.VwVendasTS\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Chave-Cliente Inserida\" = Table.AddColumn(Consulta, \"Chave-Cliente\", each Text.Combine({[ChaveUnidade], Text.From([CodCliente], \"pt-BR\")}, \"-\"), type text),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Chave-Cliente Inserida\", \"Comissão\", each if [CodEmpresa] = 18 then [ValorVenda]*0.06 else [ValorVenda]*0.056, type number),\n    #\"Added Conditional Column\" = Table.AddColumn(#\"Coluna Condicional Adicionada\", \"Tipo Produto\", each if [CodObra] = \"SLPTS\" then \"Time Share\" else \"Cota\"),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Added Conditional Column\", each ([CodPerson] <> -1)),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Linhas Filtradas\",{\"CodProduto\", \"CodPerson\", \"CodObra\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"DataVenda\", type date}, {\"DataCessao\", type date}, {\"DataCancel\", type date}, {\"CodEmpresa\", Int64.Type}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Tipo Alterado\",{\"ChaveVenda\"},VendaDistrato,{\"ChaveVenda\"},\"VendaDistrato\",JoinKind.LeftOuter),\n    #\"VendaDistrato Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"VendaDistrato\", {\"StatusAprovação\", \"Motivo\"}, {\"StatusAprovação\", \"Motivo\"}),\n    #\"Consultas Mescladas1\" = Table.NestedJoin(#\"VendaDistrato Expandido\",{\"CodCliente\"},#\"QtdVendas-UAU\",{\"CodCliente\"},\"QtdVendas-UAU\",JoinKind.LeftOuter),\n    #\"QtdVendas-UAU Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas1\", \"QtdVendas-UAU\", {\"QtdVendas\"}, {\"QtdVendas\"}),\n    #\"Consultas Mescladas2\" = Table.NestedJoin(#\"QtdVendas-UAU Expandido\", {\"ChaveVenda\"}, Propostas, {\"Vendas.ChaveVenda\"}, \"Propostas\", JoinKind.LeftOuter),\n    #\"Propostas Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas2\", \"Propostas\", {\"Proposta\"}, {\"Proposta\"}),\n    #\"Coluna Condicional Adicionada1\" = Table.AddColumn(#\"Propostas Expandido\", \"ChaveProposta\", each if [Proposta] = null then Text.Combine({\"TSE\", Text.From([idContrato], \"pt-BR\")}, \"-\") else Text.Combine({\"One\", Text.From([Proposta], \"pt-BR\")}, \"-\"), type text)\nin\n    #\"Coluna Condicional Adicionada1\""
                }
              ]
            },
            {
              "name": "dEstoque-UAU",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Torre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Apto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cota",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "QtdQuartos",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodProduto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodPerson",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorUnidade",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusUnid",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Bloqueio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "QtdSemanas",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Torre (2)",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Qtde_unid",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PorcentPr_Unid",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AreaPrivada",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Garagem",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AreaComum",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AreaTotal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TabelaPreco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FracaoIdeal_unid",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FracaoIdealDecimal_unid",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Pavimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vista",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DescCategoria",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FracaoTempo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrStatus",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CategoriaStatus",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ObsStatus",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataStatus",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Capacidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtde Cotas (UAU)",
                  "expression": "COUNT('dEstoque-UAU'[Unidade])",
                  "isHidden": false
                },
                {
                  "name": "VGV (UAU)",
                  "expression": "\nvar StatusCota = IF(VALUES('dEstoque-UAU'[StatusUnid])=\"Disponível\" || VALUES('dEstoque-UAU'[StatusUnid])=\"Fora de Venda\",TRUE(),FALSE())\nvar VlrParc = SUMX(FILTER('fParcelas-UAU',RELATED('fVendas-UAU'[StatusVenda])<>\"Cancelada\"),[Valor Parcela])\nreturn\nSWITCH(StatusCota,\nTRUE(),[VGV],\nVlrParc)",
                  "isHidden": false
                },
                {
                  "name": "VGV Atualizado (UAU)",
                  "expression": "SUMX('dEstoque-UAU',[VGV (UAU)])",
                  "isHidden": false
                },
                {
                  "name": "VGV",
                  "expression": "SUM('dEstoque-UAU'[ValorUnidade])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_VwEstoque = Fonte{[Schema=\"dbo\",Item=\"VwEstoque\"]}[Data],\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(dbo_VwEstoque,{{\"Torre\", Text.Proper, type text}, {\"Bloqueio\", Text.Proper, type text}, {\"Unidade\", Text.Proper, type text}}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Colocar Cada Palavra Em Maiúscula\", \"Torre (2)\", each if [CodEmpresa] = 13 then if [QtdSemanas] = 2 then [Torre] & \" - 2 Semanas\" else [Torre] else [Torre], type text),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Coluna Condicional Adicionada\",{{\"CodEmpresa\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "dCalendario (Carteira)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data Parcela",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano-Mês Referência",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês-Ano",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(#date(2030, 12, 31))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data Parcela\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data Parcela\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Colocar Cada Palavra Em Maiúscula\", \"Ano-Mês Referência\", each Text.Combine({Text.From([Ano], \"pt-BR\"), Text.Start([Mês], 3)}, \"-\"), type text),\n    #\"Coluna Mesclada Inserida2\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"Mês-Ano\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\")),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida2\",{{\"Mês-Ano\", type date}})\nin\n    #\"Tipo Alterado1\""
                }
              ]
            },
            {
              "name": "VendaDistrato",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_vdd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAprov_vdd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValTotDistrato_vdd",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "EmpresaProc_vdd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ObraProc_vdd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumProc_vdd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrAprov_vdd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "GeraProcesso",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusAprovação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipos Distrato",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n\tTRUE,\n\tISBLANK('VendaDistrato'[Motivo]),\n\t\"(Em branco)\",\n\t'VendaDistrato'[Motivo] IN {\"CANCELAMENTO EM MESA\",\n\t\t\"CESSÃO DE DIREITO\",\n\t\t\"CORREÇÃO DE LANÇAMENTO DE VENDA\",\n\t\t\"REATIVAÇÃO DE UNIDADE\"},\n\t\"Administrativo\",\n\t'VendaDistrato'[Motivo] IN {\"DESCISÃO JUDICIAL\"},\n\t\"Decisão Judicial\",\n\t'VendaDistrato'[Motivo] IN {\"INADIMPLÊNCIA\"},\n\t\"Inadimplência\",\n\t'VendaDistrato'[Motivo] IN {\"DESACORDO COMERCIAL\",\n\t\t\"DESISTENCIA DO CLIENTE\",\n\t\t\"DIVERGÊNCIAS DE INFORMAÇÕES NA VENDA\",\n\t\t\"DIVÓRCIO\",\n\t\t\"DOWNGRADE\",\n\t\t\"FINANCEIRO\",\n\t\t\"INSATISFAÇÃO DE USO RCI\",\n\t\t\"OUTROS\",\n\t\t\"PESSOAL (SAUDE, FAMILIAR, ETC.)\",\n\t\t\"REDUÇÃO DE CONTRATOS\",\n\t\t\"TROCA DE UNIDADE\",\n\t\t\"UPGRADE\"},\n\t\"Solicitação\",\n\t'VendaDistrato'[Motivo]\n)",
                  "columnType": "Calculated"
                }
              ],
              "measures": [
                {
                  "name": "Prazo Aprovação",
                  "expression": "MAXX(ADDCOLUMNS(ALLSELECTED(VendaDistrato),\"Prazo\",\n    DATEDIFF(VendaDistrato[DataCad_vdd],VendaDistrato[DataAprov_vdd],DAY)),[Prazo])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Distratos",
                  "expression": "-DISTINCTCOUNT(VendaDistrato[ChaveVenda])",
                  "isHidden": false
                },
                {
                  "name": "Valor a Devolver",
                  "expression": "SUM(VendaDistrato[ValTotDistrato_vdd])",
                  "isHidden": false
                },
                {
                  "name": "Vendas Cancel. Solicitado",
                  "expression": "[Vendas Cancel.]-[Vendas Cancel. Inadim.]",
                  "isHidden": false
                },
                {
                  "name": "% Cancel. Total/Vendas",
                  "expression": "[Vendas Cancel.]/[Qtd de Vendas (UAU)]",
                  "isHidden": false
                },
                {
                  "name": "% Cancel. Inadim.",
                  "expression": "[Vendas Cancel. Inadim.]/[Qtd de Vendas (UAU)]",
                  "isHidden": false
                },
                {
                  "name": "% Cancel. Solicitado",
                  "expression": "[Vendas Cancel. Solicitado]/[Qtd de Vendas (UAU)]",
                  "isHidden": false
                },
                {
                  "name": "% Cancel./Ativos",
                  "expression": "-[Vendas Cancel./DtVenda]/[Vendas Ativas]",
                  "isHidden": false
                },
                {
                  "name": "Valor Retido",
                  "expression": "\nCALCULATE([Valor Pago],FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[DataVenda],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"))\n-CALCULATE([Valor a Devolver],FILTER(ALLEXCEPT(VendaDistrato,'dEstoque-UAU'[Empreendimento],'fVendas-UAU'[DataVenda],'Sala de Vendas'[SalaDeVendas]),VendaDistrato[StatusAprovação]=\"Aprovado\" && VendaDistrato[GeraProcesso]=\"Gerado\"))",
                  "isHidden": false
                },
                {
                  "name": "% Cancel./Vendas",
                  "expression": "-[Vendas Cancel./DtVenda]/[Qtd de Vendas (UAU)]",
                  "isHidden": false
                },
                {
                  "name": "% Cancel. Total/Ativos",
                  "expression": "[Vendas Cancel.]/[Vendas Ativas]",
                  "isHidden": false
                },
                {
                  "name": "Valor Retido Total",
                  "expression": "[Valor Pago]-CALCULATE([Valor a Devolver],VendaDistrato[GeraProcesso]=\"Gerado\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Distrato (Gerado)",
                  "expression": "CALCULATE(VendaDistrato[Valor a Devolver],VendaDistrato[GeraProcesso]=\"Gerado\")",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tEmpresa_vdd,\n\tObra_vdd,\n\tNumVend_vdd,\n\tNumVhist_vdd,\n\tDataCalculo_vdd,\n\tDataCad_vdd,\n\tUsrCad_vdd,\n\tDataAprov_vdd,\n\tUsrAprov_vdd,\n\tStatusAprov_vdd,\n\tEmpresaProc_vdd,\n\tObraProc_vdd,\n\tNumProc_vdd,\n\tCorrigirProd_vdd,\n\tComPlanoIdxProd_vdd,\n\tCodIdxProd_vdd,\n\tGrupoIdxProd_vdd,\n\tCorrigirParc_vdd,\n\tComPlanoIdxParc_vdd,\n\tCodIdxParc_vdd,\n\tCorrigirCustaSeg_vdd,\n\tDevPorcMin_vdd,\n\tPorcMinRec_vdd,\n\tAbaterCustaSeg_vdd,\n\tAbaterDesc_vdd,\n\tNumParcDev_vdd,\n\tValTotDistrato_vdd,\n\tValCessao_vdd,\n\tAnexos_vdd,\n\tDataVenc_vdd,\n\tFrequenciaDia_vdd,\n\tGerarProcPgto_vdd,\n\tTipoDistrato_vdd,\n\tDataAssinatura_vdd,\n\tCategDistrato_vdd,\n\tPermitirGerarProcDistNaoAprov_vdd,\n\tEmpresaBanco_vdd,\n\tNumeroBanco_vdd,\n\tContaBanco_vdd,\n\tNum_vdd,\n\tTipoAditivo_vdd\n  FROM\tUAU.dbo.VendaDistrato\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Linhas Filtradas\" = Table.SelectRows(Consulta, each ([Obra_vdd] <> \"SLPFI\") and ([Empresa_vdd] = 10 or [Empresa_vdd] = 13 or [Empresa_vdd] = 18 or [Empresa_vdd] = 35 or [Empresa_vdd] = 36 or [Empresa_vdd] = 39 or [Empresa_vdd] = 41 or [Empresa_vdd] = 42 or [Empresa_vdd] = 43 or [Empresa_vdd] = 44 or [Empresa_vdd] = 80 or [Empresa_vdd] = 81 or [Empresa_vdd] = 99) and ([TipoAditivo_vdd] = 0)),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Linhas Filtradas\", {\"CategDistrato_vdd\"}, CategoriasDeDistrato, {\"Codigo_cd\"}, \"CategoriasDeDistrato\", JoinKind.LeftOuter),\n    #\"CategoriasDeDistrato Expandido1\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"CategoriasDeDistrato\", {\"Desc_cd\"}, {\"CategoriasDeDistrato.Desc_cd\"}),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"CategoriasDeDistrato Expandido1\",{{\"CategoriasDeDistrato.Desc_cd\", \"Motivo\"}}),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Colunas Renomeadas\",{\"Empresa_vdd\", \"Obra_vdd\", \"NumVend_vdd\", \"DataCad_vdd\", \"DataAprov_vdd\", \"UsrAprov_vdd\", \"StatusAprov_vdd\", \"EmpresaProc_vdd\", \"ObraProc_vdd\", \"NumProc_vdd\", \"ValTotDistrato_vdd\", \"GerarProcPgto_vdd\", \"Motivo\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Outras Colunas Removidas\",{{\"Empresa_vdd\", Int64.Type}, {\"DataCad_vdd\", type date}, {\"DataAprov_vdd\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"ChaveVenda\", each Text.Combine({Text.From([Empresa_vdd], \"pt-BR\"), [Obra_vdd], Text.PadStart(Text.From([NumVend_vdd], \"pt-BR\"),5,\"0\")}, \"-\"), type text),\n    #\"GeraProcesso Adicionada\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"GeraProcesso\", each if [GerarProcPgto_vdd] = false then \"A Gerar\" else if [GerarProcPgto_vdd] = true then \"Gerado\" else null, type text),\n    #\"StatusAprovação Adicionada\" = Table.AddColumn(#\"GeraProcesso Adicionada\", \"StatusAprovação\", each if [StatusAprov_vdd] = 0 then \"Não Aprovado\" else if [StatusAprov_vdd] = 1 then \"Aprovado\" else null, type text),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"StatusAprovação Adicionada\",{\"Empresa_vdd\", \"Obra_vdd\", \"NumVend_vdd\", \"GerarProcPgto_vdd\", \"StatusAprov_vdd\"})\nin\n    #\"Colunas Removidas\""
                }
              ]
            },
            {
              "name": "_FiltroVendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idFiltroMedidas",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "FiltroMedidas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Vendas (TSE)",
                  "expression": "SWITCH(TRUE(),\n    _FiltroVendas[MedidaVendaSelecionada]=1, \n        CALCULATE(DISTINCTCOUNT('Propostas'[ChaveProposta]),\n            USERELATIONSHIP('Propostas'[DataProp],'dCalendario (TSE)'[Data Atendimento])),\n    _FiltroVendas[MedidaVendaSelecionada]=2, \n        CALCULATE(DISTINCTCOUNT('Propostas'[ChaveProposta]), \n            FILTER('Propostas','Propostas'[StatusProp]<>\"CanceladaMesa\" && ('Propostas'[idorigemvenda]=1 || 'Propostas'[idorigemvenda]=2 || 'Propostas'[idorigemvenda]=12 || ISBLANK('Propostas'[idorigemvenda])))),\n    BLANK() )",
                  "isHidden": false
                },
                {
                  "name": "MedidaVendaSelecionada",
                  "expression": "MAX(_FiltroVendas[idFiltroMedidas])",
                  "isHidden": false
                },
                {
                  "name": "Valor Vendas (TSE)",
                  "expression": "SWITCH(TRUE(),\n    _FiltroVendas[MedidaVendaSelecionada]=1,[Valor de Vendas (TSE)],\n    _FiltroVendas[MedidaVendaSelecionada]=2,\n        CALCULATE(SUM('Propostas'[ValorVenda]),\n            USERELATIONSHIP('Propostas'[DataProp],'dCalendario (tse)'[Data Atendimento])),\n    BLANK() )",
                  "isHidden": false
                },
                {
                  "name": "Vendas YoY%",
                  "expression": "\nIF(\n\tISFILTERED('dCalendario (TSE)'[Data Atendimento]),\n\tERROR(\"Medidas rápidas de inteligência de tempo somente podem ser agrupadas ou filtradas pela hierarquia de data fornecida pelo Power BI ou pela coluna de data primária.\"),\n\tVAR __PREV_YEAR =\n\t\tCALCULATE(\n\t\t\t[Qtd Vendas (TSE)],\n\t\t\tDATEADD('dCalendario (TSE)'[Data Atendimento].[Date], -1, YEAR)\n\t\t)\n\tRETURN\n\t\tDIVIDE([Qtd Vendas (TSE)] - __PREV_YEAR, __PREV_YEAR)\n)",
                  "isHidden": false
                },
                {
                  "name": "Valor Vendas YoY%",
                  "expression": "\nIF(\n\tISFILTERED('dCalendario (TSE)'[Data Atendimento]),\n\tERROR(\"Medidas rápidas de inteligência de tempo somente podem ser agrupadas ou filtradas pela hierarquia de data fornecida pelo Power BI ou pela coluna de data primária.\"),\n\tVAR __PREV_YEAR =\n\t\tCALCULATE(\n\t\t\t[Valor de Vendas (TSE)],\n\t\t\tDATEADD('dCalendario (TSE)'[Data Atendimento].[Date], -1, YEAR)\n\t\t)\n\tRETURN\n\t\tDIVIDE([Valor de Vendas (TSE)] - __PREV_YEAR, __PREV_YEAR)\n)",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUQpLzUtJLFbQcClRADM1lWJ1opWMUGUcS4BsPaBULAA=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [idFiltroMedidas = _t, FiltroMedidas = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"idFiltroMedidas\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "dOrigemCasal",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idorigemcasal",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_origemcasal = Fonte{[Schema=\"public\",Item=\"origemcasal\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(public_origemcasal,{\"idorigemcasal\", \"descricao\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "_FiltroParcelas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idFiltroParcelas",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "FiltroParcelas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Parc Selecionada",
                  "expression": "MAX(_FiltroParcelas[idFiltroParcelas])",
                  "isHidden": false
                },
                {
                  "name": "Valor Parcela (Filtro)",
                  "expression": "SWITCH(TRUE(),\n                        [Parc Selecionada]=1,[Valor Parcela],\n                        [Parc Selecionada]=2,[Valor Recebido],\n                        [Parc Selecionada]=3,[Valor Conciliado],\n                        BLANK())",
                  "isHidden": false
                },
                {
                  "name": "% Inadimplente/Conciliado",
                  "expression": "\n(CALCULATE([Valor Parcela],'fParcelas-UAU'[PrazoRecebVencMes]>-1)-[Valor Conciliado])/\n CALCULATE([Valor Parcela],'fParcelas-UAU'[PrazoRecebVencMes]>-1)",
                  "isHidden": false
                },
                {
                  "name": "% Recebido/Faturado",
                  "expression": "[Valor Parcela (Filtro)]/CALCULATE([Valor Parcela],'fParcelas-UAU'[PrazoRecebVencMes]>-1)",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlTSUQpLzUvOzE3NK8lXitWJVjICCgWlJqcmIYkZA8Wc84HKcjITDy8/vBgoGgsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type text) meta [Serialized.Text = true]) in type table [idFiltroParcelas = _t, FiltroParcelas = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"idFiltroParcelas\", Int64.Type}, {\"FiltroParcelas\", type text}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "dAtualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualizacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = \n#table({\"Ultima Atualizacao\"}, {{DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),-3,0)}}),\n    \n#\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualizacao\", type datetimezone}})\n\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "SolicitaçãoCancelamento",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Num_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFim_atd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_atd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Usuário_Responsável",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Usuário_Cadastrou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Canal_Comunicação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descr_atd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data_Solicitação",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo da Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF(RELATED('fVendas-UAU'[DataVenda]),'SolicitaçãoCancelamento'[Data_Solicitação],DAY)+1",
                  "columnType": "Calculated"
                },
                {
                  "name": "Dias em Aberto",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF('SolicitaçãoCancelamento'[Status_Atendimento]=\"Aberto\",DATEDIFF('SolicitaçãoCancelamento'[Data_Solicitação],TODAY(),DAY),DATEDIFF('SolicitaçãoCancelamento'[Data_Solicitação],'SolicitaçãoCancelamento'[DataFim_atd],DAY))",
                  "columnType": "Calculated"
                },
                {
                  "name": "Indice",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Solicitações",
                  "expression": "CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[Num_atd]),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Vendas com Solicitação",
                  "expression": "CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[ChaveVenda]),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_Atendimento = Fonte{[Schema=\"dbo\",Item=\"VwSolicitacaoCancelamento\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(dbo_Atendimento, each ([Status_Atendimento] <> \"Cancelado\")),\n    #\"Texto Extraído Após o Delimitador\" = Table.TransformColumns(#\"Filtered Rows\", {{\"Data_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}, {\"Motivo_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}}),\n    #\"Texto Limpo\" = Table.TransformColumns(#\"Texto Extraído Após o Delimitador\",{{\"Data_Solicitação\", Text.Clean, type text}, {\"Motivo_Solicitação\", Text.Clean, type text}, {\"Tipo_Solicitação\", Text.Clean, type text}}),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Texto Limpo\",{{\"Data_Solicitação\", type date}, {\"DataCad_atd\", type date}}),\n    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Tipo Alterado1\", \"CodEmpresa\", each Text.BeforeDelimiter([ChaveVenda], \"-\"), type text),\n    #\"Consulta Acrescentada\" = Table.Combine({#\"Inserted Text Before Delimiter\", SolicitaçãoRedução}),\n    #\"Erros Substituídos\" = Table.ReplaceErrorValues(#\"Consulta Acrescentada\", {{\"Data_Solicitação\", null}}),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Erros Substituídos\",{{\"ChaveVenda\", Order.Ascending}, {\"Data_Solicitação\", Order.Ascending}}),\n    // Daqui para baixo está sendo feito um processo para filtrar apenas a primeira solicitação por chave de venda.\n    #\"Linhas Agrupadas\" = Table.Group(#\"Linhas Classificadas\", {\"ChaveVenda\"}, {{\"Tabela\", each _, type table [ChaveUnidade=nullable text, ChaveVenda=nullable text, Num_atd=number, CodCliente=nullable number, Cliente=nullable text, Status_Atendimento=nullable text, Tipo_Atendimento=nullable text, Usuário_Responsável=nullable text, DataCad_atd=nullable date, DataFim_atd=nullable datetime, Usuário_Cadastrou=nullable text, Canal_Comunicação=nullable text, NumVtwf_atd=nullable number, Descr_atd=nullable text, Data_Solicitação=nullable date, Motivo_Solicitação=text, Tipo_Solicitação=text, CodEmpresa=text]}}),\n    #\"Índice Adicionado\" = Table.TransformColumns(#\"Linhas Agrupadas\", {\"Tabela\", each Table.AddIndexColumn( _, \"Indice\", 1, 1, Int64.Type)}),\n    #\"Tabela Expandido\" = Table.ExpandTableColumn(#\"Índice Adicionado\", \"Tabela\", {\"ChaveUnidade\", \"Num_atd\", \"CodCliente\", \"Cliente\", \"Status_Atendimento\", \"Tipo_Atendimento\", \"Usuário_Responsável\", \"DataCad_atd\", \"DataFim_atd\", \"Usuário_Cadastrou\", \"Canal_Comunicação\", \"NumVtwf_atd\", \"Descr_atd\", \"Data_Solicitação\", \"Motivo_Solicitação\", \"Tipo_Solicitação\", \"CodEmpresa\", \"Indice\"}, {\"ChaveUnidade\", \"Num_atd\", \"CodCliente\", \"Cliente\", \"Status_Atendimento\", \"Tipo_Atendimento\", \"Usuário_Responsável\", \"DataCad_atd\", \"DataFim_atd\", \"Usuário_Cadastrou\", \"Canal_Comunicação\", \"NumVtwf_atd\", \"Descr_atd\", \"Data_Solicitação\", \"Motivo_Solicitação\", \"Tipo_Solicitação\", \"CodEmpresa\", \"Indice\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Tabela Expandido\",{{\"Data_Solicitação\", type date}, {\"DataFim_atd\", type date}, {\"DataCad_atd\", type date}, {\"ChaveUnidade\", type text}, {\"Cliente\", type text}, {\"Status_Atendimento\", type text}, {\"Tipo_Atendimento\", type text}, {\"Usuário_Responsável\", type text}, {\"Usuário_Cadastrou\", type text}, {\"Canal_Comunicação\", type text}, {\"Descr_atd\", type text}, {\"Motivo_Solicitação\", type text}, {\"Tipo_Solicitação\", type text}, {\"Indice\", Int64.Type}, {\"CodEmpresa\", Int64.Type}, {\"NumVtwf_atd\", Int64.Type}, {\"Num_atd\", Int64.Type}, {\"CodCliente\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Sala de Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodSalaDeVendas",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveCidadeSala",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SalaDeVendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CidadeUF",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CidadeVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Regiao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UnidadeNegocio_TSE",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoSala",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusSala",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataInicio",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataTermino",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_sala_comissoes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "regional",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT * FROM comercial.sala_vendas sv \",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(Consulta,{{\"chave_cidade_sala\", \"ChaveCidadeSala\"}, {\"cidade_uf\", \"CidadeUF\"}, {\"cidade_venda\", \"CidadeVenda\"}, {\"data_inicio\", \"DataInicio\"}, {\"data_termino\", \"DataTermino\"}, {\"regiao\", \"Regiao\"}, {\"sala_de_vendas\", \"SalaDeVendas\"}, {\"status_sala\", \"StatusSala\"}, {\"tipo_sala\", \"TipoSala\"}, {\"unidade_negocio_tse\", \"UnidadeNegocio_TSE\"}, {\"cod_sala_de_vendas\", \"CodSalaDeVendas\"}})\nin\n    #\"Colunas Renomeadas\""
                }
              ]
            },
            {
              "name": "TipoParcelas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Tipo_par",
                  "dataType": "String",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao_par",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo de Parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd03\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tTipo_par,\n\tDescricao_par,\n\tAtInat_par,\n\tDataCad_par,\n\tTipoPara_par,\n\tUsrCad_par,\n\tCategParc_par,\n\tForaIRPF_par,\n\tDesconsiderarNoDescQuitacao_par,\n\tDesconsiderarNoEnvioPorEmail_par,\n\tDesconsiderarNoRateioCobranca_par,\n\tCategMovFin_par,\n\tFinanciamento_par,\n\tCap_par,\n\tTipoSerie_par,\n\tAplicarCurvaObra_par\n  FROM\tUAU.dbo.Parcelas\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"Tipo_par\", \"Descricao_par\"}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Outras Colunas Removidas\", \"Tipo de Parcela\", each if [Tipo_par] = \"3\" then \"Saldo\" else if [Tipo_par] = \"A\" then \"Saldo\" else if [Tipo_par] = \"B\" then \"Saldo\" else if [Tipo_par] = \"P\" then \"Saldo\" else if [Tipo_par] = \"R\" then \"Saldo\" else if [Tipo_par] = \"5\" then \"Entrada\" else if [Tipo_par] = \"E\" then \"Entrada\" else if [Tipo_par] = \"F\" then \"Entrada\" else if [Tipo_par] = \"I\" then \"Entrada\" else if [Tipo_par] = \"SI\" then \"Sinal\" else \"Taxas e Custas\", type text),\n    #\"Sorted Rows\" = Table.Sort(#\"Coluna Condicional Adicionada\",{{\"Tipo de Parcela\", Order.Ascending}})\nin\n    #\"Sorted Rows\""
                }
              ]
            },
            {
              "name": "dCalendario (Cancelamento)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data Atendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês Abrev",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano-Mês Referência",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês-Ano",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Text.Proper(Date.MonthName([Column1])), type text),\n    #\"Primeiros Caracteres Inseridos\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Mês Abrev\", each Text.Proper(Text.Start(Text.From([Mês], \"pt-BR\"), 3)), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Primeiros Caracteres Inseridos\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Text.Proper(Date.ToText([Column1],\"dddd\")), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data Atendimento\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data Atendimento\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"Ano-Mês Referência\", each Text.Combine({Text.From([Ano], \"pt-BR\"), [Mês Abrev]}, \"-\"), type text),\n    #\"Coluna Mesclada Inserida2\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"Mês-Ano\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\"), type text),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida2\",{{\"Mês-Ano\", type date}})\nin\n    #\"Tipo Alterado1\""
                }
              ]
            },
            {
              "name": "dCalendario (TSE)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data Atendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês Abrev",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano-Mês Referência",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês-Ano",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Text.Proper(Date.MonthName([Column1])), type text),\n    #\"Primeiros Caracteres Inseridos\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Mês Abrev\", each Text.Proper(Text.Start(Text.From([Mês], \"pt-BR\"), 3)), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Primeiros Caracteres Inseridos\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Text.Proper(Date.ToText([Column1],\"dddd\")), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data Atendimento\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data Atendimento\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"Ano-Mês Referência\", each Text.Combine({Text.From([Ano], \"pt-BR\"), [Mês Abrev]}, \"-\"), type text),\n    #\"Coluna Mesclada Inserida2\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"Mês-Ano\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\"), type text),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida2\",{{\"Mês-Ano\", type date}})\nin\n    #\"Tipo Alterado1\""
                }
              ]
            },
            {
              "name": "VendaDistratoDesconto",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "NumVhist_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PorcDesc_vdc",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoDesc_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValBase_vdc",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descrição Desconto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_vdc",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVdd_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Coeficiente_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoPar_vdc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDescontoDistrato",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo Desconto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empresa_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Obra_vdc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVend_vdc",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Valor Desconto Distrato",
                  "expression": "SUM(VendaDistratoDesconto[ValorDescontoDistrato])",
                  "isHidden": false
                },
                {
                  "name": "Imposto sobre Retido",
                  "expression": "\n(([Valor Pago]-CALCULATE([Valor a Devolver],VendaDistrato[GeraProcesso]=\"Gerado\"))/[Valor Pago])\n*CALCULATE(SUMX('fParcelas-UAU',[Valor Parcela]*'fParcelas-UAU'[Imposto]),\n    FILTER('fParcelas-UAU','fParcelas-UAU'[StatusParc]=\"Recebida\" || 'fParcelas-UAU'[StatusParc]=\"A Compensar\"))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tEmpresa_vdc,\n\tObra_vdc,\n\tNumVend_vdc,\n\tNumVhist_vdc,\n\tNum_vdc,\n\tPorcDesc_vdc,\n\tTipoDesc_vdc,\n\tValBase_vdc,\n\tDescr_vdc,\n\tTipo_vdc,\n\tNumVdd_vdc,\n\tCoeficiente_vdc,\n\tTipoPar_vdc\n  FROM\tUAU.dbo.VendaDistratoDesconto\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Linhas Filtradas\" = Table.SelectRows(Consulta, each ([Empresa_vdc] = 10 or [Empresa_vdc] = 13 or [Empresa_vdc] = 18 or [Empresa_vdc] = 35 or [Empresa_vdc] = 36 or [Empresa_vdc] = 39 or [Empresa_vdc] = 41 or [Empresa_vdc] = 42 or [Empresa_vdc] = 43 or [Empresa_vdc] = 44 or [Empresa_vdc] = 80 or [Empresa_vdc] = 81 or [Empresa_vdc] = 99)),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Linhas Filtradas\", \"ChaveVenda\", each Text.Combine({Text.From([Empresa_vdc], \"pt-BR\"), [Obra_vdc], Text.PadStart(Text.From([NumVend_vdc], \"pt-BR\"),5,\"0\")}, \"-\"), type text),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Coluna Mesclada Inserida\", \"Tipo Desconto\", each if [TipoPar_vdc] = \"E\" then \"Entrada\" else if [TipoPar_vdc] = \"SI\" then \"Sinal\" else if Text.Contains(Text.Upper([Descr_vdc]), \"SINAL\") then \"Entrada\" else if Text.Contains(Text.Upper([Descr_vdc]), \"ENTR\") then \"Entrada\" else \"Outros\"),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Coluna Condicional Adicionada\",{{\"Descr_vdc\", \"Descrição Desconto\"}}),\n    #\"ValorDescontoDistrato Inserida\" = Table.AddColumn(#\"Colunas Renomeadas\", \"ValorDescontoDistrato\", each [ValBase_vdc] * [PorcDesc_vdc], type number)\nin\n    #\"ValorDescontoDistrato Inserida\""
                }
              ]
            },
            {
              "name": "Empresas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Codigo_emp",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Desc_emp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Norte",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Empresas'[Empreendimento]),\n  \"(Em branco)\",\n  'Empresas'[Empreendimento] IN {\"Beach\",\n    \"Exclusive\",\n    \"Park\",\n    \"Premium\"},\n  \"Norte\",\n  'Empresas'[Empreendimento]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Nordeste",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Empresas'[Norte]),\n  \"(Em branco)\",\n  'Empresas'[Norte] IN {\"Porto\",\n    \"Porto 2\"},\n  \"Nordeste\",\n  'Empresas'[Norte]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Centro-Oeste",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Empresas'[Nordeste]),\n  \"(Em branco)\",\n  'Empresas'[Nordeste] IN {\"Pyrenéus\"},\n  \"Centro-Oeste\",\n  'Empresas'[Nordeste]\n)",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd03\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT#(cr)#(lf)#(tab)Codigo_emp,#(cr)#(lf)#(tab)Desc_emp,#(cr)#(lf)#(tab)CGC_emp,#(cr)#(lf)#(tab)IE_emp,#(cr)#(lf)#(tab)Endereco_emp,#(cr)#(lf)#(tab)Setor_emp,#(cr)#(lf)#(tab)Cidade_emp,#(cr)#(lf)#(tab)UF_emp,#(cr)#(lf)#(tab)CEP_emp,#(cr)#(lf)#(tab)Fone_emp,#(cr)#(lf)#(tab)Fax_emp,#(cr)#(lf)#(tab)RedIcms_emp,#(cr)#(lf)#(tab)IpiIsenta_emp,#(cr)#(lf)#(tab)AtInat_emp,#(cr)#(lf)#(tab)CodEmPresaNet_emp,#(cr)#(lf)#(tab)Anexos_Emp,#(cr)#(lf)#(tab)InscrMunic_emp,#(cr)#(lf)#(tab)EmpresaFolha_emp,#(cr)#(lf)#(tab)NumCid_emp,#(cr)#(lf)#(tab)email_emp,#(cr)#(lf)#(tab)TipoInsc_emp,#(cr)#(lf)#(tab)NumEnd_emp,#(cr)#(lf)#(tab)OptSimples_emp,#(cr)#(lf)#(tab)QtdeSocio_Emp,#(cr)#(lf)#(tab)DDDFone_Emp,#(cr)#(lf)#(tab)DDDFax_Emp,#(cr)#(lf)#(tab)IncetivadorCultural_emp,#(cr)#(lf)#(tab)CodIdxCorrPat_Emp,#(cr)#(lf)#(tab)CodIdxIndPat_Emp,#(cr)#(lf)#(tab)DataSimples_emp,#(cr)#(lf)#(tab)InsNIRE_emp,#(cr)#(lf)#(tab)InsSuframa_emp,#(cr)#(lf)#(tab)NumBrr_emp,#(cr)#(lf)#(tab)NumLogr_emp,#(cr)#(lf)#(tab)CodPesEmpresa_emp,#(cr)#(lf)#(tab)CodGrupo_emp,#(cr)#(lf)#(tab)NomeFantasia_emp#(cr)#(lf)  FROM#(tab)UAU.dbo.Empresas\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"Codigo_emp\", \"Desc_emp\"}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Outras Colunas Removidas\", \"Empreendimento\", each if [Codigo_emp] = 10 then \"Park\" else if [Codigo_emp] = 13 then \"Exclusive\" else if [Codigo_emp] = 18 then \"Premium\" else if [Codigo_emp] = 12 then \"GAV Holding\" else if [Codigo_emp] = 35 then \"Beach\" else if [Codigo_emp] = 36 then \"Jeriquiá\" else if [Codigo_emp] = 39 then \"Pipa\" else if [Codigo_emp] = 41 then \"Porto\" else if [Codigo_emp] = 42 then \"Pyrenéus\" else if [Codigo_emp] = 43 then \"Porto 2\" else if [Codigo_emp] = 44 then \"Oikos Maragogi\" else if [Codigo_emp] = 80 then \"Gran Valley\" else if [Codigo_emp] = 81 then \"Areya Barra\" else if [Codigo_emp] = 99 then \"Gran Garden\" else null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Coluna Condicional Adicionada\",{{\"Codigo_emp\", Int64.Type}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Pessoas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_pes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nome_pes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_pes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cpf_pes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd03\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT\n\tcod_pes,\n\tnome_pes,\n\ttipo_pes,\n\tcpf_pes\n  FROM\tUAU.dbo.Pessoas\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            },
            {
              "name": "Estrutura_Bips",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "IdCategoria.1",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Categoria.1",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "IdCategoria.2",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Categoria.2",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "IdSubCategoria",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SubCategoria",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "BIPS Dt_Venda",
                  "expression": "\nvar Previous = IF(ISFILTERED('dCalendario (UAU)'[Data Atendimento].[Mês]),STARTOFMONTH('dCalendario (UAU)'[Data Atendimento]),STARTOFYEAR('dCalendario (UAU)'[Data Atendimento]))\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar SolicitacoesCancelamento7dias = \nSWITCH(\n    TRUE(),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Todas as Solicitações\",\n    CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[Num_atd]),'SolicitaçãoCancelamento'[Tipo_Solicitação]=\"DENTRO\"),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Primeira Solicitação\",\n    CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamentoFiltrada'[Num_atd]),'SolicitaçãoCancelamentoFiltrada'[Tipo_Solicitação]=\"DENTRO\")\n)\nvar SolicitacoesCancelamentoFora = \nSWITCH(\n    TRUE(),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Todas as Solicitações\",\n    CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[Num_atd]),'SolicitaçãoCancelamento'[Tipo_Solicitação]<>\"DENTRO\"),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Primeira Solicitação\",\n    CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamentoFiltrada'[Num_atd]),'SolicitaçãoCancelamentoFiltrada'[Tipo_Solicitação]<>\"DENTRO\")\n)\nvar DistratosInadimplencia = CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Inadimplência\")\nvar DistratosSolicitacaoCancelamento7dias = CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Solicitação\" && 'fVendas-UAU'[Motivo]<>\"REDUÇÃO DE CONTRATOS\"),FILTER('SolicitaçãoCancelamento','SolicitaçãoCancelamento'[Tipo_Solicitação]=\"DENTRO\"))\nvar DistratosSolicitacaoCancelamentoFora = CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Solicitação\" && 'fVendas-UAU'[Motivo]<>\"REDUÇÃO DE CONTRATOS\"),FILTER('SolicitaçãoCancelamento','SolicitaçãoCancelamento'[Tipo_Solicitação]<>\"DENTRO\"))\nvar DistratosPorSolicitacao = CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[Tipos Distrato]=\"Solicitação\")\nvar DistratosAdmJud = CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[Tipos Distrato]<>\"Solicitação\" && 'fVendas-UAU'[Tipos Distrato]<>\"Inadimplência\")\nvar Distratos = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\")\nvar Faixa = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[Faixa Cancelamento],Estrutura_Bips[SubCategoria]))\n\nvar Quitadas = CALCULATE([Qtd de Vendas (UAU)], 'fVendas-UAU'[StatusVenda]=\"Quitada\")\n\nvar Ativas = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))\n-CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\"))\nvar Ativas_Ant = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=Previous))\n-CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataCancel]<=Previous),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\"))\n\nreturn\nSWITCH(\n    TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Totais\", Vendas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Solicitações de Cancelamento (7 dias)\", SolicitacoesCancelamento7dias,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Solicitações de Cancelamento (Fora do prazo)\", SolicitacoesCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Inadimplência\", DistratosInadimplencia,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Solicitação (7 dias)\", DistratosSolicitacaoCancelamento7dias,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Solicitação (Fora do prazo)\", DistratosSolicitacaoCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos sem Solicitação\", DistratosPorSolicitacao - DistratosSolicitacaoCancelamento7dias - DistratosSolicitacaoCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos Administrativos/Judiciais\", DistratosAdmJud,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Líquidas\", Vendas - Distratos,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Quitadas\", Quitadas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Base Ativa\", Ativas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        IF(NOT(ISBLANK(Ativas_Ant)),FORMAT(ROUND(DIVIDE(Distratos,Ativas_Ant,0),4),\"0.0%\")),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        IF(NOT(ISBLANK(Ativas_Ant)),FORMAT(ROUND(DIVIDE(Vendas,Ativas_Ant,0),4),\"0.0%\")),\n    Faixa\n    )",
                  "isHidden": false
                },
                {
                  "name": "BIPS Dt_Cancel",
                  "expression": "\nvar Previous = IF(ISFILTERED('dCalendario (UAU)'[Data Atendimento].[Mês]),STARTOFMONTH('dCalendario (UAU)'[Data Atendimento]),STARTOFYEAR('dCalendario (UAU)'[Data Atendimento]))\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar SolicitacoesCancelamento7dias = \nSWITCH(\n    TRUE(),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Todas as Solicitações\",\n    CALCULATE(CALCULATE('SolicitaçãoCancelamento'[Qtd Solicitações],'SolicitaçãoCancelamento'[Tipo_Solicitação]=\"DENTRO\"),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento])),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Primeira Solicitação\",\n    CALCULATE(CALCULATE('SolicitaçãoCancelamentoFiltrada'[Qtd Solicitações Filtradas],'SolicitaçãoCancelamentoFiltrada'[Tipo_Solicitação]=\"DENTRO\"),USERELATIONSHIP('SolicitaçãoCancelamentoFiltrada'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))\n)\nvar SolicitacoesCancelamentoFora = \nSWITCH(\n    TRUE(),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Todas as Solicitações\",\n    CALCULATE(CALCULATE('SolicitaçãoCancelamento'[Qtd Solicitações],'SolicitaçãoCancelamento'[Tipo_Solicitação]<>\"DENTRO\"),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento])),\n    SELECTEDVALUE(Parametro_Solicitacoes_Duplicadas[Visao]) = \"Primeira Solicitação\",\n    CALCULATE(CALCULATE('SolicitaçãoCancelamentoFiltrada'[Qtd Solicitações Filtradas],'SolicitaçãoCancelamentoFiltrada'[Tipo_Solicitação]<>\"DENTRO\"),USERELATIONSHIP('SolicitaçãoCancelamentoFiltrada'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))\n)\nvar DistratosInadimplencia = CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Inadimplência\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar DistratosSolicitacaoCancelamento7dias = CALCULATE(CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Solicitação\" && 'fVendas-UAU'[Motivo]<>\"REDUÇÃO DE CONTRATOS\"),FILTER('SolicitaçãoCancelamento','SolicitaçãoCancelamento'[Tipo_Solicitação]=\"DENTRO\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar DistratosSolicitacaoCancelamentoFora = CALCULATE(CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\" && 'fVendas-UAU'[Tipos Distrato]=\"Solicitação\" && 'fVendas-UAU'[Motivo]<>\"REDUÇÃO DE CONTRATOS\"),FILTER('SolicitaçãoCancelamento','SolicitaçãoCancelamento'[Tipo_Solicitação]<>\"DENTRO\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar DistratosPorSolicitacao = CALCULATE(CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[Tipos Distrato]=\"Solicitação\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar DistratosAdmJud = CALCULATE(CALCULATE(CALCULATE(DISTINCTCOUNT('fVendas-UAU'[ChaveVenda]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[Tipos Distrato]<>\"Solicitação\" && 'fVendas-UAU'[Tipos Distrato]<>\"Inadimplência\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar Distratos = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar Faixa = CALCULATE(CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[Faixa Cancelamento],Estrutura_Bips[SubCategoria])),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\n\nvar Quitadas = CALCULATE('fVendas-UAU'[Vendas Quitadas],USERELATIONSHIP('fVendas-UAU'[DataQuitacao],'dCalendario (UAU)'[Data Atendimento]))\n\nvar Ativas = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataQuitacao]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Quitada\")),USERELATIONSHIP('fVendas-UAU'[DataQuitacao],'dCalendario (UAU)'[Data Atendimento]))\nvar Ativas_Ant = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=Previous))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataCancel]<=Previous),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataQuitacao]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Quitada\")),USERELATIONSHIP('fVendas-UAU'[DataQuitacao],'dCalendario (UAU)'[Data Atendimento]))\n\nreturn\nSWITCH(\n    TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Totais\", Vendas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Solicitações de Cancelamento (7 dias)\", SolicitacoesCancelamento7dias,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Solicitações de Cancelamento (Fora do prazo)\", SolicitacoesCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Inadimplência\", DistratosInadimplencia,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Solicitação (7 dias)\", DistratosSolicitacaoCancelamento7dias,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos por Solicitação (Fora do prazo)\", DistratosSolicitacaoCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos sem Solicitação\", DistratosPorSolicitacao - DistratosSolicitacaoCancelamento7dias - DistratosSolicitacaoCancelamentoFora,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Distratos Administrativos/Judiciais\", DistratosAdmJud,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Líquidas\", Vendas - Distratos,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Vendas Quitadas\", Quitadas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Base Ativa\", Ativas,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        IF(NOT(ISBLANK(Ativas)),FORMAT(ROUND(DIVIDE(Distratos,Ativas,0),4),\"0.0%\")),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        IF(NOT(ISBLANK(Ativas)),FORMAT(ROUND(DIVIDE(Vendas,Ativas,0),4),\"0.0%\")),\n    Faixa\n    )",
                  "isHidden": false
                },
                {
                  "name": "BIPS DtCancel %AH",
                  "expression": "\nvar Previous = IF(ISFILTERED('dCalendario (UAU)'[Data Atendimento].[Mês]),STARTOFMONTH('dCalendario (UAU)'[Data Atendimento]),STARTOFYEAR('dCalendario (UAU)'[Data Atendimento]))\nvar PreviousY = DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR)\n\nvar BIPs = Estrutura_Bips[BIPs DtCancel]\nvar BIPs_Ano_Ant = CALCULATE(Estrutura_Bips[BIPs DtCancel],DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Vendas_Ano_Ant = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Distratos = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar Distratos_Ano_Ant = CALCULATE(CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento])),DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Ativas = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento]))),\n        USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\nvar Ativas_Mes_Ant = \nCALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento]))),DATEADD('dCalendario (UAU)'[Data Atendimento],-1,MONTH))\n-CALCULATE(CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento]))),\n        USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento])),DATEADD('dCalendario (UAU)'[Data Atendimento],-1,MONTH))\nvar Ativas_Ano_Ant = \nCALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento]))),DATEADD('dCalendario (UAU)'[Data Atendimento],-13,MONTH))\n-CALCULATE(CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento]))),\n        USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento])),DATEADD('dCalendario (UAU)'[Data Atendimento],-13,MONTH))\n\nreturn\nSWITCH(\n    TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\",\n        IF(NOT(ISBLANK(Ativas_Ano_Ant)),ROUND((DIVIDE(DIVIDE(Distratos,Ativas_Mes_Ant),DIVIDE(Distratos_Ano_Ant,Ativas_Ano_Ant),0)-1)*IF(Ativas_Ano_Ant<0,-1,1),4)),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\",\n        IF(NOT(ISBLANK(Ativas_Ano_Ant)),ROUND((DIVIDE(DIVIDE(Vendas,Ativas_Mes_Ant),DIVIDE(Vendas_Ano_Ant,Ativas_Ano_Ant),0)-1)*IF(Ativas_Ano_Ant<0,-1,1),4)),\n    IF(NOT(ISBLANK(BIPs_Ano_Ant)),IF(NOT(ISBLANK(BIPs)),ROUND((DIVIDE(BIPs,BIPs_Ano_Ant,0)-1)*IF(BIPs_Ano_Ant<0,-1,1),4)))\n    )",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtCancel %AH FORMAT",
                  "expression": "\nvar BIPs = Estrutura_Bips[BIPS DtCancel %AH]\nvar Vendas = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],Estrutura_Bips[Categoria.2]=\"Vendas Totais\")\nvar Liquidas = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],Estrutura_Bips[Categoria.2]=\"Vendas Líquidas\")\nvar Ativas = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],Estrutura_Bips[Categoria.2]=\"Base Ativa\")\nvar Recuperacao = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],Estrutura_Bips[Categoria.2]=\"Recuperação de Carteira\")\nvar Rec = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],FILTER(ALL(Estrutura_Bips),Estrutura_Bips[Categoria.2]=\"Recuperação de Carteira\"))\nvar Churn = CALCULATE(Estrutura_Bips[BIPS DtCancel %AH],FILTER(ALL(Estrutura_Bips),Estrutura_Bips[Categoria.2]=\"Churn\"))\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.2])=\"Vendas Totais\", Vendas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Vendas Líquidas\", Liquidas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Base Ativa\", Ativas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Churn\", \n        IF(Churn<0,\n            IF(Rec>0,(Churn/Rec)*-1,\n                IF(Churn<Rec,Churn/Rec,(Churn/Rec)*-1)),\n            IF(Rec<0,Churn/Rec,\n                IF(Churn>Rec,(Churn/Rec)*-1,Churn/Rec))),\n    MAX(Estrutura_Bips[Categoria.2])=\"Recuperação de Carteira\", Recuperacao,\n    BIPs*-1\n)",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtVenda %AV",
                  "expression": "\nvar BIPsDtVenda = Estrutura_Bips[BIPs DtVenda]\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Solicitacoes = CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[Num_atd]))\nvar Distratos = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\")\n\nvar SubTotal = SELECTEDVALUE(Estrutura_Bips[SubCategoria])\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Totais\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Base Ativa\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Churn\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Recuperação de Carteira\", BLANK(),\n    DIVIDE(BIPsDtVenda,Vendas))",
                  "isHidden": false
                },
                {
                  "name": "BIPS DtVenda %AH",
                  "expression": "\nvar Previous = IF(ISFILTERED('dCalendario (UAU)'[Data Atendimento].[Mês]),STARTOFMONTH('dCalendario (UAU)'[Data Atendimento]),STARTOFYEAR('dCalendario (UAU)'[Data Atendimento]))\nvar PreviousY = DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR)\n\nvar BIPs = Estrutura_Bips[BIPs DtVenda]\nvar BIPs_Ano_Ant = CALCULATE(Estrutura_Bips[BIPs DtVenda],DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Vendas_Ano_Ant = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Distratos = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\")\nvar Distratos_Ano_Ant = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),DATEADD('dCalendario (UAU)'[Data Atendimento],-1,YEAR))\n\nvar Ativas = \nCALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))\n-CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento])))\nvar Ativas_Mes_Ant = \nCALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento]))),DATEADD('dCalendario (UAU)'[Data Atendimento],-1,MONTH))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento]))),\n        DATEADD('dCalendario (UAU)'[Data Atendimento],-1,MONTH))\nvar Ativas_Ano_Ant = \nCALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento]))),DATEADD('dCalendario (UAU)'[Data Atendimento],-13,MONTH))\n-CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato],'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[StatusVenda]=\"Cancelada\"),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento]))),\n        DATEADD('dCalendario (UAU)'[Data Atendimento],-13,MONTH))\n\nreturn\nSWITCH(\n    TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\",\n        IF(NOT(ISBLANK(Ativas_Ano_Ant)),ROUND((DIVIDE(DIVIDE(Distratos,Ativas_Mes_Ant),DIVIDE(Distratos_Ano_Ant,Ativas_Ano_Ant),0)-1)*IF(Ativas_Ano_Ant<0,-1,1),4)),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\",\n        IF(NOT(ISBLANK(Ativas_Ano_Ant)),ROUND((DIVIDE(DIVIDE(Vendas,Ativas_Mes_Ant),DIVIDE(Vendas_Ano_Ant,Ativas_Ano_Ant),0)-1)*IF(Ativas_Ano_Ant<0,-1,1),4)),\n    IF(NOT(ISBLANK(BIPs_Ano_Ant)),IF(NOT(ISBLANK(BIPs)),ROUND((DIVIDE(BIPs,BIPs_Ano_Ant,0)-1)*IF(BIPs_Ano_Ant<0,-1,1),4)))\n    )",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtVenda %AH FORMAT",
                  "expression": "\nvar BIPs = Estrutura_Bips[BIPS DtVenda %AH]\nvar Vendas = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],Estrutura_Bips[Categoria.2]=\"Vendas Totais\")\nvar Liquidas = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],Estrutura_Bips[Categoria.2]=\"Vendas Líquidas\")\nvar Ativas = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],Estrutura_Bips[Categoria.2]=\"Base Ativa\")\nvar Recuperacao = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],Estrutura_Bips[Categoria.2]=\"Recuperação de Carteira\")\nvar Rec = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],FILTER(ALL(Estrutura_Bips),Estrutura_Bips[Categoria.2]=\"Recuperação de Carteira\"))\nvar Churn = CALCULATE(Estrutura_Bips[BIPS DtVenda %AH],FILTER(ALL(Estrutura_Bips),Estrutura_Bips[Categoria.2]=\"Churn\"))\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.2])=\"Vendas Totais\", Vendas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Vendas Líquidas\", Liquidas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Base Ativa\", Ativas,\n    MAX(Estrutura_Bips[Categoria.2])=\"Churn\", \n        IF(Churn<0,\n            IF(Rec>0,(Churn/Rec)*-1,\n                IF(Churn<Rec,Churn/Rec,(Churn/Rec)*-1)),\n            IF(Rec<0,Churn/Rec,\n                IF(Churn>Rec,(Churn/Rec)*-1,Churn/Rec))),\n    MAX(Estrutura_Bips[Categoria.2])=\"Recuperação de Carteira\", Recuperacao,\n    BIPs*-1\n)",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtCancel",
                  "expression": "\nvar vlrBIPs = SUMX(Estrutura_Bips,Estrutura_Bips[BIPS Dt_Cancel])\nvar medidaBIPs = Estrutura_Bips[BIPS Dt_Cancel]\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        medidaBips,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        medidaBips,\n    IF(NOT(ISBLANK(vlrBips)),FORMAT(vlrBips,\"#,##0\")))",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtCancel %AV",
                  "expression": "\nvar BIPsDtCancel = Estrutura_Bips[BIPs DtCancel]\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Solicitacoes = CALCULATE(CALCULATE('SolicitaçãoCancelamento'[Qtd Solicitações]),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))\nvar Distratos = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\n\nvar SubTotal = SELECTEDVALUE(Estrutura_Bips[SubCategoria])\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Totais\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Base Ativa\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Churn\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Recuperação de Carteira\", BLANK(),\n    DIVIDE(BIPsDtCancel,Vendas))",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtVenda",
                  "expression": "\nvar vlrBIPs = SUMX(Estrutura_Bips,Estrutura_Bips[BIPS Dt_Venda])\nvar medidaBIPs = Estrutura_Bips[BIPS Dt_Venda]\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        medidaBips,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        medidaBips,\n    IF(NOT(ISBLANK(vlrBips)),FORMAT(vlrBips,\"#,##0\")))",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtCancel (Consultor)",
                  "expression": "\nvar vlrBIPs = SUMX(Estrutura_Bips,Estrutura_Bips[BIPS Dt_Cancel])\nvar medidaBIPs = Estrutura_Bips[BIPS Dt_Cancel]\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        medidaBips,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        medidaBips,\n    vlrBips)",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtVenda (Consultor)",
                  "expression": "\nvar vlrBIPs = SUMX(Estrutura_Bips,Estrutura_Bips[BIPS Dt_Venda])\nvar medidaBIPs = Estrutura_Bips[BIPS Dt_Venda]\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[SubCategoria]) = \"Churn\", \n        medidaBips,\n    MAX(Estrutura_Bips[SubCategoria]) = \"Recuperação de Carteira\", \n        medidaBips,\n    vlrBips)",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtVenda %AV (Categ)",
                  "expression": "\nvar BIPsDtVenda = Estrutura_Bips[BIPs DtVenda]\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Solicitacoes = CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamento'[Num_atd]))\nvar Distratos = CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\")\n\nvar SubTotal = SELECTEDVALUE(Estrutura_Bips[SubCategoria])\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Totais\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Líquidas\", DIVIDE(BIPsDtVenda,Vendas),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Base Ativa\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Churn\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Recuperação de Carteira\", BLANK(),\n    MAX(Estrutura_Bips[SubCategoria]) = SubTotal && MAX(Estrutura_Bips[Categoria.1]) = \"Solicitações de Cancelamento\", DIVIDE(BIPsDtVenda,Solicitacoes),\n    MAX(Estrutura_Bips[SubCategoria]) = SubTotal && MAX(Estrutura_Bips[Categoria.1]) <> \"Solicitações de Cancelamento\", DIVIDE(BIPsDtVenda,Distratos),\n    DIVIDE(BIPsDtVenda,Vendas))",
                  "isHidden": false
                },
                {
                  "name": "BIPs DtCancel %AV (Categ)",
                  "expression": "\nvar BIPsDtCancel = Estrutura_Bips[BIPs DtCancel]\n\nvar Vendas = 'fVendas-UAU'[Qtd de Vendas (UAU)]\nvar Solicitacoes = CALCULATE(CALCULATE('SolicitaçãoCancelamento'[Qtd Solicitações]),USERELATIONSHIP('SolicitaçãoCancelamento'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))\nvar Distratos = CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],'fVendas-UAU'[StatusVenda]=\"Cancelada\"),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))\n\nvar SubTotal = SELECTEDVALUE(Estrutura_Bips[SubCategoria])\n\nreturn\nSWITCH(TRUE(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Totais\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Vendas Líquidas\", DIVIDE(BIPsDtCancel,Vendas),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Base Ativa\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Churn\", BLANK(),\n    MAX(Estrutura_Bips[Categoria.1]) = \"Recuperação de Carteira\", BLANK(),\n    MAX(Estrutura_Bips[SubCategoria]) = SubTotal && MAX(Estrutura_Bips[Categoria.1]) = \"Solicitações de Cancelamento\", DIVIDE(BIPsDtCancel,Solicitacoes),\n    MAX(Estrutura_Bips[SubCategoria]) = SubTotal && MAX(Estrutura_Bips[Categoria.1]) <> \"Solicitações de Cancelamento\", DIVIDE(BIPsDtCancel,Distratos),\n    DIVIDE(BIPsDtCancel,Vendas))",
                  "isHidden": false
                },
                {
                  "name": "Ativas1",
                  "expression": "CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataVenda]<=MAX('dCalendario (UAU)'[Data Atendimento])))",
                  "isHidden": false
                },
                {
                  "name": "Ativas2",
                  "expression": "CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataCancel]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Cancelada\")),USERELATIONSHIP('fVendas-UAU'[DataCancel],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Ativas3",
                  "expression": "CALCULATE(CALCULATE('fVendas-UAU'[Qtd de Vendas (UAU)],\n    FILTER(FILTER(ALLEXCEPT('fVendas-UAU','fVendas-UAU'[CodEmpresa],Empresas[Empreendimento],'dEstoque-UAU'[Empreendimento],'Sala de Vendas'[SalaDeVendas],'Sala de Vendas'[CidadeVenda], LocalCaptacao[LocalCaptacao], LocalCaptacao[TipoLocalCaptacao],'fVendas-UAU'[Tipo Produto], 'fVendas-UAU'[Vlr Recebido], VendaDistrato[Tipos Distrato], 'dEstoque-UAU'[QtdQuartos],Propostas[OrigemVenda], Propostas[StatusProp]),'fVendas-UAU'[DataQuitacao]<=MAX('dCalendario (UAU)'[Data Atendimento])),\n        'fVendas-UAU'[StatusVenda]=\"Quitada\")),USERELATIONSHIP('fVendas-UAU'[DataQuitacao],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"tZW7TsMwFIZfxepURAVx0iTtCEVIIBi4iKXqYCWWsJTEIU4YeB0GpEqMLIzkxfC1bW6KJcTkc/m/cyznOF6vJw6czCZPOIsRA4+0RIRx34Enw/G+1GbGK7k8/EATEpES1R/1F2YgxmCFsggnKMVZSUUJV/F2QhstmIYgJogd/eMuxouC6SUtEIgpyAv0RvVmPM5dEFYWqKTyAD3VdxcDOS3AVYZikuZJvc0igozMQjnYw+2QB7t/p0bV16IhbJ3tn1qNCO0PsBEDDKe9HTsn3RUOdpg3wLM4JZnyyCtlp9dVzIvoGyHU7U7DgOwoqot7k4gZarTWleDPN7itt7tQKzpeRBy1a2xFuxaYOArP2ArzLDCRnBtbYXMLzOerb2yF+RZYwNfA2AoLLLCQr6GxFRZaYAu+LoytsIUFtuTr0tgKW45j0BGf2TGO/uyOBSiF0DgahBagmBLoGkeDFrMCxZxA79h4muQBifr7F+Km/nypCLeE1G88Hp3UQFaWDPaZu4pfYY0FDaad6U/KemIYzhHD4IxfUvnT1WPRDXbisoAYi9VzVWRCpmej4R+GJCEm4h5HVY4L/c+Tj0hRYlLIZnpURjVjss3mFw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [IdCategoria.1 = _t, Categoria.1 = _t, IdCategoria.2 = _t, Categoria.2 = _t, IdSubCategoria = _t, SubCategoria = _t])\nin\n    Source"
                }
              ]
            },
            {
              "name": "Pendencias",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "QuemR_Pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataPrevista",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_pen",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCateg_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Obs_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtivacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_pwfp",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEtapa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsuarioResponsavel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Etapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "RespostaEtapa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Contenção",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Pendencias'[RespostaEtapa]),\n  \"(Em branco)\",\n  'Pendencias'[RespostaEtapa] IN {\"Cancelado\"},\n  \"Cancelado\",\n  'Pendencias'[RespostaEtapa] IN {\"Downgrade\",\n    \"Renegociado\",\n    \"Reversão Time Share\",\n    \"Sem Alteração\",\n    \"Upgrade\"},\n  \"Contido\",\n  'Pendencias'[RespostaEtapa] IN {\"Devolvido Para Carteira\",\n    \"Prazo Finalizado\"},\n  \"Devolvido Para Carteira\",\n  'Pendencias'[RespostaEtapa] IN {\"Em Negociação\"},\n  \"Em Negociação\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status Pendência",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Pendencias'[Status_pen]),\n  \"(Em branco)\",\n  'Pendencias'[Status_pen] IN {3},\n  \"Cancelada\",\n  'Pendencias'[Status_pen] IN {0},\n  \"Pendente\",\n  'Pendencias'[Status_pen] IN {1},\n  \"Resolvida\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_Pendencia = Fonte{[Schema=\"dbo\",Item=\"Pendencia\"]}[Data],\n    #\"CodCateg Filtradas\" = Table.SelectRows(dbo_Pendencia, each ([CodCateg_pen] = \"07.04\")),\n    #\"PassoWorkflowPend Expandido\" = Table.ExpandTableColumn(#\"CodCateg Filtradas\", \"PassoWorkflowPend\", {\"NumVtwf_pwfp\", \"NumPasso_pwfp\", \"Identificador_pwfp\"}, {\"NumVtwf_pwfp\", \"NumPasso_pwfp\", \"Identificador_pwfp\"}),\n    #\"PendenciaPassoWorkflowPendRespostas Expandido\" = Table.ExpandTableColumn(#\"PassoWorkflowPend Expandido\", \"PendenciaPassoWorkflowPendRespostas\", {\"PassoWorkflowPendRespostas\"}, {\"PassoWorkflowPendRespostas\"}),\n    #\"PassoWorkflowPendRespostas Expandido\" = Table.ExpandRecordColumn(#\"PendenciaPassoWorkflowPendRespostas Expandido\", \"PassoWorkflowPendRespostas\", {\"DescrResp_pwpr\"}, {\"DescrResp_pwpr\"}),\n    #\"Valor Substituído\" = Table.ReplaceValue(#\"PassoWorkflowPendRespostas Expandido\",\"RENEGOCIAÇÃO\",\"RENEGOCIADO\",Replacer.ReplaceText,{\"DescrResp_pwpr\"}),\n    #\"Etapa Adicionada\" = Table.AddColumn(#\"Valor Substituído\", \"Etapa\", each Text.Proper(if [Identificador_pwfp] = \"PROCESSO FÍSICO\" then \"MONTAR PROCESSO\" else if [Identificador_pwfp] = \"CONCILIAÇÃO\" then \"VERIFICAR CONCILIAÇÃO\" else if [Identificador_pwfp] = \"ATENDIMENTO CONCILIAÇÃO\" then \"SOLICITAR ESTORNO/CONCIL.\" else if [Identificador_pwfp] = \"GERAR DISTRATO\" then \"GERAR TERMO\" else if [Identificador_pwfp] = \"CONFERIR DISTRATO\" then \"CONFERIR TERMO\" else if [Identificador_pwfp] = \"ENVIAR DISTRATO CLIENTE\" then \"ENVIAR TERMO CLIENTE\" else if [Identificador_pwfp] = \"LANÇAR PROCESSO PAGAMENTO\" then \"CADASTRAR PROCESSO PAGTO\" else [Identificador_pwfp])),\n    #\"RespostaEtapa Adicionada\" = Table.AddColumn(#\"Etapa Adicionada\", \"RespostaEtapa\", each Text.Proper(if [NumPasso_pwfp] = 4 and [DescrResp_pwpr] = null then \"EM NEGOCIAÇÃO\" else [DescrResp_pwpr])),\n    #\"Usuarios Expandido\" = Table.ExpandRecordColumn(#\"RespostaEtapa Adicionada\", \"Usuarios\", {\"Nome_usr\"}, {\"Nome_usr\"}),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"Usuarios Expandido\", {{\"Nome_usr\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"Nome_usr\", Text.Proper, type text}}),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Colocar Cada Palavra Em Maiúscula\",{\"QuemR_Pen\", \"Desc_pen\", \"QdoR_pen\", \"DtPrev_pen\", \"Status_pen\", \"DtAviso_pen\", \"HrAviso_pen\", \"CodCateg_pen\", \"Obs_pen\", \"DataAtivacao_pen\", \"NumVtwf_pwfp\", \"NumPasso_pwfp\", \"Nome_usr\", \"Etapa\", \"RespostaEtapa\"}),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Outras Colunas Removidas\",{{\"Nome_usr\", \"UsuarioResponsavel\"}, {\"Desc_pen\", \"Descricao\"}, {\"QdoR_pen\", \"DataResolucao\"}, {\"DtPrev_pen\", \"DataPrevista\"}, {\"DtAviso_pen\", \"DataAviso\"}, {\"HrAviso_pen\", \"HoraAviso\"}, {\"DataAtivacao_pen\", \"DataAtivacao\"}, {\"NumPasso_pwfp\", \"CodEtapa\"}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Colunas Renomeadas\", {\"NumVtwf_pwfp\"}, SolicitaçãoCancelamento, {\"NumVtwf_atd\"}, \"SolicitaçãoCancelamento\", JoinKind.Inner)\nin\n    #\"Consultas Mescladas\""
                }
              ]
            },
            {
              "name": "Clientes",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idpessoacessionario",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimentos",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cotas",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ativos",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cancelados",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Value.NativeQuery(PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"), \"SELECT vwv2.idpessoacessionario#(lf)#(tab), COUNT(DISTINCT vwv2.idempresa) \"\"Empreendimentos\"\"#(lf)#(tab), SUM(vwv2.\"\"Ativos\"\") + SUM(vwv2.\"\"Cancelados\"\") \"\"Cotas\"\"#(lf)#(tab), SUM(vwv2.\"\"Ativos\"\") \"\"Ativos\"\"#(lf)#(tab), SUM(vwv2.\"\"Cancelados\"\") \"\"Cancelados\"\"#(lf)#(tab), CASE SUM(\"\"Cancelados\"\")#(lf)#(tab)#(tab)WHEN 0 THEN 'Original'#(lf)#(tab)#(tab)ELSE 'Cancelou'#(lf)#(tab)#(tab)END \"\"Status Venda\"\"#(lf)#(tab), CASE SUM(vwv2.\"\"Ativos\"\")#(lf)#(tab)#(tab)WHEN 0 THEN 'Inativo'#(lf)#(tab)#(tab)ELSE 'Ativo'#(lf)#(tab)#(tab)END \"\"Status Cliente\"\"#(lf)FROM (#(lf)#(tab)SELECT vwv1.idpessoacessionario#(lf)#(tab)#(tab), vwv1.idempresa#(lf)#(tab)#(tab), CASE vwv1.statuscontrato#(lf)#(tab)#(tab)#(tab)WHEN 'CANCELADO' THEN 0#(lf)#(tab)#(tab)#(tab)ELSE COUNT(vwv1.idcontrato)#(lf)#(tab)#(tab)#(tab)END \"\"Ativos\"\"#(lf)#(tab)#(tab), CASE vwv1.statuscontrato#(lf)#(tab)#(tab)#(tab)WHEN 'CANCELADO' THEN COUNT(vwv1.idcontrato)#(lf)#(tab)#(tab)#(tab)ELSE 0#(lf)#(tab)#(tab)#(tab)END \"\"Cancelados\"\"#(lf)#(tab)FROM vwcontrato vwv1#(lf)#(tab)LEFT JOIN vwproduto vp ON vwv1.idproduto = vp.idproduto#(lf)#(tab)WHERE vp.tipoproduto = 'Cota'#(lf)#(tab)#(tab)AND statuscontrato <> 'CANCELMESA'#(lf)#(tab)#(tab)AND idorigemvenda IN (1,2)#(lf)#(tab)#(tab)--AND idpessoacessionario = 17484#(lf)#(tab)GROUP BY vwv1.idpessoacessionario, vwv1.idempresa, vwv1.statuscontrato#(lf)#(tab)) vwv2#(lf)GROUP BY vwv2.idpessoacessionario\", null, [EnableFolding=true])\nin\n    Fonte"
                }
              ]
            },
            {
              "name": "CasalConsultor",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idcasal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemCasal",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Funçao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Consultor",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_casal = Fonte{[Schema=\"public\",Item=\"casal\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(public_casal,{\"idcasal\", \"public.funcionario(idcloser)\", \"public.funcionario(idliner)\", \"public.funcionario(idpep)\", \"public.funcionario(idpromotor)\", \"public.origemcasal\"}),\n    #\"public.origemcasal Expandido\" = Table.ExpandRecordColumn(#\"Outras Colunas Removidas\", \"public.origemcasal\", {\"descricao\"}, {\"OrigemCasal\"}),\n    #\"public.funcionario(idcloser) Expandido\" = Table.ExpandRecordColumn(#\"public.origemcasal Expandido\", \"public.funcionario(idcloser)\", {\"apelido\"}, {\"Closer\"}),\n    #\"public.funcionario(idliner) Expandido\" = Table.ExpandRecordColumn(#\"public.funcionario(idcloser) Expandido\", \"public.funcionario(idliner)\", {\"apelido\"}, {\"Liner\"}),\n    #\"public.funcionario(idpep) Expandido\" = Table.ExpandRecordColumn(#\"public.funcionario(idliner) Expandido\", \"public.funcionario(idpep)\", {\"apelido\"}, {\"PEP\"}),\n    #\"public.funcionario(idpromotor) Expandido\" = Table.ExpandRecordColumn(#\"public.funcionario(idpep) Expandido\", \"public.funcionario(idpromotor)\", {\"apelido\"}, {\"Captador\"}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"public.funcionario(idpromotor) Expandido\", \"Fechador\", each if [PEP] = null then [Closer] else if [PEP] = \"NÃO COMISSIONAR\" then [Closer] else [PEP]),\n    #\"Outras Colunas Não Dinâmicas\" = Table.UnpivotOtherColumns(#\"Coluna Condicional Adicionada\", {\"idcasal\", \"OrigemCasal\"}, \"Funçao\", \"Consultor\"),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Outras Colunas Não Dinâmicas\", each ([Consultor] <> \"NÃO COMISSIONAR\"))\nin\n    #\"Linhas Filtradas\""
                }
              ]
            },
            {
              "name": "Inadimplência",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Inadimplência",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                }
              ],
              "measures": [
                {
                  "name": "Inadimplência Valor",
                  "expression": "SELECTEDVALUE('Inadimplência'[Inadimplência])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "GENERATESERIES(0, 20, 1)"
                }
              ]
            },
            {
              "name": "LocalCaptacao",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "idlocalcaptacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "LocalCaptacao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoLocalCaptacao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    public_origemcasal = Fonte{[Schema=\"public\",Item=\"localcaptacao\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(public_origemcasal,{\"idlocalcaptacao\", \"descricao\"}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Outras Colunas Removidas\",{{\"descricao\", Text.Proper, type text}}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Colocar Cada Palavra Em Maiúscula\", \"TipoLocalCaptacao\", each if Text.Contains([descricao], \"Salinas Park Resort\") then \"Resort - Park\" else if Text.Contains([descricao], \"Salinas Exclusive Resort\") then \"Resort - Exclusive\" else \"Externo\", type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Coluna Condicional Adicionada\",{{\"descricao\", \"LocalCaptacao\"}})\nin\n    #\"Colunas Renomeadas\""
                }
              ]
            },
            {
              "name": "SolicitaçãoCancelamentoFiltrada",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Usuário_Responsável",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_atd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFim_atd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Usuário_Cadastrou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Canal_Comunicação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descr_atd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data_Solicitação",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Solicitações Filtradas",
                  "expression": "CALCULATE(DISTINCTCOUNT('SolicitaçãoCancelamentoFiltrada'[Num_atd]),USERELATIONSHIP('SolicitaçãoCancelamentoFiltrada'[Data_Solicitação],'dCalendario (UAU)'[Data Atendimento]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_Atendimento = Fonte{[Schema=\"dbo\",Item=\"VwSolicitacaoCancelamento\"]}[Data],\n    #\"Filtered Rows\" = Table.SelectRows(dbo_Atendimento, each ([Status_Atendimento] <> \"Cancelado\")),\n    #\"Texto Extraído Após o Delimitador\" = Table.TransformColumns(#\"Filtered Rows\", {{\"Data_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}, {\"Motivo_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}}),\n    #\"Texto Limpo\" = Table.TransformColumns(#\"Texto Extraído Após o Delimitador\",{{\"Data_Solicitação\", Text.Clean, type text}, {\"Motivo_Solicitação\", Text.Clean, type text}, {\"Tipo_Solicitação\", Text.Clean, type text}}),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Texto Limpo\",{{\"Data_Solicitação\", type date}, {\"DataCad_atd\", type date}}),\n    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Tipo Alterado1\", \"CodEmpresa\", each Text.BeforeDelimiter([ChaveVenda], \"-\"), type text),\n    #\"Consulta Acrescentada\" = Table.Combine({#\"Inserted Text Before Delimiter\", #\"SolicitaçãoRedução\"}),\n    #\"Erros Substituídos\" = Table.ReplaceErrorValues(#\"Consulta Acrescentada\", {{\"Data_Solicitação\", null}}),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Erros Substituídos\",{{\"ChaveVenda\", Order.Ascending}, {\"Data_Solicitação\", Order.Ascending}}),\n    // Daqui para baixo está sendo feito um processo para filtrar apenas a primeira solicitação por chave de venda.\n    #\"Linhas Agrupadas\" = Table.Group(#\"Linhas Classificadas\", {\"ChaveVenda\"}, {{\"Tabela\", each _, type table [ChaveUnidade=nullable text, ChaveVenda=nullable text, Num_atd=number, CodCliente=nullable number, Cliente=nullable text, Status_Atendimento=nullable text, Tipo_Atendimento=nullable text, Usuário_Responsável=nullable text, DataCad_atd=nullable date, DataFim_atd=nullable datetime, Usuário_Cadastrou=nullable text, Canal_Comunicação=nullable text, NumVtwf_atd=nullable number, Descr_atd=nullable text, Data_Solicitação=nullable date, Motivo_Solicitação=text, Tipo_Solicitação=text, CodEmpresa=text]}}),\n    #\"Índice Adicionado\" = Table.TransformColumns(#\"Linhas Agrupadas\", {\"Tabela\", each Table.AddIndexColumn( _, \"Índice\", 1, 1, Int64.Type)}),\n    #\"Tabela Expandido\" = Table.ExpandTableColumn(#\"Índice Adicionado\", \"Tabela\", {\"ChaveUnidade\", \"Num_atd\", \"CodCliente\", \"Cliente\", \"Status_Atendimento\", \"Tipo_Atendimento\", \"Usuário_Responsável\", \"DataCad_atd\", \"DataFim_atd\", \"Usuário_Cadastrou\", \"Canal_Comunicação\", \"NumVtwf_atd\", \"Descr_atd\", \"Data_Solicitação\", \"Motivo_Solicitação\", \"Tipo_Solicitação\", \"CodEmpresa\", \"Índice\"}, {\"ChaveUnidade\", \"Num_atd\", \"CodCliente\", \"Cliente\", \"Status_Atendimento\", \"Tipo_Atendimento\", \"Usuário_Responsável\", \"DataCad_atd\", \"DataFim_atd\", \"Usuário_Cadastrou\", \"Canal_Comunicação\", \"NumVtwf_atd\", \"Descr_atd\", \"Data_Solicitação\", \"Motivo_Solicitação\", \"Tipo_Solicitação\", \"CodEmpresa\", \"Índice\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Tabela Expandido\",{{\"Data_Solicitação\", type date}, {\"DataFim_atd\", type date}, {\"DataCad_atd\", type date}, {\"ChaveUnidade\", type text}, {\"Cliente\", type text}, {\"Status_Atendimento\", type text}, {\"Tipo_Atendimento\", type text}, {\"Usuário_Responsável\", type text}, {\"Usuário_Cadastrou\", type text}, {\"Canal_Comunicação\", type text}, {\"Descr_atd\", type text}, {\"Motivo_Solicitação\", type text}, {\"Tipo_Solicitação\", type text}, {\"Índice\", Int64.Type}, {\"CodEmpresa\", Int64.Type}, {\"NumVtwf_atd\", Int64.Type}, {\"Num_atd\", Int64.Type}, {\"CodCliente\", Int64.Type}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each ([Índice] = 1 and [ChaveVenda] <> null) or ([ChaveVenda] = null)),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Linhas Filtradas\",{\"Índice\"})\nin\n    #\"Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Parametro_Solicitacoes_Duplicadas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Parametro_Solicitacoes_Duplicadas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Parametro_Solicitacoes_Duplicadas Campos",
                  "dataType": "String",
                  "isHidden": true,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Parametro_Solicitacoes_Duplicadas Pedido",
                  "dataType": "String",
                  "isHidden": true,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Visao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "{\n    (\"Casal\", NAMEOF('AtendimentoCasal'[Casal]), 0, \"Todas as Solicitações\"),\n    (\"Casal\", NAMEOF('AtendimentoCasal'[Casal]), 1, \"Primeira Solicitação\")\n}"
                }
              ]
            },
            {
              "name": "CategoriasDeDistrato",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Codigo_cd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Desc_cd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AtInat_cd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Anexos_cd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad_cd",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_cd",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT#(cr)#(lf)#(tab)Codigo_cd,#(cr)#(lf)#(tab)Desc_cd,#(cr)#(lf)#(tab)AtInat_cd,#(cr)#(lf)#(tab)Anexos_cd,#(cr)#(lf)#(tab)UsrCad_cd,#(cr)#(lf)#(tab)DataCad_cd#(cr)#(lf)  FROM UAU.dbo.CategoriasDeDistrato\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "QtdVendas-UAU",
              "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_VwVendas = Fonte{[Schema=\"dbo\",Item=\"VwVendas\"]}[Data],\n    #\"Linhas Agrupadas\" = Table.Group(dbo_VwVendas, {\"CodCliente\"}, {{\"QtdVendas\", each Table.RowCount(_), type number}})\nin\n    #\"Linhas Agrupadas\""
            },
            {
              "name": "VwPropostasTSE",
              "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.50\", \"TSESalinasProducao\"),\n    SQL = \"SELECT#(cr)#(lf)#(tab)\"\"ChaveProposta\"\",#(cr)#(lf)#(tab)\"\"CodEmpresa\"\",#(cr)#(lf)#(tab)\"\"Empreendimento\"\",#(cr)#(lf)#(tab)\"\"CodObra\"\",#(cr)#(lf)#(tab)\"\"ValorVenda\"\",#(cr)#(lf)#(tab)\"\"CodProduto\"\",#(cr)#(lf)#(tab)\"\"CodPerson\"\",#(cr)#(lf)#(tab)\"\"Unidade\"\",#(cr)#(lf)#(tab)\"\"Proposta\"\",#(cr)#(lf)#(tab)\"\"IdCasal\"\",#(cr)#(lf)#(tab)\"\"CodCliente\"\",#(cr)#(lf)#(tab)\"\"CpfProspect\"\",#(cr)#(lf)#(tab)\"\"Prospect\"\",#(cr)#(lf)#(tab)\"\"StatusProp\"\",#(cr)#(lf)#(tab)\"\"StatusVenda\"\",#(cr)#(lf)#(tab)\"\"DataProp\"\",#(cr)#(lf)#(tab)\"\"DataCad\"\",#(cr)#(lf)#(tab)\"\"DataCancel\"\",#(cr)#(lf)#(tab)idorigemvenda,#(cr)#(lf)#(tab)\"\"OrigemVenda\"\",#(cr)#(lf)#(tab)\"\"UsrCad\"\",#(cr)#(lf)#(tab)\"\"TipoProduto\"\"#(cr)#(lf)  FROM#(tab)public.vwpropostas\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"ChaveProposta\", \"CodEmpresa\", \"CodObra\", \"ValorVenda\", \"Unidade\", \"Proposta\", \"IdCasal\", \"CpfProspect\", \"Prospect\", \"StatusProp\", \"DataProp\", \"DataCad\", \"idorigemvenda\", \"OrigemVenda\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Outras Colunas Removidas\",{{\"DataProp\", type date}})\nin\n    #\"Tipo Alterado\""
            },
            {
              "name": "SolicitaçãoRedução",
              "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\", [Query=\"SELECT CAST(Empresa_atd AS VARCHAR) + '-' + CAST(Obra_atd AS VARCHAR) + '-' + CAST(ProdUnid_atd AS VARCHAR) + '-' #(lf)#(tab)#(tab)+ REPLICATE('0',5-LEN(NumPer_atd)) + CAST(NumPer_atd AS VARCHAR) [ChaveUnidade]#(lf)#(tab), CAST(Empresa_atd AS VARCHAR) + '-' + CAST(Obra_atd AS VARCHAR) + '-' #(lf)#(tab)#(tab)+ REPLICATE('0',5-LEN(Num_Ven)) + CAST(Num_Ven AS VARCHAR) [ChaveVenda]#(lf)#(tab), Num_atd, CodPes_atd [CodCliente], Nome_pes [Cliente]#(lf)#(tab), CASE Status_atd#(lf)#(tab)#(tab)WHEN 0 THEN 'Aberto'#(lf)#(tab)#(tab)WHEN 1 THEN 'Encerrado'#(lf)#(tab)#(tab)WHEN 2 THEN 'Cancelado'#(lf)#(tab)#(tab)WHEN 3 THEN 'A retornar'#(lf)#(tab)  END [Status_Atendimento]#(lf)#(tab), CASE Tipo_atd#(lf)#(tab)WHEN 0 THEN 'Solicitação'#(lf)#(tab)WHEN 1 THEN 'Informação'#(lf)#(tab)WHEN 2 THEN 'Reclamação'#(lf)#(tab)WHEN 3 THEN 'Elogio'#(lf)#(tab)WHEN 4 THEN 'Sugestão'#(lf)#(tab)  END [Tipo_Atendimento]#(lf)#(tab), Usr1.Nome_usr [Usuário_Responsável]#(lf)#(tab), DataCad_atd, DataFim_atd#(lf)#(tab), Usr2.Nome_usr [Usuário_Cadastrou]#(lf)#(tab), Descr_Ccm [Canal_Comunicação], NumVtwf_atd#(lf)#(tab), Descr_atd#(lf)#(tab), SUBSTRING(Descr_atd, 1#(lf)#(tab)#(tab)#(tab), CHARINDEX(CHAR(13)+CHAR(10), Descr_atd)#(lf)#(tab)  ) [Data_Solicitação]#(lf)#(tab)--, SUBSTRING(Descr_atd#(lf)#(tab)--#(tab)#(tab), CHARINDEX(CHAR(13)+CHAR(10), Descr_atd, PATINDEX('%'+CHAR(13)+CHAR(10)+'%',Descr_atd))+2#(lf)#(tab)--#(tab)#(tab), CHARINDEX(CHAR(13)+CHAR(10), Descr_atd, PATINDEX('%'+CHAR(13)+CHAR(10)+'%',Descr_atd)+1)#(lf)#(tab)--#(tab)#(tab) -CHARINDEX(CHAR(13)+CHAR(10), Descr_atd, PATINDEX('%'+CHAR(13)+CHAR(10)+'%',Descr_atd))#(lf)#(tab)--  ) [Motivo_Solicitação]#(lf)#(tab), SUBSTRING(Descr_atd#(lf)#(tab)#(tab)#(tab), CHARINDEX(CHAR(13)+CHAR(10), Descr_atd, PATINDEX('%'+CHAR(13)+CHAR(10)+'%',Descr_atd)+1)+2#(lf)#(tab)#(tab)#(tab), CASE SUBSTRING(Descr_atd, CHARINDEX(CHAR(13)+CHAR(10), Descr_atd, PATINDEX('%'+CHAR(13)+CHAR(10)+'%',Descr_atd)+1)+2,1) #(lf)#(tab)#(tab)#(tab)#(tab)WHEN 'F' THEN 4#(lf)#(tab)#(tab)#(tab)#(tab)WHEN 'D' THEN 6#(lf)#(tab)#(tab)#(tab)#(tab)END#(lf)#(tab)  ) [Tipo_Solicitação]#(lf) FROM ( #(lf)   SELECT CodPes_atd, Status_atd, UsrRespon_atd, Num_atd, DataCad_atd, DataPrevista_atd, DataFim_atd, UsrCad_atd, Empresa_atd,#(lf)      Obra_atd, ProdUnid_atd, NumPer_atd, UsrCancel_atd, CodCateg_atd, NumCcm_atd, NumVtwf_atd, Anexos_atd, Reincidente_atd, Descr_atd, Tipo_atd #(lf)   FROM Atendimento WITH (NOLOCK)#(lf)) AS Atendimento #(lf)INNER JOIN Pessoas WITH (NOLOCK)#(lf)   ON Atendimento.CodPes_atd = Pessoas.Cod_pes #(lf)#(lf)LEFT JOIN Usuarios Usr1 WITH (NOLOCK)#(lf)#(tab)ON Atendimento.UsrRespon_atd = Usr1.Login_usr#(lf)LEFT JOIN Usuarios Usr2 WITH (NOLOCK)#(lf)#(tab)ON Atendimento.UsrCad_atd = Usr2.Login_usr#(lf)#(lf)INNER JOIN CanalComunicacao #(lf)   ON Atendimento.NumCcm_atd = CanalComunicacao.Num_Ccm #(lf)LEFT JOIN ( #(lf)   SELECT VinculoTabelaWorkFlow.Num_vtwf, max(PendenciaObs.UsrCad_pdo) as usrUltimoCad_pdo, MAX(DataCad_pdo) AS UltAcompPenden_pdo #(lf)   FROM PendenciaObs WITH (NOLOCK)#(lf)   INNER JOIN Pendencia WITH (NOLOCK)#(lf)      ON Pendencia.QuemR_Pen = PendenciaObs.QuemRPen_pdo #(lf)      AND Pendencia.QdoL_pen = PendenciaObs.QdoLPen_pdo #(lf)      AND Pendencia.Num_pen = PendenciaObs.NumPen_pdo #(lf)   INNER JOIN PassoWorkflowPend WITH (NOLOCK)#(lf)      ON PassoWorkflowPend.QuemRPen_pwfp = Pendencia.QuemR_Pen #(lf)      AND PassoWorkflowPend.QdoLPen_pwfp = Pendencia.QdoL_pen #(lf)      AND PassoWorkflowPend.NumPen_pwfp = Pendencia.Num_pen #(lf)   INNER JOIN VinculoTabelaWorkFlow WITH (NOLOCK)#(lf)      ON VinculoTabelaWorkFlow.Num_vtwf = PassoWorkflowPend.NumVtwf_pwfp #(lf)   GROUP BY VinculoTabelaWorkFlow.Num_vtwf #(lf)) AS PendenciaObs #(lf)   ON Atendimento.NumVtwf_atd = PendenciaObs.Num_vtwf #(lf)LEFT JOIN AvaliacaoAtendimento #(lf)   ON Atendimento.Num_atd = AvaliacaoAtendimento.Num_aa #(lf)LEFT JOIN (#(lf)                 SELECT Vendas.Empresa_ven, Vendas.Obra_ven, Vendas.Cliente_ven, ItensVenda.Produto_Itv, ItensVenda.CodPerson_Itv#(lf)#(tab)#(tab)#(tab)#(tab)#(tab)#(tab), MAX(Num_Ven) AS Num_Ven, MAX(Vendas.Data_Ven) AS Data_Ven#(lf)                 FROM (#(lf)                            SELECT Empresa_ven, Obra_ven, Num_ven, Data_Ven, Cliente_Ven From Vendas WITH (NOLOCK)#(lf)                            Union #(lf)                            SELECT Empresa_vrec, Obra_vrec, Num_vrec, Data_vrec, Cliente_VRec From VendasRecebidas WITH (NOLOCK)#(lf)                        ) AS Vendas #(lf)                        INNER JOIN ( #(lf)                                 SELECT Empresa_itv, Obra_Itv, NumVend_Itv, Produto_Itv, CodPerson_Itv From ItensVenda #(lf)                                 Union #(lf)                                 SELECT Empresa_itr, Obra_Itr, NumVend_Itr, Produto_Itr, CodPerson_Itr From ItensRecebidas #(lf)                              ) AS ItensVenda #(lf)                              ON  Vendas.Empresa_ven = ItensVenda.Empresa_itv #(lf)                              AND Vendas.Obra_Ven = ItensVenda.Obra_Itv #(lf)                              AND Vendas.Num_Ven = ItensVenda.NumVend_Itv #(lf)                  Group By  Empresa_ven, Obra_ven, Cliente_ven, Produto_Itv, CodPerson_Itv #(lf)              )  AS Venda #(lf)             ON  Atendimento.Empresa_atd = Venda.Empresa_ven #(lf)             AND Atendimento.Obra_atd = Venda.Obra_ven #(lf)             AND Atendimento.CodPes_atd = Venda.Cliente_ven #(lf)             AND Atendimento.ProdUnid_atd = Venda.Produto_Itv #(lf)             AND Atendimento.NumPer_atd = Venda.CodPerson_Itv #(lf)#(lf) WHERE CodCateg_atd IN ('04.14') AND DataCad_atd > '01/06/2018'\", CreateNavigationProperties=false]),\n    #\"Filtered Rows\" = Table.SelectRows(Fonte, each ([Status_Atendimento] <> \"Cancelado\")),\n    #\"Texto Extraído Após o Delimitador\" = Table.TransformColumns(#\"Filtered Rows\", {{\"Data_Solicitação\", each Text.AfterDelimiter(_, \":\"), type text}}),\n    #\"Texto Limpo\" = Table.TransformColumns(#\"Texto Extraído Após o Delimitador\",{{\"Data_Solicitação\", Text.Clean, type text}, {\"Tipo_Solicitação\", Text.Clean, type text}}),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Texto Limpo\",{{\"Data_Solicitação\", type date}, {\"DataCad_atd\", type date}}),\n    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Tipo Alterado1\", \"CodEmpresa\", each Text.BeforeDelimiter([ChaveVenda], \"-\"), type text),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Inserted Text Before Delimiter\", \"Motivo_Solicitação\", each \"REDUÇÃO DE CONTRATOS\")\nin\n    #\"Personalização Adicionada\""
            }
          ],
          "roles": [
            {
              "name": "Comercial",
              "modelPermission": "Read",
              "members": [
                {
                  "memberName": "vendas@gavresorts.com.br",
                  "memberId": "de2fba90-ee29-4685-93f4-aff53e1af2b8",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.aracaju@gavresorts.com.br",
                  "memberId": "4057f888-e11a-4439-abd5-d5381e94ca97",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.belem@gavresorts.com.br",
                  "memberId": "8ff51ceb-6fb5-41d8-9b57-bb521a9997a0",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.campogrande@gavresorts.com.br",
                  "memberId": "9a921618-bdca-4639-96cc-f7b7361b3bd6",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.cuiaba@gavresorts.com.br",
                  "memberId": "ca560cad-96a9-4e0c-96db-1043e38afc4c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.cupe@gavresorts.com.br",
                  "memberId": "b4bee1cc-f204-4b87-85b3-68e7a655d423",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.fortaleza@gavresorts.com.br",
                  "memberId": "f0d6c928-e847-4e35-b1a6-4404b9a047f6",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.frances@gavresorts.com.br",
                  "memberId": "417585a8-0f78-47a6-92ca-b49f864ec7ba",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.gramadodia@gavresorts.com.br",
                  "memberId": "ed150365-f86b-4019-9c5b-0c6ee44ee24d",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.gramadonoite@gavresorts.com.br",
                  "memberId": "9d34cf6e-de66-4864-b07f-312dd2d0be77",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.gunga@gavresorts.com.br",
                  "memberId": "7255cd27-160c-4714-8de6-b503c6cbc2c5",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.jerilagoa@gavresorts.com.br",
                  "memberId": "16c9b064-3eae-489a-b355-2156c6b8c6a5",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.jerivila@gavresorts.com.br",
                  "memberId": "d2706a4b-4422-4e12-8c58-cd21fe527bf7",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.joaopessoa@gavresorts.com.br",
                  "memberId": "59338a3b-d493-4230-8817-68ac7e7f0733",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.luguito@gavresorts.com.br",
                  "memberId": "ce9b33b7-223c-4e84-92a8-f6b8a19427b4",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.maceio@gavresorts.com.br",
                  "memberId": "2651b7dd-8676-4412-b6f9-d6785871f43d",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.manaus@gavresorts.com.br",
                  "memberId": "a8298b84-c3fb-413b-85b2-07c23ab112a9",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.maragogidia@gavresorts.com.br",
                  "memberId": "2e531d5b-d741-4d44-b9df-152b7504c649",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.maragoginoite@gavresorts.com.br",
                  "memberId": "34a906dd-a40e-451d-9582-76505489ea89",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.muroalto@gavresorts.com.br",
                  "memberId": "aff99179-29de-48de-ae80-1c16cedb7245",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.pipa@gavresorts.com.br",
                  "memberId": "ca53179d-485a-495c-8bbd-e602a9df341c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.pirenopolis@gavresorts.com.br",
                  "memberId": "bb0635d9-eabe-4295-9cee-83f101113c1f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.portodegalinhas@gavresorts.com.br",
                  "memberId": "55b94aaa-06e5-4e07-8ce1-bb44be31e4bf",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.recife@gavresorts.com.br",
                  "memberId": "b2581acc-7940-427d-ad4b-5568b7ddde29",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional1@gavresorts.com.br",
                  "memberId": "2b2fd3d0-04d7-4ef8-b9fb-3b532bfb5c6f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional3@gavresorts.com.br",
                  "memberId": "11456708-b5cb-4f72-9281-238c217dbf6f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional5@gavresorts.com.br",
                  "memberId": "f52b05df-4b6f-4c81-8cac-1062ddc40d87",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional6@gavresorts.com.br",
                  "memberId": "1ed86b6e-a7b9-4603-80cd-ebb0e44b8f45",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional7@gavresorts.com.br",
                  "memberId": "449235e6-ce3a-4d24-9543-f99cc832105b",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.regional8@gavresorts.com.br",
                  "memberId": "d82397d3-ca89-4fc5-bc37-e82ec1f67c3c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.salinas@gavresorts.com.br",
                  "memberId": "e9251006-172a-4ad6-8395-780ff9eabef4",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.saoluis@gavresorts.com.br",
                  "memberId": "ec8067d0-deb7-43e3-beba-74cb6312bb46",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.teresina@gavresorts.com.br",
                  "memberId": "0dfd4680-e0f4-4d9c-b1db-ffbb8dd1576a",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.consultoria@gavresorts.com.br",
                  "memberId": "86772481-5847-410b-9d2f-e751fa00339f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.aracaju@gavresorts.com.br",
                  "memberId": "0c042dc3-2e15-4f86-afaa-620172ce2d42",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.belem@gavresorts.com.br",
                  "memberId": "2afefd6e-89a6-4130-861a-5f3b1bfd1701",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.campogrande@gavresorts.com.br",
                  "memberId": "70e9a907-d045-4509-a674-1ea2bcd97e07",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.cuiaba@gavresorts.com.br",
                  "memberId": "ef3acd18-14c1-4d24-b550-2caea0f95933",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.cupe@gavresorts.com.br",
                  "memberId": "5987e2a9-6de1-449f-b21b-de32bbf7e9cd",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.digital@gavresorts.com.br",
                  "memberId": "60b564a4-426b-4693-8e90-ec9a714f5aa3",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.fortaleza@gavresorts.com.br",
                  "memberId": "8fc64f19-a540-4b2c-afdd-63d31d7581b7",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.frances@gavresorts.com.br",
                  "memberId": "7cb27e24-6759-4de7-abbc-b1eda78b0ba9",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.gramadodia@gavresorts.com.br",
                  "memberId": "f2bcc254-ba98-419a-97b7-87f7d31551c2",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.gramadonoite@gavresorts.com.br",
                  "memberId": "c4aca3a2-037d-4f38-ad0e-124dccdb5192",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.gunga@gavresorts.com.br",
                  "memberId": "f821af35-a9a0-42c8-8987-1dab71484f68",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.jerilagoa@gavresorts.com.br",
                  "memberId": "c2df3790-1593-4c1b-9109-e81fc578efe6",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.jerivila@gavresorts.com.br",
                  "memberId": "56b92345-452e-47a3-87f6-dd8685e2770c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.joaopessoa@gavresorts.com.br",
                  "memberId": "e410c9d1-d240-4e1f-ab23-e4ed73da5a19",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.luguito@gavresorts.com.br",
                  "memberId": "01f96033-0ca7-431b-9498-b19a6baf14e5",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.maceio@gavresorts.com.br",
                  "memberId": "551c79ff-dcc2-4702-8d10-752cb57491fd",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.manaus@gavresorts.com.br",
                  "memberId": "29f73723-b26a-473c-86ee-ff7d370ee822",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.maragogidia@gavresorts.com.br",
                  "memberId": "cfc25d64-6c8b-487b-9498-396a07048cc2",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.maragoginoite@gavresorts.com.br",
                  "memberId": "28e7fab9-21e9-401f-ac66-3fc1b2cee224",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.muroalto@gavresorts.com.br",
                  "memberId": "4e79c35f-0e8b-4d35-ac1f-05939dfc2679",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.pipa@gavresorts.com.br",
                  "memberId": "8ffd4e1f-a9c7-42e0-ab05-42bb9b9038d8",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.pirenopolis@gavresorts.com.br",
                  "memberId": "f8fd0b31-8090-4717-9816-2e312bf3959c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.portodegalinhas@gavresorts.com.br",
                  "memberId": "507d3f9e-43bc-43ea-bcbf-4cdf4949ce4d",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.recife@gavresorts.com.br",
                  "memberId": "d2728d40-df0a-4b30-a596-a1f1b4a874e9",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional1@gavresorts.com.br",
                  "memberId": "bd23f960-61d2-42ad-9518-777e2b062b8a",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional2@gavresorts.com.br",
                  "memberId": "219485fb-0b81-4567-a559-ef3798940423",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional3@gavresorts.com.br",
                  "memberId": "41b43925-0379-47f4-843f-4f8ebad56f3c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional4@gavresorts.com.br",
                  "memberId": "62414eeb-1ff2-4a30-b11c-83245525af97",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional5@gavresorts.com.br",
                  "memberId": "f24d82af-78c1-49c5-9bbc-ac3787e7d2c6",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional6@gavresorts.com.br",
                  "memberId": "08dfe3a7-507b-4841-8ea4-9000d4ab617d",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional7@gavresorts.com.br",
                  "memberId": "afd69bc1-826c-4c6d-8b53-df59deabc8bd",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.regional8@gavresorts.com.br",
                  "memberId": "575da827-ed26-48cf-be42-fdd54ac99135",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.salinas@gavresorts.com.br",
                  "memberId": "b1f722d2-2688-4e04-9117-b4f7ee691dfa",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.saoluis@gavresorts.com.br",
                  "memberId": "fda7d0a7-2122-44a7-8d88-034daaba9d6a",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.teresina@gavresorts.com.br",
                  "memberId": "d9de70e9-c850-4be6-8f3e-3395e251b97e",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "aline.gratao@gavresorts.com.br",
                  "memberId": "ffa86ae3-95b7-4847-a377-e8a0f07dd3bd",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "atila.gratao@gavresorts.com.br",
                  "memberId": "15aaab7a-152b-47c2-82a6-bc3ec040a48f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bruno.ramon@gavresorts.com.br",
                  "memberId": "d432f2ce-aff7-431a-abc3-e4865fdba87d",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "diretoria@gavresorts.com.br",
                  "memberId": "47c68d93-3bad-40d9-b2ca-de6f1126e1b1",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "eduardo.neles@gavresorts.com.br",
                  "memberId": "61bb631a-7216-4f7b-b53b-c17812831be6",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "elizabeth.silva@gavresorts.com.br",
                  "memberId": "f7c6f191-ec3f-4d44-9276-fc25fbbb388e",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "kaliny.lima@gavresorts.com.br",
                  "memberId": "b0d6ac2c-c0e6-41d4-8ea2-1af29fd7ea74",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "manoel.vicente@gavresorts.com.br",
                  "memberId": "2f4994a2-9629-4660-addf-47aa1e45deba",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "natassia.anjos@gavresorts.com.br",
                  "memberId": "19a633bf-2aa3-4118-b4c7-e2869c627802",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "powerbi@gavresorts.com.br",
                  "memberId": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "renata.pavini@gavresorts.com.br",
                  "memberId": "723b4f9f-2017-4152-82df-c1bb5872ac4c",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "welerson.mota@gavresorts.com.br",
                  "memberId": "357a382a-f53e-4c26-8db9-6a777e09fb7e",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.captacao.maragogibeach@gavresorts.com.br",
                  "memberId": "bac84ddd-f5c4-45e2-8568-6a742ac8e45f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.vendas.maragogibeach@gavresorts.com.br",
                  "memberId": "da739f64-e010-4bff-922e-2130ec942f03",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                }
              ],
              "tablePermissions": [
                {
                  "name": "dOrigemCasal",
                  "filterExpression": "[descricao] <> \"Pós Vendas\""
                },
                {
                  "name": "Sala de Vendas",
                  "filterExpression": "[SalaDeVendas] <> \"Central De Relacionamento\""
                },
                {
                  "name": "dOrigemVenda",
                  "filterExpression": "[OrigemVenda] = BLANK() ||\n[OrigemVenda] = \"BeBack\" ||\n[OrigemVenda] = \"VENDA NO DIA DO ATENDIMENTO\""
                },
                {
                  "name": "Propostas",
                  "filterExpression": "[OrigemVenda] = BLANK() ||\n[OrigemVenda] = \"BEBACK\" ||\n[OrigemVenda] = \"VENDA NO DIA DO ATENDIMENTO\""
                },
                {
                  "name": "AtendimentoCasal",
                  "filterExpression": "[Sala de Vendas] <> \"Central De Relacionamento\""
                }
              ]
            },
            {
              "name": "Pós Vendas",
              "modelPermission": "Read",
              "members": [
                {
                  "memberName": "pbi@gavresorts.com.br",
                  "memberId": "c2c6fcb6-7d71-42ff-83bf-5c25f83cd908",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                }
              ]
            },
            {
              "name": "Diretoria",
              "modelPermission": "Read",
              "members": [
                {
                  "memberName": "diretoria@gavresorts.com.br",
                  "memberId": "47c68d93-3bad-40d9-b2ca-de6f1126e1b1",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.marketing@gavresorts.com.br",
                  "memberId": "3ce8b294-0f96-4777-aac0-23b0b07970b4",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.consultoria@gavresorts.com.br",
                  "memberId": "86772481-5847-410b-9d2f-e751fa00339f",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                },
                {
                  "memberName": "bi.controladoria@gavresorts.com.br",
                  "memberId": "fb7df61d-5b73-44a9-8dcf-b5aed8984fea",
                  "memberType": "User",
                  "identityProvider": "AzureAD"
                }
              ]
            },
            {
              "name": "Controladoria",
              "modelPermission": "Read"
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": true,
          "isEffectiveIdentityRolesRequired": true,
          "refreshSchedule": {
            "days": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "times": [
              "11:00"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2020-02-14T22:36:13.423",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "cd6fd25d-ec86-4697-8494-c2d10df667cf",
          "name": "Controle de Boletos",
          "tables": [
            {
              "name": "Calendario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Date.From(Date.AddDays(Date.AddMonths(Date.EndOfMonth(DateTime.LocalNow()), -6), 1)),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.AddMonths(Date.EndOfMonth(DateTime.LocalNow()), 1))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "Parcelas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "parcela",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "parcela_geral",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "parcela_origem",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "total_parcelas",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_conciliado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_recebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_conciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ult Ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Ocorrencia Motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia Motivo]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Ocorrencia Remessa",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia Remessa]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Parcela Emitida",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF(Boletos[Qtd Boletos] = 0, \nIF(OcorrenciaVendas[Qtd Ocorrencias Vendas] = 0, \nIF(OcorrenciaParcelas[Qtd Ocorrencias Parcelas] = 0, \"Não\", \"Parcela Bloqueada\"), \"Venda Bloqueada\"), \"Sim\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status Boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF(Boletos[Qtd Boletos] = 0, \"00-Não Emitida\", CONCATENATE(CONCATENATE(Parcelas[Ultima CodOcorrencia], \"-\"), Parcelas[Ultima Ocorrencia]))\n/*IF(ISBLANK([Ultima CodOcorrencia]), \"1-Gerada\", \n    SWITCH(TRUE(), \n    [Ultima Ocorrencia Banco] = 1,\n        SWITCH(TRUE(), \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Enviada\", \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Retorno\", \n            SWITCH(TRUE(), \n            [Boleto Registrado] > 0, \"3-Registrada\", \n            \"2-Enviada\"), \n        VALUE([Ultima CodOcorrencia]) = 2, \"3-Registrada\", \n        VALUE([Ultima CodOcorrencia]) = 3, \"4-Rejeitada\", \n        VALUE([Ultima CodOcorrencia]) = 9, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 10, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 5, \"7-Recebida\", \n        VALUE([Ultima CodOcorrencia]) = 6, \"7-Recebida\", \n        \"Cadastrar Ocorrência\"), \n    [Ultima Ocorrencia Banco] = 33,\n        SWITCH(TRUE(), \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Enviada\", \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Retorno\", \n            SWITCH(TRUE(), \n            [Boleto Registrado] > 0, \"3-Registrada\", \n            \"2-Enviada\"), \n        VALUE([Ultima CodOcorrencia]) = 2, \"3-Registrada\", \n        VALUE([Ultima CodOcorrencia]) = 3, \"4-Rejeitada\", \n        VALUE([Ultima CodOcorrencia]) = 9, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 10, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 4, \"6-Alterado\", \n        VALUE([Ultima CodOcorrencia]) = 5, \"6-Alterado\", \n        VALUE([Ultima CodOcorrencia]) = 6, \"7-Recebida\", \n        \"Cadastrar Ocorrência\"), \n    [Ultima Ocorrencia Banco] = 237,\n        SWITCH(TRUE(), \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Enviada\", \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Retorno\", \n            SWITCH(TRUE(), \n            [Boleto Registrado] > 0, \"3-Registrada\", \n            \"2-Enviada\"), \n        VALUE([Ultima CodOcorrencia]) = 2, \"3-Registrada\", \n        VALUE([Ultima CodOcorrencia]) = 3, \"4-Rejeitada\", \n        VALUE([Ultima CodOcorrencia]) = 10, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 5, \"7-Recebida\", \n        VALUE([Ultima CodOcorrencia]) = 6, \"7-Recebida\", \n        VALUE([Ultima CodOcorrencia]) = 9, \"7-Recebida\", \n        \"Cadastrar Ocorrência\"), \n    [Ultima Ocorrencia Banco] = 341,\n        SWITCH(TRUE(), \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Enviada\", \n        VALUE([Ultima CodOcorrencia]) = 2 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Pedido Baixa\", \n        VALUE([Ultima CodOcorrencia]) = 2 && [Ultima Ocorrencia Tipo] = \"Retorno\", \"3-Registrada\", \n        VALUE([Ultima CodOcorrencia]) = 3, \"4-Rejeitada\", \n        VALUE([Ultima CodOcorrencia]) = 6, \"7-Recebida\", \n        \"Cadastrar Ocorrência\"), \n    [Ultima Ocorrencia Banco] = 604,\n        SWITCH(TRUE(), \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Envio\", \"2-Enviada\", \n        VALUE([Ultima CodOcorrencia]) = 1 && [Ultima Ocorrencia Tipo] = \"Retorno\", \n            SWITCH(TRUE(), \n            [Boleto Registrado] > 0, \"3-Registrada\", \n            \"2-Enviada\"), \n        VALUE([Ultima CodOcorrencia]) = 2, \"3-Registrada\", \n        VALUE([Ultima CodOcorrencia]) = 3, \"4-Rejeitada\", \n        VALUE([Ultima CodOcorrencia]) = 9, \"5-Cancelada\", \n        VALUE([Ultima CodOcorrencia]) = 5, \"6-Alterada\", \n        VALUE([Ultima CodOcorrencia]) = 6, \"7-Recebida\", \n        \"Cadastrar Ocorrência\"), \n    \"Cadastrar Banco\")))*/",
                  "columnType": "Calculated"
                },
                {
                  "name": "pessoa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_venda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ult Ocorrencia Banco",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia Banco]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Ocorrencia Tipo",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia Tipo]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Ocorrencia Padrão",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Ocorrencia Padrão]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Envio",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Envio]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Geração",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Geração]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Ult Reenvio",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "Parcelas[Ultima Reenvio]",
                  "columnType": "Calculated"
                },
                {
                  "name": "cod_cliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Boleto Registrado",
                  "expression": "CALCULATE([Qtd Boletos], Boletos[cod_ocorrencia_boleto] = \"02\")",
                  "isHidden": false
                },
                {
                  "name": "Ultima CodOcorrencia",
                  "expression": "CALCULATE(MAX(Boletos[cod_ocorrencia_boleto]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia",
                  "expression": "CALCULATE(MAX(Boletos[ocorrencia_boleto2]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia Banco",
                  "expression": "CALCULATE(MAX(Boletos[Banco]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia Motivo",
                  "expression": "CALCULATE(MAX(Boletos[motivo]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia Remessa",
                  "expression": "CALCULATE(MAX(Boletos[nome_arquivo]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia Tipo",
                  "expression": "CALCULATE(MAX(Boletos[tipo_ocorrencia_boleto]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Parcela sem OcoParc",
                  "expression": "BLANK()\n//CALCULATE(VwBoletos[Qtd Boletos], FILTER(NATURALLEFTOUTERJOIN(VwParcelas, VwOcorrenciaParcelas), ISBLANK(VwOcorrenciaParcelas[chave_ocorrencia])))//",
                  "isHidden": false
                },
                {
                  "name": "Parcela sem OcoVenda",
                  "expression": "\nCALCULATE(Boletos[Qtd Boletos])//FILTER(NATURALLEFTOUTERJOIN(Parcelas, OcorrenciaVendas), ISBLANK(OcorrenciaVendas[chave_ocorrencia]))))//)",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parc Receber",
                  "expression": "CALCULATE(Parcelas[Qtd Parcelas], Parcelas[status_parcela] = \"Receber\")",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Parcelas[chave_parcela]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parc Recebidas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Parcelas[chave_parcela]), Parcelas[status_parcela] = \"Recebida\" || Parcelas[status_parcela] = \"A Compensar\")",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas Bloqueadas",
                  "expression": "BLANK() //CALCULATE(VwParcelas[Qtd Parcelas], FILTER(NATURALLEFTOUTERJOIN(VwParcelas, VwOcorrenciaParcelas), NOT(ISBLANK(VwOcorrenciaParcelas[chave_ocorrencia]))))//",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas não Emitidas",
                  "expression": "CALCULATE(Parcelas[Qtd Parcelas], Parcelas[Parcela Emitida] <> \"Sim\")",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas não Emitidas Bloqueadas",
                  "expression": "CALCULATE([Qtd Parcelas], FILTER(Parcelas, Parcelas[Parcela Emitida] = \"Venda Bloqueada\" || Parcelas[Parcela Emitida] = \"Parcela Bloqueada\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Vendas Bloqueadas",
                  "expression": "CALCULATE(Parcelas[Qtd Vendas])//, FILTER(NATURALLEFTOUTERJOIN(Parcelas, OcorrenciaVendas), NOT(ISBLANK(OcorrenciaVendas[chave_ocorrencia]))))//",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas não Emitidas sem Bloqueio",
                  "expression": "CALCULATE([Qtd Parcelas], Parcelas[Parcela Emitida] = \"Não\")",
                  "isHidden": false
                },
                {
                  "name": "Qtd Vendas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Parcelas[chave_venda]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Ocorrencia Padrão",
                  "expression": "CALCULATE(MAX(Boletos[padrao_cobranca]), Boletos[data_cadastro] = MAX(Boletos[data_cadastro]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Geração",
                  "expression": "CALCULATE(MAX(Boletos[data_geracao]), Boletos[data_geracao] = MAX(Boletos[data_geracao]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Envio",
                  "expression": "CALCULATE(MAX(Boletos[data_envio_email]), Boletos[data_envio_email] = MAX(Boletos[data_envio_email]))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Reenvio",
                  "expression": "CALCULATE(MAX(Boletos[data_reenvio_email]), Boletos[data_reenvio_email] = MAX(Boletos[data_reenvio_email]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Clientes",
                  "expression": "CALCULATE(DISTINCTCOUNT(Parcelas[cod_cliente]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(cr)#(lf)       vp.chave_venda,#(cr)#(lf)       vp.chave_parcela,#(cr)#(lf)       vp.tipo_parcela,#(cr)#(lf)       vp.parcela,#(cr)#(lf)       vp.parcela_geral,#(cr)#(lf)       vp.parcela_origem,#(cr)#(lf)       vp.total_parcelas,#(cr)#(lf)       vp.valor_pago,#(cr)#(lf)       vp.status_parcela,#(cr)#(lf)       vp.status_conciliado,#(cr)#(lf)       vp.data_vencimento,#(cr)#(lf)       vp.data_recebimento,#(cr)#(lf)       vp.data_conciliacao#(cr)#(lf)  FROM pos_vendas.parcelas AS vp#(cr)#(lf) INNER JOIN comercial.vendas AS vv#(cr)#(lf)    ON vp.chave_venda = vv.chave_venda#(cr)#(lf)   AND vv.status_venda <> 'Cancelada'#(cr)#(lf) WHERE vp.status_parcela IN ('Receber', 'Recebida', 'A Compensar')#(cr)#(lf)   AND vp.data_vencimento BETWEEN (date_trunc('month', (CURRENT_DATE - INTERVAL '6 month')) + INTERVAL '1 day')#(cr)#(lf)   AND (date_trunc('month', CURRENT_DATE) + INTERVAL '2 month - 1 day')\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_vencimento\", type date}, {\"data_recebimento\", type date}, {\"data_conciliacao\", type date}}),\n    #\"Linhas Agrupadas\" = Table.Group(#\"Tipo Alterado\", {\"chave_venda\", \"chave_parcela\", \"tipo_parcela\", \"parcela\", \"parcela_geral\", \"parcela_origem\", \"total_parcelas\", \"status_parcela\", \"status_conciliado\", \"data_vencimento\", \"data_recebimento\", \"data_conciliacao\"}, {{\"valor_pago\", each List.Sum([valor_pago]), type nullable number}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Linhas Agrupadas\", {\"chave_venda\"}, Vendas, {\"chave_venda\"}, \"Vendas\", JoinKind.LeftOuter),\n    #\"Vendas Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Vendas\", {\"cod_cliente\", \"pessoa\", \"empreendimento\", \"cod_empresa\", \"data_venda\", \"status_venda\"}, {\"cod_cliente\", \"pessoa\", \"empreendimento\", \"cod_empresa\", \"data_venda\", \"status_venda\"}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Vendas Expandido\", each [chave_parcela] <> \"18-PR003-06148-1-1-79\"),\n    #\"Linhas Filtradas1\" = Table.SelectRows(#\"Linhas Filtradas\", each [chave_parcela] <> \"18-PR003-06245-1-1-79\"),\n    #\"Linhas Filtradas2\" = Table.SelectRows(#\"Linhas Filtradas1\", each [chave_parcela] <> \"18-PR003-06286-1-1-79\"),\n    #\"Linhas Filtradas3\" = Table.SelectRows(#\"Linhas Filtradas2\", each [chave_parcela] <> \"41-70104-23387-1-1-79\")\nin\n    #\"Linhas Filtradas3\""
                }
              ]
            },
            {
              "name": "Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_cliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "pessoa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_venda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_proposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_venda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT vv.cod_cliente,#(cr)#(lf)       vp.pessoa,#(cr)#(lf)       ve.empreendimento,#(cr)#(lf)       vv.unidade,#(cr)#(lf)       vv.chave_venda,#(cr)#(lf)       vv.cod_empresa,#(cr)#(lf)       vv.cod_obra,#(cr)#(lf)       vv.venda,#(cr)#(lf)       cast(vv.data_venda AS Date) AS data_venda,#(cr)#(lf)       cast(vv.data_cessao AS Date) AS data_cessao,#(cr)#(lf)       vv.data_cancel,#(cr)#(lf)       vv.valor_venda,#(cr)#(lf)       vv.status_venda,#(cr)#(lf)       vv.chave_proposta#(cr)#(lf)  FROM comercial.vendas AS vv#(cr)#(lf)  LEFT JOIN comercial.estoque AS ve#(cr)#(lf)    ON vv.chave_unidade = ve.chave_unidade#(cr)#(lf)  LEFT JOIN corporativo.pessoas AS vp#(cr)#(lf)    ON vv.cod_cliente = vp.cod_pessoa#(cr)#(lf) WHERE vv.status_venda <> 'Cancelada';\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=false]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_venda\", type date}, {\"data_cessao\", type date}, {\"data_cancel\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "OcorrenciaParcelas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "obs_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Ocorrencias Parcelas",
                  "expression": "CALCULATE(COUNT(OcorrenciaParcelas[chave_ocorrencia]), CROSSFILTER(OcorrenciaParcelas[chave_parcela], Parcelas[chave_parcela], Both))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(lf)    vop.chave_venda,#(lf)    vop.chave_parcela,#(lf)    vop.chave_ocorrencia,#(lf)    vop.status_ocorrencia,#(lf)    vop.usr_cad,#(lf)    vop.data_cad,#(lf)    vop.ocorrencia,#(lf)    vop.obs_ocorrencia#(lf)  FROM pos_vendas.ocorrencia_parcelas AS vop#(lf) INNER JOIN pos_vendas.ocorrencia_itens_bloq AS vob#(lf)    ON vop.cod_ocorrencia = vob.cod_ocorrencia#(lf)   AND vob.cod_bloqueio = 3#(lf) INNER JOIN pos_vendas.parcelas AS vp#(lf)    ON vop.chave_parcela = vp.chave_parcela#(lf)   AND vp.status_parcela IN ('Receber', 'Recebida', 'A Compensar')#(lf)   AND vp.data_vencimento BETWEEN (date_trunc('month', (CURRENT_DATE - INTERVAL '6 month')) + INTERVAL '1 day')#(lf)   AND (date_trunc('month', CURRENT_DATE) + INTERVAL '1 month - 1 day')\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_cad\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "OcorrenciaVendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "obs_ocorrencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Ocorrencias Vendas",
                  "expression": "CALCULATE(COUNT(OcorrenciaVendas[chave_ocorrencia]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(lf)       vov.chave_venda,#(lf)       vov.chave_ocorrencia,#(lf)       vov.status_ocorrencia,#(lf)       vov.usr_cad,#(lf)       vov.data_cad,#(lf)       vov.ocorrencia,#(lf)       vov.obs_ocorrencia#(lf)  FROM pos_vendas.ocorrencia_vendas AS vov#(lf) INNER JOIN pos_vendas.ocorrencia_itens_bloq AS vob#(lf)    ON vov.cod_ocorrencia = vob.cod_ocorrencia#(lf)   AND vob.cod_bloqueio = 3#(lf) INNER JOIN (#(lf)            SELECT#(lf)                   chave_venda#(lf)              FROM pos_vendas.parcelas#(lf)             WHERE status_parcela IN ('Receber', 'Recebida', 'A Compensar')#(lf)               AND data_vencimento BETWEEN (date_trunc('month', (CURRENT_DATE - INTERVAL '6 month')) + INTERVAL '1 day')#(lf)               AND (date_trunc('month', CURRENT_DATE) + INTERVAL '1 month - 1 day')#(lf)             ) AS vp#(lf)        ON  vov.chave_venda = vp.chave_venda\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_cad\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Boletos",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_cliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "parcela",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "parc_geral",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empresa_boleto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "banco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "conta_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "convenio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nosso_numero",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nn",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_boleto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "padrao_cobranca",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_alt",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_exclusao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_geracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_emissao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_venc_boleto",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "dias_atraso",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_parcela",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_desc_parc",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_deducao",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_multa",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_acrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_cobrado",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_boleto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "linha_digitavel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_status_boleto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_status_banco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_banco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ocorrencia_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_alteracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "agrupado",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "antecipado",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "residuo",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "boleto_parcial",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_cobranca",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "envia_email_prouau",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "boleto_enviado",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_envio_email",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_reenvio_email",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "origem_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "num_remessa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_ocorrencia_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ocorrencia_boleto2",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_ocorrencia_boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cadastro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nome_arquivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Boletos",
                  "expression": "CALCULATE(DISTINCTCOUNT(Boletos[chave_boleto]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Boletos (DtGera)",
                  "expression": "CALCULATE(DISTINCTCOUNT(Boletos[chave_boleto]), USERELATIONSHIP(Boletos[data_geracao], Calendario[Data]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas Emitidas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Boletos[chave_parcela]))",
                  "isHidden": false
                },
                {
                  "name": "Total Parcelas Emitidas",
                  "expression": "IF(ISBLANK(Boletos[Qtd Parcelas Emitidas]), 0, Boletos[Qtd Parcelas Emitidas])",
                  "isHidden": false
                },
                {
                  "name": "Total Parcelas não Emitidas",
                  "expression": "IF(ISBLANK(Parcelas[Qtd Parcelas não Emitidas]), 0, Parcelas[Qtd Parcelas não Emitidas])",
                  "isHidden": false
                },
                {
                  "name": "Total Parcelas não Emitidas Bloqueada",
                  "expression": "IF(ISBLANK(Parcelas[Qtd Parcelas não Emitidas Bloqueadas]), 0, Parcelas[Qtd Parcelas não Emitidas Bloqueadas])",
                  "isHidden": false
                },
                {
                  "name": "Total Parcelas não Emitidas sem Bloqueio",
                  "expression": "IF(ISBLANK(Parcelas[Qtd Parcelas não Emitidas sem Bloqueio]), 0, Parcelas[Qtd Parcelas não Emitidas sem Bloqueio])",
                  "isHidden": false
                },
                {
                  "name": "Total Parcelas Rejeitadas",
                  "expression": "IF(ISBLANK(CALCULATE(Parcelas[Qtd Parcelas], Parcelas[status_parcela] = \"4-Rejeitada\")), 0, CALCULATE(Parcelas[Qtd Parcelas], Parcelas[Status Boleto] = \"4-Rejeitada\"))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(cr)#(lf)       vbl.*,#(cr)#(lf)       vbm.cod_ocorrencia_boleto,#(cr)#(lf)       vbm.ocorrencia_boleto,#(cr)#(lf)       vbm.tipo_ocorrencia_boleto,#(cr)#(lf)       vbm.cod_motivo,#(cr)#(lf)       vbm.motivo,#(cr)#(lf)       vbm.data_cadastro,#(cr)#(lf)       vbm.usr_cadastro,#(cr)#(lf)       vbm.nome_arquivo#(cr)#(lf)  FROM pos_vendas.boletos AS vbl#(cr)#(lf) INNER JOIN (#(cr)#(lf)       SELECT #(cr)#(lf)              chave_parcela#(cr)#(lf)         FROM pos_vendas.parcelas#(cr)#(lf)        WHERE status_parcela IN ('Receber', 'Recebida', 'A Compensar')#(cr)#(lf)          AND data_vencimento BETWEEN (DATE_TRUNC('month', (CURRENT_DATE - INTERVAL '6 month')) + INTERVAL '1 day')#(cr)#(lf)              AND (DATE_TRUNC('month', CURRENT_DATE) + INTERVAL '2 month - 1 day')#(cr)#(lf)     ) AS vp#(cr)#(lf)    ON vbl.chave_parcela = vp.chave_parcela#(cr)#(lf)  LEFT JOIN (#(cr)#(lf)       SELECT#(cr)#(lf)              vbm2.chave_boleto,#(cr)#(lf)              vbm2.cod_ocorrencia_boleto,#(cr)#(lf)              vbm2.ocorrencia_boleto,#(cr)#(lf)              vbm2.tipo_ocorrencia_boleto,#(cr)#(lf)              vbm2.cod_motivo,#(cr)#(lf)              vbm2.motivo,#(cr)#(lf)              vbm2.data_cadastro,#(cr)#(lf)              vbm2.usr_cadastro,#(cr)#(lf)              vbm2.nome_arquivo#(cr)#(lf)         FROM pos_vendas.boletos_movimento AS vbm2#(cr)#(lf)        INNER JOIN (#(cr)#(lf)              SELECT #(cr)#(lf)                     vbm2.chave_boleto,#(cr)#(lf)                     vbm2.data_cadastro,#(cr)#(lf)                     MAX(cod_ocorrencia_boleto) AS cod_ocorrencia_boleto#(cr)#(lf)                FROM pos_vendas.boletos_movimento AS vbm2#(cr)#(lf)               INNER JOIN (#(cr)#(lf)                     SELECT #(cr)#(lf)                            chave_boleto,#(cr)#(lf)                            MAX(data_cadastro) AS data_cadastro#(cr)#(lf)                       FROM pos_vendas.boletos_movimento#(cr)#(lf)                      WHERE data_cadastro > (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 month')#(cr)#(lf)                      GROUP BY chave_boleto#(cr)#(lf)                   ) vbm1#(cr)#(lf)                  ON vbm1.chave_boleto = vbm2.chave_boleto#(cr)#(lf)                 AND vbm1.data_cadastro = vbm2.data_cadastro#(cr)#(lf)               GROUP BY vbm2.chave_boleto, #(cr)#(lf)                     vbm2.data_cadastro#(cr)#(lf)            ) AS vbm1#(cr)#(lf)           ON vbm1.chave_boleto = vbm2.chave_boleto#(cr)#(lf)          AND vbm1.data_cadastro = vbm2.data_cadastro#(cr)#(lf)          AND vbm1.cod_ocorrencia_boleto = vbm2.cod_ocorrencia_boleto#(cr)#(lf)        GROUP BY vbm2.chave_boleto,#(cr)#(lf)              vbm2.cod_ocorrencia_boleto,#(cr)#(lf)              vbm2.ocorrencia_boleto,#(cr)#(lf)              vbm2.tipo_ocorrencia_boleto,#(cr)#(lf)              vbm2.cod_motivo,#(cr)#(lf)              vbm2.motivo,#(cr)#(lf)              vbm2.data_cadastro,#(cr)#(lf)              vbm2.usr_cadastro,#(cr)#(lf)              vbm2.nome_arquivo#(cr)#(lf)     ) vbm#(cr)#(lf)    ON vbm.chave_boleto = vbl.chave_boleto#(cr)#(lf) WHERE vbl.status_boleto IN ('Normal', 'Recebida')#(cr)#(lf)   AND vbl.data_geracao >= (DATE_TRUNC('month', CURRENT_DATE) - INTERVAL '6 month');\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=false]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_exclusao\", type date}, {\"data_geracao\", type date}, {\"data_emissao\", type date}, {\"data_venc_boleto\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "BoletosMovimento",
              "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT #(cr)#(lf)       vbm2.*#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              chave_boleto,#(cr)#(lf)              MAX(data_cadastro) AS data_cadastro#(cr)#(lf)         FROM pos_vendas.boletos_movimento#(cr)#(lf)        WHERE data_cadastro > (date_trunc('month', CURRENT_DATE) - INTERVAL '6 month')#(cr)#(lf)        GROUP BY chave_boleto#(cr)#(lf)     ) AS vbm1#(cr)#(lf)  LEFT JOIN pos_vendas.boletos_movimento AS vbm2#(cr)#(lf)    ON vbm2.chave_boleto = vbm1.chave_boleto#(cr)#(lf)   AND vbm2.data_cadastro = vbm1.data_cadastro;\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=false]),\n    #\"Linhas Filtradas\" = Table.SelectRows(Consulta, each true),\n    #\"Duplicatas Mantidas\" = let columnNames = Table.ColumnNames(#\"Linhas Filtradas\"), addCount = Table.Group(#\"Linhas Filtradas\", columnNames, {{\"Count\", Table.RowCount, type number}}), selectDuplicates = Table.SelectRows(addCount, each [Count] > 1), removeCount = Table.RemoveColumns(selectDuplicates, \"Count\") in Table.Join(#\"Linhas Filtradas\", columnNames, removeCount, columnNames, JoinKind.Inner),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Duplicatas Mantidas\",{\"cod_ocorrencia_boleto\", \"ocorrencia_boleto\", \"tipo_ocorrencia_boleto\", \"cod_motivo\", \"motivo\", \"data_cadastro\", \"usr_cadastro\", \"nome_arquivo\"})\nin\n    #\"Outras Colunas Removidas\""
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "times": [
              "08:30",
              "13:30",
              "17:30"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2021-12-08T23:48:19.84",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "72e68e0a-087f-4cbb-b210-570fbd60ac5c",
          "name": "GAV - Acompanhamento de Recebimentos",
          "tables": [
            {
              "name": "Parcelas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveParcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Parcela",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ParcGer",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodTipoParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FormaPgto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusConciliado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataRecebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancelamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPrincipal",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorCorrecao",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorJuros",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorCorrecaoAtr",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorMultaAtr",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorJurosAtr",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorTotalAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorTotalDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDescontoAntec",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorParcela",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPresente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencVendaMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencVendaDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencHojeMes",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVencHojeDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoRecebVencMes",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoRecebVencDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Faixa de Recebimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF(date(year(Parcelas[DataRecebimento]),month(Parcelas[DataRecebimento]),1)\n\t\t>\ndate(YEAR(Parcelas[DataVencimento]),month(Parcelas[DataVencimento]),1),\"1 - Atrasados\",\nIF(date(year(Parcelas[DataRecebimento]),month(Parcelas[DataRecebimento]),1)\n\t\t<\ndate(YEAR(Parcelas[DataVencimento]),month(Parcelas[DataVencimento]),1),\"3 - Antecipados\",\"2 - Em Dia\") )",
                  "columnType": "Calculated"
                },
                {
                  "name": "Dia Util nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Faixa de Recebimento com VendaMes",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF(Parcelas[DataVenda]\n\t\t>=\ndate(YEAR(Parcelas[DataRecebimento]),month(Parcelas[DataRecebimento]),1),\"0 - Venda do Mês\",\nIF(date(year(Parcelas[DataRecebimento]),month(Parcelas[DataRecebimento]),1)\n\t\t>\ndate(YEAR(Parcelas[DataVencimento]),month(Parcelas[DataVencimento]),1),\"1 - Atrasados\",\nIF(date(year(Parcelas[DataRecebimento]),month(Parcelas[DataRecebimento]),1)\n\t\t<\ndate(YEAR(Parcelas[DataVencimento]),month(Parcelas[DataVencimento]),1),\"3 - Antecipados\",\"2 - Em Dia\") ) )",
                  "columnType": "Calculated"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Parcelas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Parcelas[ChaveParcela]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado",
                  "expression": "CALCULATE(SUM(Parcelas[ValorPresente]), Parcelas[StatusParc] = \"Receber\") + CALCULATE(SUM(Parcelas[ValorPago]), Parcelas[StatusParc] = \"Recebida\" || Parcelas[StatusParc] = \"A Compensar\")",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido",
                  "expression": "CALCULATE(SUM(Parcelas[ValorPago]), Parcelas[StatusParc] = \"Recebida\")",
                  "isHidden": false
                },
                {
                  "name": "Vlr Receber",
                  "expression": "CALCULATE(SUM(Parcelas[ValorPresente])) + CALCULATE(Parcelas[Vlr Parcela], Parcelas[StatusParc] = \"A Compensar\")",
                  "isHidden": false
                },
                {
                  "name": "Vlr Receber (DtReceb)",
                  "expression": "Parcelas[Vlr Faturado] - Parcelas[Vlr Recebido (DtConcil)]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (DtConcil)",
                  "expression": "CALCULATE(Parcelas[Vlr Recebido], USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data]))",
                  "isHidden": false
                },
                {
                  "name": "% Receber",
                  "expression": "Parcelas[Vlr Receber]/Parcelas[Vlr Faturado]",
                  "isHidden": false
                },
                {
                  "name": "% Receber (DtReceb)",
                  "expression": "Parcelas[Vlr Receber (DtReceb)]/Parcelas[Vlr Faturado]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Inadimplente",
                  "expression": "CALCULATE(Parcelas[Vlr Receber], Parcelas[StatusParc] = \"Receber\" && Parcelas[PrazoVencHojeDia] < 0)",
                  "isHidden": false
                },
                {
                  "name": "% Inadimplente",
                  "expression": "Parcelas[Vlr Inadimplente]/Parcelas[Vlr Faturado]",
                  "isHidden": false
                },
                {
                  "name": "% Rec",
                  "expression": "DIVIDE(Parcelas[Vlr Recebido (DtConcil)], CALCULATE(Parcelas[Vlr Recebido (DtConcil)], ALLSELECTED(Calendario[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado Total",
                  "expression": "\nSWITCH(TRUE(),\nMAX(Parcelas[Faixa de Recebimento]) = \"2 - Em Dia\", CALCULATE(Parcelas[Vlr Faturado], ALLSELECTED(Parcelas[Faixa de Recebimento])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto Recebimento (Total)",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado Total], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util Rank])) * Parcelas[% Rec]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Parcela",
                  "expression": "CALCULATE(SUM(Parcelas[ValorParcela]))",
                  "isHidden": false
                },
                {
                  "name": "% Rec (Hist)",
                  "expression": "\nDIVIDE(\nCALCULATE(CALCULATE(CALCULATE(SUM(Parcelas[ValorPago]), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), ALLEXCEPT(Calendario,Calendario[Dia Util Rank],Calendario[Dia Util nº])), \nCALCULATE(CALCULATE(CALCULATE(SUM(Parcelas[ValorPago]), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), ALL(Calendario)))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (até Hoje)",
                  "expression": "CALCULATE([Vlr Recebido (DtConcil)], Parcelas[DataConciliacao] <= TODAY())",
                  "isHidden": false
                },
                {
                  "name": "Dif %",
                  "expression": "[% Rec] - Parcelas[% Rec (Hist)]",
                  "isHidden": false
                },
                {
                  "name": "DATA",
                  "expression": "EOMONTH(TODAY(), -7)+1",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Historico)",
                  "expression": "CALCULATE(CALCULATE(Parcelas[Vlr Recebido], Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (DiaUtil)",
                  "expression": "CALCULATE(CALCULATE(CALCULATE(SUM(Parcelas[ValorPago]), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), ALLEXCEPT(Calendario,Calendario[Dia Util Rank],Calendario[Dia Util nº]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto (até Hoje)",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util Rank])) * IF(MAX(Calendario[Data]) < TODAY(), Parcelas[% Rec (Hist)])",
                  "isHidden": false
                },
                {
                  "name": "Dif Previsto Recebido",
                  "expression": "Parcelas[Vlr Recebido (DtConcil)] - Parcelas[Vlr Previsto Recebimento]",
                  "isHidden": false
                },
                {
                  "name": "Dif % Previsto Recebido",
                  "expression": "DIVIDE(Parcelas[Dif Previsto Recebido], Parcelas[Vlr Previsto Recebimento])",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Acumulado)",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado], FILTER(ALLSELECTED(Calendario[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank]), Calendario[Dia] <= MAX(Calendario[Dia])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Hoje)",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado], Parcelas[DataVencimento] <= TODAY())",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Acumulado)",
                  "expression": "CALCULATE(Parcelas[Vlr Recebido (DtConcil)], FILTER(ALLSELECTED(Calendario[AnoMes], Calendario[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank]), Calendario[Dia] <= MAX(Calendario[Dia])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Hoje)",
                  "expression": "CALCULATE(Parcelas[Vlr Recebido (DtConcil)], Parcelas[DataConciliacao] <= TODAY())",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto (Acumulado)",
                  "expression": "\nCALCULATE(Parcelas[Vlr Faturado], ALLSELECTED(Calendario[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank])) * \nMetas[% Meta] * '_Recebimentos'[%Rec (Acumulado)]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto Recebimento",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank])) * Metas[% Meta] * Parcelas[% Rec (Hist)]",
                  "isHidden": false
                },
                {
                  "name": "%Recebido (Hoje)",
                  "expression": "Parcelas[Vlr Recebido (Hoje)] / CALCULATE(Parcelas[Vlr Faturado], ALLSELECTED(Calendario[Dia], Calendario[Dia Util nº]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (DtReceb)",
                  "expression": "CALCULATE(Parcelas[Vlr Recebido], USERELATIONSHIP(Parcelas[DataRecebimento], Calendario[Data]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido anterior (DtReceb)",
                  "expression": "CALCULATE(CALCULATE(SUM(Parcelas[ValorParcela]), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataVenda] < DATE(YEAR(Parcelas[DataRecebimento]), MONTH(Parcelas[DataRecebimento]), 1)), USERELATIONSHIP(Parcelas[DataRecebimento], Calendario[Data]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT #(lf)#(tab)vp.ChaveVenda, vp.ChaveParcela, vp.Venda, #(lf)#(tab)vp.Parcela, vp.ParcGer, vp.TipoParc [CodTipoParc], prc.Descricao_par [TipoParc], vp.FormaPgto, #(lf)#(tab)vp.StatusParc, vp.StatusConciliado, #(lf)#(tab)vv.DataVenda, vp.DataVencimento, vp.DataRecebimento, vp.DataConciliacao, vp.DataCancelamento, #(lf)#(tab)vp.ValorPrincipal, vp.ValorCorrecao, vp.ValorJuros, #(lf)#(tab)vp.ValorCorrecaoAtr, vp.ValorMultaAtr, vp.ValorJurosAtr, #(lf)#(tab)vp.ValorAcrescimo, vp.ValorTotalAcrescimo, #(lf)#(tab)vp.ValorDesconto, vp.ValorTotalDesconto, #(lf)#(tab)vp.ValorDescontoAntec, vp.ValorParcela, vp.ValorPresente, vp.ValorPago, #(lf)#(tab)vp.PrazoVencVendaMes, vp.PrazoVencVendaDia, #(lf)#(tab)vp.PrazoVencHojeMes, vp.PrazoVencHojeDia, #(lf)#(tab)vp.PrazoRecebVencMes, vp.PrazoRecebVencDia#(lf)FROM VwParcelas vp#(lf)LEFT JOIN Parcelas prc#(lf)#(tab)ON vp.TipoParc = prc.Tipo_par#(lf)LEFT JOIN VwVendas vv#(lf)#(tab)ON vp.ChaveVenda = vv.ChaveVenda#(lf)WHERE (vp.StatusParc = 'Receber' AND vp.DataVencimento BETWEEN '01/01/2019' AND EOMONTH(GETDATE()))#(lf)#(tab)OR (vp.StatusParc = 'A Compensar' AND vp.DataRecebimento BETWEEN '01/01/2019' AND EOMONTH(GETDATE()))#(lf)#(tab)OR (vp.StatusParc = 'Recebida' AND vp.DataConciliacao BETWEEN '01/01/2019' AND EOMONTH(GETDATE()))\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"DataVencimento\", type date}, {\"DataRecebimento\", type date}, {\"DataConciliacao\", type date}, {\"DataCancelamento\", type date}, {\"DataVenda\", type date}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Tipo Alterado\", {\"DataConciliacao\"}, Calendario, {\"Data\"}, \"Calendario\", JoinKind.LeftOuter),\n    #\"Calendario Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Calendario\", {\"Dia Util nº\"}, {\"Dia Util nº\"})\nin\n    #\"Calendario Expandido\""
                }
              ]
            },
            {
              "name": "Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelMês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaPrazoCancelDia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idContrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Vendas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Vendas[ChaveVenda]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Venda",
                  "expression": "CALCULATE(SUM(Vendas[ValorVenda]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"dcwbd24\"){[Name=\"UAU\"]}[Data],\n    SQL = \"SELECT #(lf)#(tab)vv.ChaveVenda, vv.Unidade, ve.Empreendimento, #(lf)#(tab)vv.CodEmpresa, vv.CodObra, vv.Venda, vv.StatusVenda, #(lf)#(tab)vv.DataVenda, vv.DataCessao, vv.DataCancel, #(lf)#(tab)vv.ValorVenda + vv.ValorAcrescimo - vv.ValorDesconto [ValorVenda], #(lf)#(tab)vv.PrazoVendaCancelMês, vv.PrazoVendaCancelDia, vv.FaixaPrazoCancelDia, #(lf)#(tab)vv.CodCliente, vv.idContrato#(lf)FROM VwVendas vv#(lf)LEFT JOIN VwEstoque ve#(lf)#(tab)ON vv.ChaveUnidade = ve.ChaveUnidade\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"DataVenda\", type date}, {\"DataCessao\", type date}, {\"DataCancel\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Calendario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Feriado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DiaUtil",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Util Rank",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\n                 IF(Calendario[DiaUtil]=TRUE(),\n                 RANKX(\n\t\t\t     FILTER(\n\t\t\t     ALLSELECTED('Calendario'),\n\t\t\t     'Calendario'[Data] <= MAX('Calendario'[Data])\n                 && Calendario[AnoMes] = EARLIER(Calendario[AnoMes])\n                 && Calendario[DiaUtil]=TRUE()),\n\t\t\t     FIRSTDATE('Calendario'[Data]),\n\t\t\t     ,ASC),0)",
                  "columnType": "Calculated"
                },
                {
                  "name": "AnoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Util nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Dia Util (Hoje)",
                  "expression": "LOOKUPVALUE(Calendario[Dia Util nº], Calendario[Data], IF(Calendario[Ultima Data] < TODAY(), Calendario[Ultima Data], TODAY()))",
                  "isHidden": false
                },
                {
                  "name": "Ultima Data",
                  "expression": "MAX(Calendario[Data])",
                  "isHidden": false
                },
                {
                  "name": "Ultimo Dia Util",
                  "expression": "CALCULATE(MAX(Calendario[Dia Util nº]), ALL(Calendario[Dia Util nº], Calendario[Dia]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(#date(2035,12,31))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Colocar Cada Palavra Em Maiúscula\", {\"Data\"}, Feriados, {\"Data\"}, \"Feriados\", JoinKind.LeftOuter),\n    #\"Feriados Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Feriados\", {\"Feriado\"}, {\"Feriado\"}),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Feriados Expandido\", \"DiaUtil\", each if [Feriado] <> null then 0 else if [Dia da Semana nº] = 0 then 0 else if [Dia da Semana nº] = 6 then 0 else 1),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Condicional Adicionada\",{{\"DiaUtil\", type logical}}),\n    #\"Personalização Adicionada1\" = Table.AddColumn(#\"Tipo Alterado1\", \"AnoMes\", each Text.Combine({Text.From([Ano], \"pt-BR\"), Text.PadStart(Text.From([Mês nº], \"pt-BR\"), 2, \"0\")}, \"\")),\n    #\"Linhas Agrupadas\" = Table.Group(#\"Personalização Adicionada1\", {\"Ano\", \"Trimestre\", \"Mês nº\", \"Mês\", \"AnoMes\", \"DiaUtil\"}, {{\"Calendario\", each _, type table [Data=nullable date, Ano=number, Trimestre=text, Mês nº=number, Mês=nullable text, Dia=number, Dia da Semana nº=number, Dia da Semana=nullable text, Feriado=nullable text, DiaUtil=nullable logical, AnoMes=number]}}),\n    #\"Personalização Adicionada2\" = Table.AddColumn(#\"Linhas Agrupadas\", \"Personalizar\", each Table.AddIndexColumn([Calendario], \"Índice\", 1, 1, Int64.Type)),\n    #\"Personalizar Expandido\" = Table.ExpandTableColumn(#\"Personalização Adicionada2\", \"Personalizar\", {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}, {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}),\n    #\"Coluna Condicional Adicionada1\" = Table.AddColumn(#\"Personalizar Expandido\", \"Dia Util nº\", each if [DiaUtil] = true then [Índice] else 0),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Coluna Condicional Adicionada1\",{{\"Data\", Order.Ascending}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Linhas Classificadas\",{\"Calendario\", \"Índice\"}),\n    #\"Tipo Alterado2\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"Data\", type date}, {\"Dia\", Int64.Type}, {\"Dia da Semana nº\", Int64.Type}, {\"Dia da Semana\", type text}, {\"Feriado\", type text}, {\"Dia Util nº\", Int64.Type}, {\"AnoMes\", Int64.Type}})\nin\n    #\"Tipo Alterado2\""
                }
              ]
            },
            {
              "name": "Recebido",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "TipoParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Vlr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Dia Util nº",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "%",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                }
              ],
              "measures": [
                {
                  "name": "Vlr Previsto",
                  "expression": "\nCALCULATE(Parcelas[Vlr Faturado], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util nº], Calendario[Dia Util Rank])) * Metas[% Meta] *\nRecebido[% Recebido (Calend)]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido DiaUtil",
                  "expression": "CALCULATE(SUM('Recebido'[Vlr]))",
                  "isHidden": false
                },
                {
                  "name": "% Recebido",
                  "expression": "\nDIVIDE(\n    CALCULATE(SUM('Recebido'[Vlr])), \n    CALCULATE(SUM('Recebido'[Vlr]), ALLSELECTED('Recebido'[Dia Util nº])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto - Recebido",
                  "expression": "Parcelas[Vlr Recebido (DtConcil)] - 'Recebido'[Vlr Previsto]",
                  "isHidden": false
                },
                {
                  "name": "% Previsto - Recebido",
                  "expression": "DIVIDE(Parcelas[Dif Previsto Recebido], 'Recebido'[Vlr Previsto])",
                  "isHidden": false
                },
                {
                  "name": "% Recebido (Acumulado)",
                  "expression": "\nDIVIDE(\n    CALCULATE(SUM('Recebido'[Vlr]), FILTER(CALCULATETABLE(ALLSELECTED(Recebido[Dia Util nº]), USERELATIONSHIP(Recebido[Dia Util nº], Calendario[Dia Util nº])), Recebido[Dia Util nº] <= MAX(Calendario[Dia Util nº]))), \n    CALCULATE(SUM('Recebido'[Vlr]), ALLSELECTED('Recebido'[Dia Util nº])))",
                  "isHidden": false
                },
                {
                  "name": "% Recebido (Calend)",
                  "expression": "\nDIVIDE(\n    CALCULATE(SUM('Recebido'[Vlr]), USERELATIONSHIP(Recebido[Dia Util nº], Calendario[Dia Util nº])), \n    CALCULATE(SUM('Recebido'[Vlr]), ALLSELECTED('Recebido'[Dia Util nº])),\n    BLANK())",
                  "isHidden": false
                },
                {
                  "name": "% Recebido Hist (Acumulado)",
                  "expression": "\nDIVIDE(\n    CALCULATE('Recebido'[Vlr Recebido DiaUtil], FILTER(ALLSELECTED(Recebido[Dia Util nº]), Recebido[Dia Util nº] <= MAX(Recebido[Dia Util nº]))), \n    CALCULATE('Recebido'[Vlr Recebido DiaUtil], ALLSELECTED(Recebido[Dia Util nº])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto Acumulado",
                  "expression": "\nCALCULATE(Parcelas[Vlr Faturado], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util Rank])) * \nMetas[% Meta] * Recebido[% Recebido (Acumulado)]",
                  "isHidden": false
                },
                {
                  "name": "% Recebido com Distribuição",
                  "expression": "\n/*SWITCH(TRUE(),\n    ISINSCOPE(Recebido[Dia Util nº]) || ISINSCOPE(Calendario[AnoMes]) || ISINSCOPE(Calendario[Dia]) || ISINSCOPE(Calendario[DiaUtil]),\n    SWITCH(TRUE(),\n        MAX(Recebido[Dia Util nº]) = 0, 0,\n        MAX(Recebido[Dia Util nº]) <= MAX(Calendario[Dia Util nº]), */\n            Recebido[% Recebido (Calend)] + Recebido[Diferença Distribuida]/*, \n        BLANK()),\n    MAX(Recebido[Dia Util nº]) <> 0, Recebido[% Recebido (Calend)] + _Recebimentos[%Rec Dias Uteis])*/",
                  "isHidden": false
                },
                {
                  "name": "% Recebido Hist com Distribuição (Acumulado)",
                  "expression": "\nDIVIDE(\n    CALCULATE('Recebido'[% Recebido], FILTER(ALLSELECTED(Recebido[Dia Util nº]), Recebido[Dia Util nº] <= MAX(Recebido[Dia Util nº]))), \n    CALCULATE('Recebido'[% Recebido], ALLSELECTED(Recebido[Dia Util nº])))",
                  "isHidden": false
                },
                {
                  "name": "% Dif Rec Ult Dias Uteis",
                  "expression": "\nvar tbRec = SUMMARIZECOLUMNS(Recebido[Dia Util nº], \"Vlr\", SUM(Recebido[Vlr]))\nvar tbCal = TOPN(30, VALUES(Calendario[Dia Util nº]))\n\nreturn\n--DIVIDE(\nSUMX(FILTER(\n    ADDCOLUMNS(CROSSJOIN(tbRec, tbCal), \n        \"Qtd\", CALCULATE(COUNTROWS(Recebido))), \n    CALCULATE(ISEMPTY(Recebido))), [Vlr])--, \n--CALCULATE(SUM('Recebido'[Vlr]), ALLSELECTED('Recebido'[Dia Util nº])),\n--BLANK())",
                  "isHidden": false
                },
                {
                  "name": "Diferença Distribuida",
                  "expression": "\nRecebido[% Dif Rec Ult Dias Uteis] / Calendario[Ultimo Dia Util]",
                  "isHidden": false
                },
                {
                  "name": "Dif Acumulada",
                  "expression": "SUMX(Recebido, Recebido[Diferença Distribuida])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "\nSUMMARIZECOLUMNS(Vendas[Empreendimento], Parcelas[TipoParc], Parcelas[Dia Util nº], \n    FILTER(Parcelas, Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), \n    \"Vlr\", SUM(Parcelas[ValorPago]),\n    \"%\", DIVIDE(CALCULATE(SUM(Parcelas[ValorPago])), \n    CALCULATE(CALCULATE(SUM(Parcelas[ValorPago])), ALLSELECTED(Parcelas[Dia Util nº]))))"
                }
              ]
            },
            {
              "name": "Metas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataRef",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Meta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "MetaFaturado",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AnoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "% Meta",
                  "expression": "\nSWITCH(TRUE(), \n    ISINSCOPE(Metas[Tipo]), CALCULATE(MAX(Metas[Meta]), USERELATIONSHIP(Metas[AnoMes], Calendario[AnoMes])),\n    ISINSCOPE(Metas[Empreendimento]), CALCULATE(SUM(Metas[Meta]), USERELATIONSHIP(Metas[AnoMes], Calendario[AnoMes])), \n    CALCULATE(SUM(Metas[Meta]) / DISTINCTCOUNT(Metas[Empreendimento]), USERELATIONSHIP(Metas[AnoMes], Calendario[AnoMes])))",
                  "isHidden": false
                },
                {
                  "name": "Meta Recebimento",
                  "expression": "CALCULATE(Parcelas[Vlr Faturado] * Metas[% Meta], USERELATIONSHIP(Metas[Empreendimento], Empresas[Empreendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Tipo)",
                  "expression": "CALCULATE(CALCULATE(CALCULATE(Parcelas[Vlr Recebido (DtConcil)], Vendas[Empreendimento] = MAX(Metas[Empreendimento])), USERELATIONSHIP(Metas[Tipo], Parcelas[Faixa de Recebimento])), USERELATIONSHIP(Metas[DataRef], Calendario[Data]))",
                  "isHidden": false
                },
                {
                  "name": "Recebido",
                  "expression": "SUMX(Metas, Metas[Vlr Recebido (Tipo)])",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Tipo)",
                  "expression": "CALCULATE(CALCULATE(CALCULATE(Parcelas[Vlr Faturado], Vendas[Empreendimento] = MAX(Metas[Empreendimento])), USERELATIONSHIP(Metas[Tipo], Parcelas[Faixa de Recebimento])), USERELATIONSHIP(Metas[DataRef], Calendario[Data]))",
                  "isHidden": false
                },
                {
                  "name": "Faturado",
                  "expression": "SUMX(Metas, Metas[Vlr Faturado (Tipo)])",
                  "isHidden": false
                },
                {
                  "name": "%Rec Faturado",
                  "expression": "DIVIDE(Metas[Recebido], Parcelas[Vlr Faturado])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Excel.Workbook(File.Contents(\"\\\\valle.br\\fs_gav\\BI\\1.Fontes\\1.1.Dados_Brutos\\Pos_Vendas\\Metas_Recebimento.xlsx\"), null, true),\n    Tabela1_Table = Fonte{[Item=\"MetasRecebimento\",Kind=\"Table\"]}[Data],\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Tabela1_Table,{{\"Empreendimento\", type text}, {\"DataRef\", type date}, {\"Meta\", Percentage.Type}, {\"Tipo\", type text}, {\"MetaFaturado\", type number}}),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Tipo Alterado\", \"AnoMes\", each Text.Combine({Text.From(Date.Year([DataRef]), \"pt-BR\"), Text.PadStart(Text.From(Date.Month([DataRef]), \"pt-BR\"), 2, \"0\")}, \"\")),\n    #\"Changed Type\" = Table.TransformColumnTypes(#\"Personalização Adicionada\",{{\"AnoMes\", Int64.Type}})\nin\n    #\"Changed Type\""
                }
              ]
            },
            {
              "name": "_Recebimentos",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "% Rec (Hist)",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "Dia Util Rank",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                }
              ],
              "measures": [
                {
                  "name": "%Rec",
                  "expression": "CALCULATE(SUM('_Recebimentos'[% Rec (Hist)]), USERELATIONSHIP('_Recebimentos'[Dia Util Rank], Calendario[Dia Util nº]))",
                  "isHidden": false
                },
                {
                  "name": "%Rec (Acumulado)",
                  "expression": "CALCULATE('_Recebimentos'[%Rec], FILTER(ALL('_Recebimentos'), '_Recebimentos'[Dia Util Rank] <= MAX(Calendario[Dia Util Rank])))",
                  "isHidden": false
                },
                {
                  "name": "%Rec (Hoje)",
                  "expression": "CALCULATE('_Recebimentos'[%Rec], FILTER(ALL('_Recebimentos'), '_Recebimentos'[Dia Util Rank] <= Calendario[Dia Util (Hoje)]))",
                  "isHidden": false
                },
                {
                  "name": "%Rec (Hist) SUMX",
                  "expression": "CALCULATE(SUM('_Recebimentos'[% Rec (Hist)]), CROSSFILTER('_Recebimentos'[Dia Util Rank], Calendario[Dia Util Rank], Both))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Previsto (Hoje)",
                  "expression": "\nCALCULATE(Parcelas[Vlr Faturado], ALLSELECTED('Calendario'[Dia], Calendario[Dia Util Rank])) * \nMetas[% Meta] * '_Recebimentos'[%Rec (Hoje)]",
                  "isHidden": false
                },
                {
                  "name": "Dif Prev Recebido",
                  "expression": "Parcelas[Vlr Recebido (Hoje)] - _Recebimentos[Vlr Previsto (Hoje)]",
                  "isHidden": false
                },
                {
                  "name": "%Dif Prev Recebido",
                  "expression": "DIVIDE(_Recebimentos[Dif Prev Recebido], _Recebimentos[Vlr Previsto (Hoje)])",
                  "isHidden": false
                },
                {
                  "name": "Dias",
                  "expression": "CONCATENATEX(FILTER(NATURALLEFTOUTERJOIN(_Recebimentos, Calendario), [Data] = BLANK()), _Recebimentos[Dia Util Rank], \",\")",
                  "isHidden": false
                },
                {
                  "name": "Previsto",
                  "expression": "CALCULATE(Parcelas[Vlr Previsto Recebimento])",
                  "isHidden": false
                },
                {
                  "name": "Mes",
                  "expression": "CALCULATE(MAX(Calendario[Mês]))",
                  "isHidden": false
                },
                {
                  "name": "% Dif",
                  "expression": "CONCATENATEX(FILTER(NATURALLEFTOUTERJOIN(_Recebimentos, Calendario), [Data] = BLANK()), _Recebimentos[%Rec], \",\")",
                  "isHidden": false
                },
                {
                  "name": "%Rec Dias Uteis",
                  "expression": "SUMX(FILTER(NATURALLEFTOUTERJOIN(_Recebimentos, Calendario), [Data] = BLANK()), _Recebimentos[%Rec])",
                  "isHidden": false
                },
                {
                  "name": "%Dif Recebido",
                  "expression": "DIVIDE(Metas[Meta Recebimento], Parcelas[Vlr Faturado])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "\nSUMMARIZE(Calendario, \n    Calendario[Dia Util Rank],\n    \"% Rec (Hist)\", DIVIDE(\n        CALCULATE(CALCULATE(CALCULATE(SUM(Parcelas[ValorPago]), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), ALLEXCEPT(Calendario,Calendario[Dia Util Rank],Calendario[Dia Util nº])), \n        CALCULATE(CALCULATE(CALCULATE(SUM(Parcelas[ValorPago]), USERELATIONSHIP(Parcelas[DataConciliacao], Calendario[Data])), Parcelas[StatusParc] = \"Recebida\" && Parcelas[DataConciliacao] >= EOMONTH(TODAY(), -7)+1 && Parcelas[DataConciliacao] <= EOMONTH(TODAY(), -1)), ALL(Calendario))))"
                }
              ]
            },
            {
              "name": "Empresas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CNPJ",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Regiao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT #(cr)#(lf)       cod_empresa AS \"\"CodEmpresa\"\",#(cr)#(lf)       empresa AS \"\"Empresa\"\",#(cr)#(lf)       cnpj AS \"\"CNPJ\"\",#(cr)#(lf)       empreendimento AS \"\"Empreendimento\"\",#(cr)#(lf)       regiao AS \"\"Regiao\"\"#(cr)#(lf)  FROM corporativo.empresas#(cr)#(lf) WHERE empreendimento IS NOT NULL#(cr)#(lf)   AND cod_empresa <> 88\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            },
            {
              "name": "EstruturaRecebimentos",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Tipo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "GrupoTipo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Vlr Faixa",
                  "expression": "\nVAR Tipo = CALCULATE(MAX(EstruturaRecebimentos[Tipo]))\nRETURN\nIF(ISINSCOPE(EstruturaRecebimentos[Tipo]) || ISINSCOPE(EstruturaRecebimentos[GrupoTipo]),\nSWITCH(TRUE(),\n    Tipo = \"0 - Faturado\", CALCULATE(Parcelas[Vlr Faturado], Parcelas[DataVencimento] <= EOMONTH(TODAY(), 0)),\n    CALCULATE(Parcelas[Vlr Recebido (DtConcil)], USERELATIONSHIP(Parcelas[Faixa de Recebimento], EstruturaRecebimentos[Tipo]))),\nCALCULATE(Parcelas[Vlr Recebido (DtConcil)], USERELATIONSHIP(Parcelas[Faixa de Recebimento], EstruturaRecebimentos[Tipo])))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMlDQVXBLLCktSkzJV9JRgjNjdaKVDIFyjiVFicVAgWKgZFBqcmpSJlTSCCjpmqvgkpmILmMM0pZXkpqcWYChMRYA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Tipo = _t, GrupoTipo = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Tipo\", type text}, {\"GrupoTipo\", type text}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Atualizacao",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualizacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n\tFonte = #table({\"Ultima Atualizacao\"}, {{DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),-3,0)}}),\n\t#\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualizacao\", type datetimezone}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "Feriados",
              "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"rZrLbtNAFIZfJcq6qL7ETrOEXiSQqKKWHWIxdQy15NqVcxGvg1ig8ghs82L4MkFN5vzjf4yXUc83c2p//sczyefP00tVFWqn8unZ1A/PveA88PyL+sONSrb5Rm2yXVl/ulVJVhZt1fTL2RHlRede2FALFyqIurkCz4XyY035Th36XYdB4NShr+cKnTrU1zCYOXU40x1GTnPN9Vyx01wLTc2drsaBcnLj39VwcuNgVNjvxn36faPe3KRZpSb3qtio+g+hp4VsWiUZv/73ZgeJWcbrmFZhkqmvRsf4DvNEmgkc5plrJuSZ5haHB3XZ3mI9T+TQW6iZ2KG3WPc2d+htpudx8ODgTuDigXYnBB5cltXzdj25fKyy9SZrJqmTJSJz9pQN6gZjMm1PWd/vWCZzT9nmpsVk8hrzxpol8teY90KzRAob19nrrjOTxUbPCz0vkchGzzPNErls3N+57plIZ6PnSM87wKuDk0xSIyeJvL7bv+zSLM/LYtqty74ldMVilLZyMYhZuRjkq1wMglUuBokqF4MolYtBhsrFIDzlYpCacrHLHUQ5KReDO/h2la73P8vJVTlZqmr/Q+t/8Wrdv15v1GrbIsu3vdBiAHRw0Q3yh0DBECgcAs2GQNEQKB4CzYdAQ4wIhhgRQiNuy/W6fmdIi8eyfne4UpPLskjSbP+rHmnarnN+8Erej9siS7LndoR3ab5/eTqb3KVJ9jV1Gm0x5mgH3UcazR91tGDU0cJRR5uNOlo06mjxqKPNRx1t1GchGPVZCLln4Sqrx0gn901cfCi7IQL9eiitU9f9lBBL/ZS0UhGUsFQRlLBWEZSwWBGUsFoRlLBcEZSwXhGUsGAR1CA3pCWrn5LWrI5aVmWSqyfVyt88C3fp8/7PQ54l+lzC9y3nLCQNXh05Gu0GSBq8XJI02C+QNNhAkDTYUZA02GKQNNhzkDTYhJD0f7mGtikcjfYtS7WqyvZEqH4hfFepddYefQbnvmd7OuwU6tRKwafBTqGnwE4h++0Ust5OIdvtFLLcTiG77RSy2k4NcgNabKWQve+LVfqcFqv97yLJjtHmEHlhUZhBQa8EimRmUGA0gwKtGRS4zaBAcAYFljMoUJ1Bge8MOtwmZD6BIv1v1ab7fis63n/31oFWTuuQxUYdUNaoA34adUBGow6YZ9QBzYw64JRRBwQy6sj7gdQ4rUMe6Bfkm6xQq3I9bb+ps77dYgB0AgGkCAaAKxgA0mAA2IMBoBEGgE8YAGJhABiGAdc7jZyDgFW+cvKpUg8qf2yPGV5/RehG2JoSCat/MmETUCZsBsqETUGZsDkoEzYJZcJmoUzYNJQJ53tuFVEkemLwU/0WuUqLTdrY2/wQZtafhDJjf0REpicPZcYeiTJjT0WZsQejzNizUWbs8Sgz9oSUGXtIyswAD3qiUmTg94Tprsy33V59mVaFenrYJqpof1oSH//0xzzSYmB4ikbA+KCVgeF5KwPDY1cGhqevDAwPYRkYnsUyMDySZWB4MsvA/2MYPqclYHxcq+P+eqeKb/uXPEuaxA+94/fYV9jVDYGZrTKY8BhQmPkAUJipPoWZ0lOYqTuFmaJTmKk4hZlyU9gwSwShGUxQucG+/AU=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Feriado = _t, Data = _t, Tipo = _t, TipoRegiao = _t, Regiao = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Data\", type date}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each ([TipoRegiao] = \"Nacional\") and ([Tipo] = \"\"))\nin\n    #\"Linhas Filtradas\""
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ],
            "times": [
              "10:00"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2022-02-04T21:05:42.37",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "f40a8912-183d-41fe-9e18-8d24b4fc832c",
          "name": "Fidelização Dynamics",
          "tables": [
            {
              "name": "Solicitacao",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_Atd",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo_Solicitação",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CadastroEm",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoAtendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoConclusãoProcesso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FinalizadoEm",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusFidelização",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoFidelizacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "EstagioAtivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtivaçãoEstagio",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "vize_diasaberto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bpf_duration",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bpf_incidentid",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bpf_incidentidname",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NomeProcesso",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "businessprocessflowinstanceid",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AlteradoPor",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Responsavel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAlteracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Organizacao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NomeCliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CanceladoEm",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Assunto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConclusaoBackOffice",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "BackConcluidoPor",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoBackOffice",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConclusaoComercial",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ComercialConcluidoPor",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoComercial",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataEncerramentto",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Motivo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SatisfeitoAtend",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusDocumento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusSLABack",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusSLAComercial",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "processid",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "statecodename",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "statuscodename",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FluxoProcesso",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data_Solicitação",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "SituacaoPrazoFinal",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n                    TRUE(),\n                    Solicitacao[statecodename] = \"Ativo\" && Solicitacao[PrazoConclusãoProcesso] <= TODAY(),\"Em Andamento Atrasado\",\n                    Solicitacao[statecodename] = \"Ativo\" && Solicitacao[PrazoConclusãoProcesso] >= TODAY(),\"Em Andamento no Prazo\",\n                    Solicitacao[statecodename] = \"Resolvido\" && Solicitacao[DataEncerramentto] <= Solicitacao[PrazoConclusãoProcesso],\"Finalizado no Prazo\",   \n                    Solicitacao[statecodename] = \"Resolvido\" && Solicitacao[DataEncerramentto] >= Solicitacao[PrazoConclusãoProcesso],\"Finalizado Atrasado\",\n                    BLANK()\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "DIAS_ATD",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nIF(Solicitacao[statecodename] = \"Ativo\" && ISBLANK(Solicitacao[DataEncerramentto]),\n    DATEDIFF(Solicitacao[CadastroEm],TODAY(),DAY),\n    DATEDIFF(Solicitacao[CadastroEm],Solicitacao[DataEncerramentto],DAY))",
                  "columnType": "Calculated"
                },
                {
                  "name": "IdCategoriaEstagio",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CategoriaEstagio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "subjectid",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo Cadastro Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF(Solicitacao[Data_Solicitação], Solicitacao[CadastroEm], DAY)",
                  "columnType": "Calculated"
                },
                {
                  "name": "SituacaoFid",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n                    TRUE(),\n                    ISBLANK(Solicitacao[StatusFidelização]) && Solicitacao[statecodename] = \"Ativo\" && Solicitacao[PrazoFidelizacao] >= TODAY(),\"Em Andamento no Prazo\",\n                    ISBLANK(Solicitacao[StatusFidelização]) && Solicitacao[statecodename] = \"Ativo\" && Solicitacao[PrazoFidelizacao] <= TODAY(),\"Em Andamento Atrasado\",\n                    NOT(ISBLANK(Solicitacao[StatusFidelização])) || Solicitacao[statecodename] = \"Resolvido\" && Solicitacao[PrazoFidelizacao] >= TODAY(),\"Finalizado no Prazo\",   \n                    NOT(ISBLANK(Solicitacao[StatusFidelização])) || Solicitacao[statecodename] = \"Resolvido\" && Solicitacao[PrazoFidelizacao] <= TODAY(),\"Finalizado em Atraso\",\n                    BLANK()\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "DataAlteracaoStatusFideliza",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFidelizacao",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\n                IF(\n                    Solicitacao[statecodename] = \"Resolvido\" && ISBLANK(Solicitacao[DataAlteracaoStatusFideliza]),\n                    Solicitacao[DataEncerramentto].[Date],\n                    Solicitacao[DataAlteracaoStatusFideliza]\n                )\n",
                  "columnType": "Calculated"
                },
                {
                  "name": "ConsultorFideliza",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "vize_motivo_solicitacao_tardianame",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "situacao_financeira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Etapa SLA",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nSWITCH(\n    TRUE(),\n    Solicitacao[statecodename] = \"Ativo\" && ISBLANK(Solicitacao[StatusFidelização]), \"1° Etapa\",\n    Solicitacao[statecodename] = \"Ativo\" && Solicitacao[StatusFidelização] = \"Cancelamento\" && Solicitacao[situacao_financeira] = \"Distratado\", \"Falta Finalizar\",\n    Solicitacao[statecodename] = \"Ativo\" && Solicitacao[StatusFidelização] <> BLANK() && Solicitacao[situacao_financeira] <> \"Distratado\", \"Etapa 30 dias\",\n    Solicitacao[statecodename] = \"Ativo\", \"Verificar Atendimento\",\n    Solicitacao[statecodename] = \"Resolvido\", \"Resolvido\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "StatusContato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataUltimoContato",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status SLA",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nSWITCH (\n    TRUE (),\n    Solicitacao[Etapa SLA] = \"1° Etapa\", Solicitacao[Status SLA 1 Etapa (7 dias)],\n    Solicitacao[Etapa SLA] = \"Etapa 30 dias\", Solicitacao[Status SLA Atendimento (30 dias)],\n    Solicitacao[Etapa SLA] = \"Falta Finalizar\", Solicitacao[Status SLA Atendimento (30 dias)],\n    Solicitacao[Etapa SLA] = \"Resolvido\", Solicitacao[Status SLA Atendimento (30 dias)]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status SLA 1 Etapa (2 dias)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nSWITCH(TRUE(),\n    ISBLANK(Solicitacao[Data_Solicitação]), \"Verificar Data Solicitação\",\n    Solicitacao[Prazo Cadastro] >= 0 && Solicitacao[Prazo Cadastro] < 3, \"Dentro SLA\",\n    Solicitacao[Prazo Cadastro] >= 3, \"Fora SLA\",\n    \"Verificar Data Cadastro\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status SLA 1 Etapa (7 dias)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nSWITCH(TRUE(),\n    Solicitacao[Prazo Fidelização] >= 8, \"Fora SLA\",\n    Solicitacao[Prazo Fidelização] >= 0 && Solicitacao[Prazo Fidelização] < 8, \"Dentro SLA\",\n    \"Verificar Atendimento\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status SLA Atendimento (30 dias)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nSWITCH(TRUE(),\n    Solicitacao[Prazo Atendimento] >= 31, \"Fora SLA\",\n    Solicitacao[Prazo Atendimento] >= 0 && Solicitacao[Prazo Fidelização] < 31, \"Dentro SLA\",\n    \"Verificar Atendimento\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Prazo Cadastro",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo Fidelização",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Prazo Atendimento",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "% Eficiencia",
                  "expression": "DIVIDE([Qtd Contenções], Solicitacao[Qtd Fidelização Finalizado])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Cancelamentos StatusFid",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Cancelamento\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Contenções",
                  "expression": "Solicitacao[Qtd Trocas] + Solicitacao[Qtd Contidos Sem Alteração] + Solicitacao[Qtd Renegociações] + Solicitacao[Qtd Reversões TS] ",
                  "isHidden": false
                },
                {
                  "name": "Qtd Solicitações",
                  "expression": "CALCULATE(DISTINCTCOUNT(Solicitacao[Num_Atd]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Finalizados",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, NOT(ISBLANK(Solicitacao[StatusFidelização]))), FILTER(Solicitacao, Solicitacao[statecodename] = \"Resolvido\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Trocas",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Troca\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Reversões TS",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Reversão para TimeShare\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Renegociações",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Renegociação\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Contidos Sem Alteração",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Contido sem Alteração\"))",
                  "isHidden": false
                },
                {
                  "name": "media_fina",
                  "expression": "AVERAGEX(Solicitacao, Solicitacao[Prazo Cadastro Atendimento])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Fidelização Finalizado",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] <> \"Devolvido para Carteira\"))",
                  "isHidden": false
                },
                {
                  "name": "finalizadas",
                  "expression": "\nCALCULATE(\n    CALCULATE(Solicitacao[Qtd Contenções], \n    USERELATIONSHIP(dcalendario[Date],Solicitacao[DataAlteracaoStatusFideliza]))\n)",
                  "isHidden": false
                },
                {
                  "name": "% Eficiencia 1",
                  "expression": "DIVIDE([finalizadas], Solicitacao[Qtd Fidelização Finalizado])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Devolvido Carteira",
                  "expression": "CALCULATE(Solicitacao[Qtd Solicitações], FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Devolvido para Carteira\"))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Databases(\"gavresorts.crm2.dynamics.com\"),\n    CallDB = Fonte{[Name=\"gavresorts\"]}[Data],\n    SQL = \"SELECT#(cr)#(lf)      atd.vize_empreendimentoidname AS [Empreendimento],#(cr)#(lf)      vize_chaveempreendimento + '-'#(cr)#(lf)      + REPLICATE('0', 5 - LEN(atd.vize_contratoidname)) + CAST(atd.vize_contratoidname AS varchar) AS \"\"ChaveVenda\"\",#(cr)#(lf)      atd.ticketnumber AS [Num_Atd],#(cr)#(lf)      FORMAT(atd.vize_datasolicitacaodistrato, 'dd/MM/yyyy') AS [Data_Solicitação],#(cr)#(lf)      CASE#(cr)#(lf)        WHEN atd.vize_dentroprazoname = 'Sim' THEN 'DENTRO'#(cr)#(lf)        WHEN atd.vize_dentroprazoname = 'Não' THEN 'FORA'#(cr)#(lf)      END AS [Tipo_Solicitação],#(cr)#(lf)      sc.createdbyname AS [UsrCad],#(cr)#(lf)      DATEADD(HOUR, -3, atd.createdon) AS [CadastroEm],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_prazoatendimento) AS [PrazoAtendimento],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_prazoconclusao) AS [PrazoConclusãoProcesso],#(cr)#(lf)      DATEADD(HOUR, -3, sc.completedon) AS [FinalizadoEm],#(cr)#(lf)      atd.vize_statusprimeiroatendimentoname AS [StatusFidelização],#(cr)#(lf)      atd.vize_statusfidelizacaoalteradoporname [ConsultorFideliza],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_prazofidelizacao) AS [PrazoFidelizacao],#(cr)#(lf)#(tab)  DATEADD(HOUR, -3, atd.vize_dataalteracaostatusfidelizacao) AS [DataAlteracaoStatusFideliza],#(cr)#(lf)      atd.vize_estagioativobpf AS [EstagioAtivo],#(cr)#(lf)      atd.subjectid,#(cr)#(lf)      atd.subjectidname AS [Assunto],#(cr)#(lf)      ps.stagecategory AS [IdCategoriaEstagio],#(cr)#(lf)      ps.stagecategoryname AS [CategoriaEstagio],#(cr)#(lf)      DATEADD(HOUR, -3, sc.activestagestartedon) AS [DataAtivaçãoEstagio],#(cr)#(lf)      atd.vize_diasaberto,#(cr)#(lf)      sc.bpf_duration,#(cr)#(lf)      sc.bpf_incidentid,#(cr)#(lf)      sc.bpf_incidentidname,#(cr)#(lf)      sc.bpf_name AS [NomeProcesso],#(cr)#(lf)      sc.businessprocessflowinstanceid,#(cr)#(lf)      sc.modifiedbyname AS [AlteradoPor],#(cr)#(lf)      atd.owneridname AS [Responsavel],#(cr)#(lf)      DATEADD(HOUR, -3, sc.modifiedon) AS [DataAlteracao],#(cr)#(lf)      sc.organizationidname AS [Organizacao],#(cr)#(lf)#(tab)  CASE #(cr)#(lf)#(tab)#(tab)WHEN atd.contactidname IS NOT NULL THEN atd.contactidname#(cr)#(lf)#(tab)#(tab)ELSE atd.accountidname#(cr)#(lf)#(tab)  END AS NomeCliente,#(cr)#(lf)      atd.deactivatedon AS [CanceladoEm],#(cr)#(lf)      atd.description AS [Descricao],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_backofficeconcluidoem) AS [DataConclusaoBackOffice],#(cr)#(lf)      atd.vize_backofficefinalizadoporname AS [BackConcluidoPor],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_prazobackoffice) AS [PrazoBackOffice],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_comercialconcluidoem) AS [DataConclusaoComercial],#(cr)#(lf)      atd.vize_comercialfinalizadoporname AS [ComercialConcluidoPor],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_prazocomercial) AS [PrazoComercial],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_dataencerramento) AS [DataEncerramentto],#(cr)#(lf)      atd.vize_motivoidname AS [Motivo],#(cr)#(lf)      atd.vize_satifeitocomatendimentoname AS [SatisfeitoAtend],#(cr)#(lf)      atd.vize_statusdocumentoname AS [StatusDocumento],#(cr)#(lf)      atd.vize_statusslabackofficename AS [StatusSLABack],#(cr)#(lf)      atd.vize_statusslacomercialname AS [StatusSLAComercial],#(cr)#(lf)      atd.processid,#(cr)#(lf)      atd.statecodename,#(cr)#(lf)      atd.statuscodename,#(cr)#(lf)      atd.vize_statuscontatoname AS [StatusContato],#(cr)#(lf)      DATEADD(HOUR, -3, atd.vize_dataultimocontato) AS [DataUltimoContato],#(cr)#(lf)      atd.vize_motivo_solicitacao_tardianame,#(cr)#(lf)      vd.vize_situcaofinanceiraname AS [situacao_financeira],#(cr)#(lf)      sc.traversedpath AS [FluxoProcesso]#(cr)#(lf) FROM Incident AS atd#(cr)#(lf) LEFT JOIN contact AS ct#(cr)#(lf)   ON ct.contactid = atd.contactid#(cr)#(lf) LEFT JOIN vize_contrato AS vd#(cr)#(lf)   ON vd.vize_contratoid = atd.vize_contratoid#(cr)#(lf) LEFT JOIN vize_empreendimento AS ep#(cr)#(lf)   ON ep.vize_empreendimentoid = atd.vize_empreendimentoid#(cr)#(lf) LEFT JOIN (#(cr)#(lf)       SELECT * FROM vize_bpf_b1ea8dce7ebd47d989451e03ff647e96#(cr)#(lf)        UNION #(cr)#(lf)       SELECT * FROM vize_bpf_55037271618a43dcae23703eb985aa5e#(cr)#(lf)     ) AS sc#(cr)#(lf)   ON atd.incidentid = sc.bpf_incidentid#(cr)#(lf) LEFT JOIN processstage AS ps#(cr)#(lf)   ON sc.activestageid = ps.processstageid#(cr)#(lf)WHERE atd.subjectid IN ('DD241289-9545-EE11-BE6F-002248DFB630','38FA63F2-C1E2-EC11-BB3C-002248D302D7', '9C98F729-D9F3-EC11-BB3C-000D3A88FED4', '03B1814A-1FFD-EC11-82E5-000D3A88F8FF','F54BA544-4434-EE11-BDF4-000D3AC1D450')#(cr)#(lf)  AND atd.statecodename <> 'Cancelado'\",\n    Consulta = Value.NativeQuery(CallDB, SQL, null, [EnableFolding=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"Num_Atd\", Int64.Type}, {\"CadastroEm\", type date}, {\"PrazoAtendimento\", type date}, {\"PrazoConclusãoProcesso\", type date}, {\"FinalizadoEm\", type date}, {\"PrazoFidelizacao\", type date}, {\"DataAtivaçãoEstagio\", type date}, {\"DataAlteracao\", type date}, {\"CanceladoEm\", type date}, {\"PrazoBackOffice\", type date}, {\"DataEncerramentto\", type date}, {\"Data_Solicitação\", type date}, {\"DataAlteracaoStatusFideliza\", type date}}),\n    #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Tipo Alterado\",{\"Empreendimento\", \"ChaveVenda\", \"Num_Atd\", \"Data_Solicitação\", \"CadastroEm\", \"PrazoAtendimento\", \"PrazoFidelizacao\", \"PrazoConclusãoProcesso\", \"UsrCad\", \"Tipo_Solicitação\", \"FinalizadoEm\", \"StatusFidelização\", \"EstagioAtivo\", \"subjectid\", \"Assunto\", \"IdCategoriaEstagio\", \"CategoriaEstagio\", \"DataAtivaçãoEstagio\", \"vize_diasaberto\", \"bpf_duration\", \"bpf_incidentid\", \"bpf_incidentidname\", \"NomeProcesso\", \"businessprocessflowinstanceid\", \"AlteradoPor\", \"Responsavel\", \"DataAlteracao\", \"Organizacao\", \"NomeCliente\", \"CanceladoEm\", \"Descricao\", \"DataConclusaoBackOffice\", \"BackConcluidoPor\", \"PrazoBackOffice\", \"DataConclusaoComercial\", \"ComercialConcluidoPor\", \"PrazoComercial\", \"DataEncerramentto\", \"Motivo\", \"SatisfeitoAtend\", \"StatusDocumento\", \"StatusSLABack\", \"StatusSLAComercial\", \"processid\", \"statecodename\", \"statuscodename\", \"FluxoProcesso\"}),\n    #\"Inserted Text Before Delimiter\" = Table.AddColumn(#\"Colunas Reordenadas\", \"Empresa\", each Text.BeforeDelimiter([ChaveVenda], \"-\"), type text),\n    #\"Prazo Cadastro Inserido\" = Table.AddColumn(#\"Inserted Text Before Delimiter\", \"Prazo Cadastro\", each \nif [Data_Solicitação] = null then null \nelse if [Data_Solicitação] > [CadastroEm] then -ContarDiasUteis([CadastroEm], [Data_Solicitação])\nelse ContarDiasUteis([Data_Solicitação], [CadastroEm])),\n    #\"Prazo Fidelização Inserido\" = Table.AddColumn(#\"Prazo Cadastro Inserido\", \"Prazo Fidelização\", each \nif [statecodename] = \"Ativo\" and [StatusFidelização] = null then ContarDiasUteis([CadastroEm], Date.From(DateTime.LocalNow()))\nelse if [statecodename] = \"Ativo\" and [StatusFidelização] <> null then \n if [CadastroEm] = null or [DataAlteracaoStatusFideliza] = null then null\n else ContarDiasUteis([CadastroEm], [DataAlteracaoStatusFideliza])\nelse if [statecodename] = \"Resolvido\" then \n if [DataAlteracaoStatusFideliza] = null then null\n else ContarDiasUteis([CadastroEm], [DataAlteracaoStatusFideliza])\nelse \"Verificar Atendimento\"),\n    #\"Prazo Atendimento Inserido\" = Table.AddColumn(#\"Prazo Fidelização Inserido\", \"Prazo Atendimento\", each \nif [Data_Solicitação] = null then null\nelse if [statecodename] = \"Ativo\" then \n if [Data_Solicitação] > Date.From(DateTime.LocalNow()) then -ContarDiasUteis(Date.From(DateTime.LocalNow()), [Data_Solicitação])\n else ContarDiasUteis([Data_Solicitação], Date.From(DateTime.LocalNow()))\nelse if [statecodename] = \"Resolvido\" then \n if [DataEncerramentto] = null then null\n else if [Data_Solicitação] > [DataEncerramentto] then -ContarDiasUteis([DataEncerramentto], [Data_Solicitação])\n else ContarDiasUteis([Data_Solicitação], [DataEncerramentto])\nelse \"Verificar Atendimento\"),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Prazo Atendimento Inserido\",{{\"Empresa\", Int64.Type}, {\"Prazo Cadastro\", Int64.Type}, {\"Prazo Fidelização\", Int64.Type}, {\"Prazo Atendimento\", Int64.Type}})\nin\n    #\"Tipo Alterado1\""
                }
              ]
            },
            {
              "name": "dcalendario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Date",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                },
                {
                  "name": "mes_nome",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "FORMAT(dcalendario[Date], \"mmm\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "mes_num",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "MONTH(dcalendario[Date])",
                  "columnType": "Calculated"
                },
                {
                  "name": "ano",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "YEAR(dcalendario[Date])",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "CALENDAR(MIN(Solicitacao[Data_Solicitação]),MAX(Solicitacao[PrazoConclusãoProcesso]))"
                }
              ]
            },
            {
              "name": "datualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualização",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #table({\"Ultima Atualização\"},{{DateTime.LocalNow()}})\nin\n    Fonte"
                }
              ]
            },
            {
              "name": "Empresas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cnpj",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_logradouro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_cidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_uf",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "email",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento_completo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "regiao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_lancamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "fonte_origem",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_pessoa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_numero",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_bairro",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "end_cep",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "telefone",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "grupo_empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "negocio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_entrega",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "filial_matriz",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Value.NativeQuery(PostgreSQL.Database(\"172.16.0.10\", \"dw\"), \"SELECT * FROM corporativo.empresas\", null, [EnableFolding=true])\nin\n    Fonte"
                }
              ]
            },
            {
              "name": "VendaDistrato",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_manutencao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_manutencao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_tipo_manutencao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_manutencao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "num_nova_venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cadastrou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_manutencao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_status_aprovacao",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_aprovacao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_aprovacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_aprovou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "num_distrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "aditivo",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_calculo",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_categ_distrato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "categoria_distrato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_distrato",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_venda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_cessao",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_total_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "dev_porc_min",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "porc_min_rec",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_distrato",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "gera_processo_pagto",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "num_processo_pagto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "qtd_parcela_devolver",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "frequencia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Financeiro.data_pagamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Financeiro.status_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Financeiro.valor_doc_fiscal",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Distratos",
                  "expression": "DISTINCTCOUNT(VendaDistrato[chave_venda])",
                  "isHidden": false
                },
                {
                  "name": "Valor Distrato (Gerado)",
                  "expression": "CALCULATE(SUM(VendaDistrato[valor_distrato]), VendaDistrato[gera_processo_pagto]=TRUE())",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT #(cr)#(lf)       *#(cr)#(lf)  FROM pos_vendas.manutencoes_vendas#(cr)#(lf) WHERE tipo_manutencao = 'Distrato'\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Consulta,{{\"data_cadastro\", type date}, {\"data_manutencao\", type date}, {\"data_aprovacao\", type date}, {\"data_calculo\", type date}, {\"data_vencimento\", type date}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Changed Type\", {\"cod_empresa\", \"cod_obra\", \"num_processo_pagto\"}, Financeiro, {\"cod_empresa\", \"cod_obra\", \"processo\"}, \"Financeiro\", JoinKind.LeftOuter),\n    #\"Financeiro Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Financeiro\", {\"data_pagamento\", \"status_parcela\", \"valor_doc_fiscal\"}, {\"Financeiro.data_pagamento\", \"Financeiro.status_parcela\", \"Financeiro.valor_doc_fiscal\"}),\n    #\"Duplicatas Removidas\" = Table.Distinct(#\"Financeiro Expandido\", {\"chave_manutencao\"})\nin\n    #\"Duplicatas Removidas\""
                }
              ]
            },
            {
              "name": "VendaDistratoDesconto",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_manutencao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "num_desconto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_operacao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "desconto_sobre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "porc_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_base",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "coeficiente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "descricao_desconto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_desconto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT #(cr)#(lf)       *#(cr)#(lf)  FROM pos_vendas.distratos_descontos\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            },
            {
              "name": "Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_proposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_cliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_venda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_quitacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_unidade",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_venda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_acrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "prazo_venda_cancel_mes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "prazo_venda_cancel_dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_prazo_cancel_dia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_fim_contrato",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "prazo_fim_contrato_mes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_fim_contrato_mes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_venda_cedida",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda_cedida",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_recebido_entrada",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_recebido_saldo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_recebido",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_devolvido",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_retido",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Clientes",
                  "expression": "DISTINCTCOUNT(Vendas[cod_cliente])",
                  "isHidden": false
                },
                {
                  "name": "Valor Retido",
                  "expression": "CALCULATE(SUM(Vendas[valor_retido]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Devolvido",
                  "expression": "CALCULATE(SUM(Vendas[valor_devolvido]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido",
                  "expression": "\nCALCULATE(SUM(Vendas[valor_recebido]))",
                  "isHidden": false
                },
                {
                  "name": "VlrVendaContido",
                  "expression": "CALCULATE(SUMX(Vendas, Vendas[valor_venda]), FILTER(Solicitacao, Solicitacao[StatusFidelização] = \"Contido sem Alteração\" || Solicitacao[StatusFidelização] = \"Renegociação\" || Solicitacao[StatusFidelização] = \"Reversão para TimeShare\" || Solicitacao[StatusFidelização] = \"Troca\"))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Vendas",
                  "expression": "CALCULATE(DISTINCTCOUNT(Vendas[chave_venda]))",
                  "isHidden": false
                },
                {
                  "name": "Qtd Vendas (Calendario)",
                  "expression": "CALCULATE(Vendas[Qtd Vendas], USERELATIONSHIP(Vendas[data_venda], dcalendario[Date]))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT #(cr)#(lf)       vd.*,#(cr)#(lf)       prc.valor_recebido_entrada, #(cr)#(lf)       prc.valor_recebido_saldo, #(cr)#(lf)       prc.valor_recebido, #(cr)#(lf)       mnt.valor_devolvido, #(cr)#(lf)       COALESCE(prc.valor_recebido, 0) - COALESCE(mnt.valor_devolvido, 0) AS valor_retido#(cr)#(lf)  FROM comercial.vendas AS vd#(cr)#(lf)  LEFT JOIN (#(cr)#(lf)       SELECT chave_venda,#(cr)#(lf)              SUM(CASE WHEN tipo_parcela = 'E' THEN valor_parcela ELSE 0 END) AS valor_recebido_entrada,#(cr)#(lf)              SUM(CASE WHEN tipo_parcela IN ('SI','P') THEN valor_parcela ELSE 0 END) AS valor_recebido_saldo,#(cr)#(lf)              SUM(valor_parcela) AS valor_recebido#(cr)#(lf)         FROM pos_vendas.parcelas#(cr)#(lf)        WHERE status_parcela IN ('Recebida','A Compensar')#(cr)#(lf)        GROUP BY chave_venda#(cr)#(lf)     ) AS prc#(cr)#(lf)    ON prc.chave_venda = vd.chave_venda#(cr)#(lf)  LEFT JOIN (#(cr)#(lf)       SELECT mnt.chave_venda,#(cr)#(lf)              SUM(dbs.valor_total_liquido) AS valor_devolvido#(cr)#(lf)         FROM pos_vendas.manutencoes_vendas AS mnt#(cr)#(lf)         LEFT JOIN financeiro.desembolso AS dbs#(cr)#(lf)           ON dbs.cod_empresa = mnt.cod_empresa#(cr)#(lf)          AND dbs.cod_obra = mnt.cod_obra#(cr)#(lf)          AND dbs.processo = mnt.num_processo_pagto#(cr)#(lf)        WHERE mnt.tipo_manutencao = 'Distrato'#(cr)#(lf)          AND mnt.num_processo_pagto IS NOT null#(cr)#(lf)        GROUP BY mnt.chave_venda#(cr)#(lf)     ) AS mnt#(cr)#(lf)    ON mnt.chave_venda = vd.chave_venda#(cr)#(lf)--  WHERE vd.cod_obra NOT IN ('SLPTS','R0011')#(cr)#(lf)--    AND vd.status_venda = 'Cancelada'\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            },
            {
              "name": "Proposta",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "chave_proposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_produto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "proposta",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "id_casal",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_prospect",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cpf_prospect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "prospect",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_proposta",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_unidade",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_acrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_desconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_venda",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_proposta",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cadastro",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cadastrou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_expiracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_cancelada",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_cancelou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_confirmada",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_confirmou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vendida",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "usr_vendeu",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "origem_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "sala_vendas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "chave_unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_carga",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(cr)#(lf)       ppt.*,#(cr)#(lf)       ca.sala_vendas#(cr)#(lf)  FROM comercial.propostas AS ppt#(cr)#(lf)  LEFT JOIN comercial.casal_atendimento AS ca#(cr)#(lf)    ON ppt.id_casal = ca.id_casal\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Changed Type\" = Table.TransformColumnTypes(Consulta,{{\"data_proposta\", type date}})\nin\n    #\"Changed Type\""
                }
              ]
            },
            {
              "name": "Financeiro",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "processo",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "item_processo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_pagamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "status_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_doc_fiscal",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "mes_planej",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "cod_fornecedor",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "nominal_proc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Valor Distrato",
                  "expression": "SUM(Financeiro[valor_doc_fiscal])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT#(cr)#(lf)      fd.cod_empresa,#(cr)#(lf)      fd.cod_obra,#(cr)#(lf)      fd.processo,#(cr)#(lf)      fd.item_processo,#(cr)#(lf)      fd.data_pagamento,#(cr)#(lf)      fd.status_parcela,#(cr)#(lf)      fd.valor_doc_fiscal,#(cr)#(lf)      fd.mes_planej,#(cr)#(lf)      fd.cod_fornecedor,#(cr)#(lf)      fd.nominal_proc#(cr)#(lf) FROM financeiro.desembolso AS fd#(cr)#(lf)WHERE cod_tipo_processo = 17#(cr)#(lf)  --AND cod_empresa IN (10,13,18,35,36,39,41,42,43,44,80,94,99)#(cr)#(lf)  AND fd.data_pagamento >= '2023-01-01'\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true])\nin\n    Consulta"
                }
              ]
            },
            {
              "name": "Fluxo",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "FluxoProcesso",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "CalculatedTableColumn"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "DISTINCT(Solicitacao[FluxoProcesso])"
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "ContarDiasUteis",
              "expression": "(Data_Inicio as date, Data_Fim as date) as number =>\nlet\n    Dias = List.Dates(Data_Inicio, Number.From(Data_Fim - Data_Inicio), #duration(1,0,0,0)),\n    ContarDiasUteis = List.Count(List.Select(Dias, each Date.DayOfWeek(_, Day.Monday) < 5))\nin\n    ContarDiasUteis"
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "times": [
              "08:00",
              "11:30",
              "17:00",
              "18:00"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2023-04-17T18:52:33.15",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "bb2fd829-dcc0-4243-9a4f-ef005f8e88fa",
          "name": "Gestão de Carteira",
          "tables": [
            {
              "name": "Pendencias",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Status_pen",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Obs_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Pendência",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Pendencias'[Status_pen]),\n  \"(Em branco)\",\n  'Pendencias'[Status_pen] IN {3},\n  \"Cancelada\",\n  'Pendencias'[Status_pen] IN {0},\n  \"Pendente\",\n  'Pendencias'[Status_pen] IN {1},\n  \"Resolvida\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "NumVtwf_pwfp",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "Tempo Atendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "DATEDIFF('Pendencias'[DataAtivacao],TODAY(),DAY)",
                  "columnType": "Calculated"
                },
                {
                  "name": "CodCateg_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumAtendimento",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrResponAtendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCancelou",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Cliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusAtendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descricao",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataResolucao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataPrevista",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "HoraAviso",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAtivacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEtapa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrRespon_pen",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrResponPendencia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Num_pen",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataLancamento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Identificador_pwfp",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Atendimentos",
                  "expression": "DISTINCTCOUNT(Pendencias[NumAtendimento])",
                  "isHidden": false
                },
                {
                  "name": "Renegociações",
                  "expression": "\nCALCULATE(DISTINCTCOUNT(Pendencias[NumAtendimento]),Pendencias[CodCateg_pen]=\"04.05\")",
                  "isHidden": false
                },
                {
                  "name": "Atualizações de Parcela",
                  "expression": "\nCALCULATE(DISTINCTCOUNT(Pendencias[NumAtendimento]),Pendencias[CodCateg_pen]=\"04.13\")",
                  "isHidden": false
                },
                {
                  "name": "Redução de Contratos",
                  "expression": "\nCALCULATE(DISTINCTCOUNT(Pendencias[NumAtendimento]),Pendencias[CodCateg_pen]=\"04.14\")",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\", [Query=\"SELECT * FROM VwPendencia#(lf)--WHERE CodCateg_pen IN ('04.05', '04.13', '04.14')\", CreateNavigationProperties=false]),\n    #\"Consultas Mescladas\" = Table.NestedJoin(Fonte,{\"NumVtwf_pwfp\"},Solicitações,{\"NumVtwf_atd\"},\"Solicitações\",JoinKind.Inner),\n    #\"Solicitações Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Solicitações\", {\"NumAtendimento\", \"UsrResponAtendimento\", \"Cliente\", \"Venda\", \"ChaveUnidVenda\", \"UsrCancelou\", \"DataCad\", \"Empreendimento\", \"StatusAtendimento\"}, {\"NumAtendimento\", \"UsrResponAtendimento\", \"Cliente\", \"Venda\", \"ChaveUnidVenda\", \"UsrCancelou\", \"DataCad\", \"Empreendimento\", \"StatusAtendimento\"}),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"Solicitações Expandido\", {{\"UsrResponPendencia\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"UsrResponPendencia\", Text.Proper, type text}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "CategoriasDeComentario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Codigo_cger",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Desc_cger",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_CategoriasDeComentario = Fonte{[Schema=\"dbo\",Item=\"CategoriasDeComentario\"]}[Data],\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(dbo_CategoriasDeComentario,{\"Codigo_cger\", \"Desc_cger\"}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Outras Colunas Removidas\",{{\"Desc_cger\", Text.Proper, type text}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "dAtualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualização",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #table({\"Ultima Atualização\"},{{DateTime.LocalNow()-#duration(0,3,0,0)}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualização\", type datetime}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Vendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Unidade",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorVenda",
                  "dataType": "Double",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "DataVenda",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCessao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCancel",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": true,
                  "columnType": "Data"
                },
                {
                  "name": "idContrato",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Vendas'[CodEmpresa]),\n  \"(Em branco)\",\n  'Vendas'[CodEmpresa] IN {35},\n  \"Beach\",\n  'Vendas'[CodEmpresa] IN {26},\n  \"Condomínio\",\n  'Vendas'[CodEmpresa] IN {13},\n  \"Exclusive\",\n  'Vendas'[CodEmpresa] IN {10},\n  \"Park\",\n  'Vendas'[CodEmpresa] IN {41},\n  \"Porto\",\n  'Vendas'[CodEmpresa] IN {43},\n  \"Porto 2\",\n  'Vendas'[CodEmpresa] IN {18},\n  \"Premium\",\n  'Vendas'[CodEmpresa] IN {42},\n  \"Pyrenéus\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "ChaveUnidVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveUnidCliente",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelMês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoVendaCancelDia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaPrazoCancelDia",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFimContrato",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PrazoFimContratoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "FaixaFimContratoMes",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVendaOcor",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodVendedor",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Qtd Vendas",
                  "expression": "DISTINCTCOUNT(Vendas[ChaveVenda])",
                  "isHidden": false
                },
                {
                  "name": "Vlr Venda",
                  "expression": "SUM(Vendas[ValorVenda])",
                  "isHidden": false
                },
                {
                  "name": "Vendas Canceladas",
                  "expression": "\n-CALCULATE([Qtd Vendas],\nUSERELATIONSHIP(Vendas[DataCancel],'Calendário (Atendimento)'[DataAtendimento]),\nVendas[StatusVenda]=\"Cancelada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Quitadas",
                  "expression": "CALCULATE([Qtd Vendas], Vendas[StatusVenda]=\"Quitada\")",
                  "isHidden": false
                },
                {
                  "name": "Vendas Ativas",
                  "expression": "\nCALCULATE(CALCULATE([Qtd Vendas]),\n    FILTER(ALLEXCEPT(Vendas,Vendas[Empreendimento]),Vendas[DataVenda]<=MAX('Calendário (Atendimento)'[DataAtendimento])))\n-CALCULATE(CALCULATE(DISTINCTCOUNT([ChaveVenda]),\n    FILTER(FILTER(ALLEXCEPT(Vendas,Vendas[Empreendimento]),Vendas[DataCancel]<=MAX('Calendário (Atendimento)'[DataAtendimento])),\n        Vendas[StatusVenda]=\"Cancelada\")),\n    USERELATIONSHIP(Vendas[DataCancel],'Calendário (Atendimento)'[DataAtendimento]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Venda",
                  "expression": "CALCULATE(SUM(Vendas[ValorVenda]),CROSSFILTER(Pendencias[ChaveUnidVenda],Vendas[ChaveUnidVenda],Both))",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_VwVendas = Fonte{[Schema=\"dbo\",Item=\"VwVendas\"]}[Data],\n    #\"Chave-Cliente Inserida\" = Table.AddColumn(dbo_VwVendas, \"ChaveUnidCliente\", each Text.Combine({[ChaveUnidade], Text.From([CodCliente], \"pt-BR\")}, \"-\"), type text),\n    #\"Coluna Mesclada Inserida1\" = Table.AddColumn(#\"Chave-Cliente Inserida\", \"ChaveVendaOcor\", each \"VENDAS \" & Text.Combine({Text.From([CodEmpresa]), [CodObra], Text.From([Venda], \"pt-BR\")}, \"-\")),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Coluna Mesclada Inserida1\",{\"CodObra\", \"CodProduto\", \"CodPerson\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"DataVenda\", type date}, {\"DataCessao\", type date}, {\"DataCancel\", type date}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Tipo Alterado\", \"ChaveUnidVenda\", each Text.Combine({[ChaveUnidade], Text.PadStart(Text.From([Venda], \"pt-BR\"),5,\"0\")}, \"-\"), type text)\nin\n    #\"Coluna Mesclada Inserida\""
                }
              ]
            },
            {
              "name": "Calendário",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "DataReferência",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"DataReferência\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"DataReferência\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "Ano-Mês",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ano-Mês",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.AddDays(Date.EndOfMonth(DateTime.LocalNow()),1))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Nome do Mês Inserido\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Mês\", Text.Proper}}),\n    #\"Coluna Mesclada Inserida\" = Table.AddColumn(#\"Colocar Cada Palavra Em Maiúscula\", \"Ano/Mês\", each Text.Combine({Text.From([Mês nº], \"pt-BR\"), Text.From([Ano], \"pt-BR\")}, \"/\")),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Coluna Mesclada Inserida\",{{\"Ano/Mês\", type date}}),\n    #\"Ano/Mês1\" = #\"Tipo Alterado1\"[#\"Data\"]\nin\n    #\"Ano/Mês1\""
                }
              ]
            },
            {
              "name": "Calendário (Atendimento)",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "DataAtendimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(Date.EndOfMonth(DateTime.LocalNow()))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Dia da Semana Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Personalização Adicionada\",{{\"Column1\", \"DataAtendimento\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"DataAtendimento\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}})\nin\n    #\"Colocar Cada Palavra Em Maiúscula\""
                }
              ]
            },
            {
              "name": "ValIdx",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Idx_vi",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data_vi",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Valor_vi",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataFim_vi",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoCadastro_vi",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_ValIdx = Fonte{[Schema=\"dbo\",Item=\"ValIdx\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(dbo_ValIdx, each ([Idx_vi] = \"IGPM\" or [Idx_vi] = \"INCC\")),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Linhas Filtradas\",{\"Idx_vi\", \"Data_vi\", \"Valor_vi\", \"DataFim_vi\", \"TipoCadastro_vi\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Outras Colunas Removidas\",{{\"Data_vi\", type date}, {\"DataFim_vi\", type date}}),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Tipo Alterado\",{{\"Data_vi\", Order.Descending}, {\"Idx_vi\", Order.Descending}})\nin\n    #\"Linhas Classificadas\""
                }
              ]
            },
            {
              "name": "OcorrenciaVendas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Num_ocv",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumDoc_ocv",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Obs_ocv",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad_ocv",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_ocv",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status_ocv",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumVtwf_ocv",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumOco_ocv",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empresa_ocv",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descr_oco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ObraVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Obra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ChaveVenda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_OcorrenciaVinculo = Fonte{[Schema=\"dbo\",Item=\"OcorrenciaVinculo\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(dbo_OcorrenciaVinculo, each Text.StartsWith([NumDoc_ocv], \"VENDAS \")),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Linhas Filtradas\", {\"Num_ocv\"}, Ocorrencia, {\"Num_oco\"}, \"Ocorrencia\", JoinKind.LeftOuter),\n    #\"Ocorrencia Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Ocorrencia\", {\"Descr_oco\"}, {\"Descr_oco\"}),\n    #\"Texto Inserido Após o Delimitador\" = Table.AddColumn(#\"Ocorrencia Expandido\", \"Texto Após o Delimitador\", each Text.AfterDelimiter([NumDoc_ocv], \" \"), type text),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Texto Inserido Após o Delimitador\",{{\"Texto Após o Delimitador\", \"ObraVenda\"}}),\n    #\"Texto Inserido Antes do Delimitador\" = Table.AddColumn(#\"Colunas Renomeadas\", \"Texto Antes do Delimitador\", each Text.BeforeDelimiter([ObraVenda], \"-\"), type text),\n    #\"Colunas Renomeadas1\" = Table.RenameColumns(#\"Texto Inserido Antes do Delimitador\",{{\"Texto Antes do Delimitador\", \"Obra\"}}),\n    #\"Texto Inserido Após o Delimitador1\" = Table.AddColumn(#\"Colunas Renomeadas1\", \"Texto Após o Delimitador\", each Text.AfterDelimiter([ObraVenda], \"-\"), type text),\n    #\"Colunas Renomeadas2\" = Table.RenameColumns(#\"Texto Inserido Após o Delimitador1\",{{\"Texto Após o Delimitador\", \"Venda\"}}),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Colunas Renomeadas2\", \"ChaveVenda\", each Text.Combine({Text.From([Empresa_ocv]), [Obra], Text.From([Venda], \"pt-BR\")}, \"-\")),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Personalização Adicionada\",{{\"ChaveVenda\", type text}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Boletos",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "ChaveParcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodEmpresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodObra",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Venda",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCliente",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Parcela",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ParcGer",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NumParcPrc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "EmpresaBoleto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Banco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ContaBoleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Convenio",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NossoNumero",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NN",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodBol",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "PadraoCobranca",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrAlt",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataExclusao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataGeracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataEmissao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVencBoleto",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DiasAtraso",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorParcela",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDescParc",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDesconto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorDeducao",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorMulta",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorAcrescimo",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorCobrado",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorBoleto",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "LinhaDigitavel",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusCarteira",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusBoleto",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusBanco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataAlteracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Agrupado",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Antecipado",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Residuo",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "BoletoParcial",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "TipoCobranca",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "EnviaEmailProUAU",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "BoletoEnviado",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataEnvioEmail",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataReenvioEmail",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "OrigemBoleto",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ocorrencia_bcho",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "StatusParc",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "ValorPago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataVencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataRecebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataConciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Parcelas",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "NomeUsuario",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vencido",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Status Parcela Real",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Boletos'[CodEmpresa]),\n  \"(Em branco)\",\n  'Boletos'[CodEmpresa] IN {35},\n  \"Beach\",\n  'Boletos'[CodEmpresa] IN {13},\n  \"Exclusive\",\n  'Boletos'[CodEmpresa] IN {10},\n  \"Park\",\n  'Boletos'[CodEmpresa] IN {41},\n  \"Porto Alto\",\n  'Boletos'[CodEmpresa] IN {18},\n  \"Premium\",\n  'Boletos'[CodEmpresa] IN {42},\n  \"Pyrenéus\",\n  \"Outro\"\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "Status Boleto",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "SWITCH(\n  TRUE,\n  ISBLANK('Boletos'[Status Parcela Real]),\n  \"(Em branco)\",\n  'Boletos'[Status Parcela Real] IN {\"A Receber\",\n    \"Vencido\"},\n  \"A Receber\",\n  'Boletos'[Status Parcela Real] IN {\"Excluida\",\n    \"Substituido\"},\n  \"Excluida\",\n  'Boletos'[Status Parcela Real] IN {\"Recebida\"},\n  \"Recebida\",\n  'Boletos'[Status Parcela Real]\n)",
                  "columnType": "Calculated"
                },
                {
                  "name": "StatusBol",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [
                {
                  "name": "Eficiência Cobrança",
                  "expression": "DIVIDE([Valor Recebido],[Valor Total])",
                  "isHidden": false
                },
                {
                  "name": "Valor Total",
                  "expression": "\nCALCULATE(SUM(Boletos[ValorParcela]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido",
                  "expression": "\nCALCULATE([Valor Total],Boletos[Status Boleto]=\"Recebida\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Receber",
                  "expression": "\nCALCULATE([Valor Total],Boletos[Status Boleto]=\"A Receber\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Excluidos",
                  "expression": "\nCALCULATE([Valor Total],Boletos[Status Boleto]=\"Excluida\")",
                  "isHidden": false
                },
                {
                  "name": "Qtd Parcelas Geradas",
                  "expression": "DISTINCTCOUNT(Boletos[ParcGer])",
                  "isHidden": false
                },
                {
                  "name": "Qtd Boletos Gerados",
                  "expression": "DISTINCTCOUNT(Boletos[NossoNumero])",
                  "isHidden": false
                },
                {
                  "name": "Eficiência Cobrança (Receber)",
                  "expression": "DIVIDE([Valor Recebido],[Valor Receber]+[Valor Recebido])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = fn_GAV_Boletos(DataRef),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(Fonte, {{\"NomeUsuario\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"NomeUsuario\", Text.Proper, type text}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colocar Cada Palavra Em Maiúscula\",{{\"DataExclusao\", type date}, {\"DataGeracao\", type date}}),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Tipo Alterado\", \"Vencido\", each if Duration.Days([DataVencimento] - [DataGeracao]) > 0 then 0 else 1),\n    #\"Personalização Adicionada1\" = Table.AddColumn(#\"Personalização Adicionada\", \"Status Parcela Real\", each if [StatusBoleto] = 1 then \"Excluida\" else if [StatusBoleto] = 0 then if [DataVencBoleto] >= Date.From(DateTime.LocalNow()) then \"A Receber\" else \"Vencido\" else (if [StatusBoleto] = 2 and ([Ocorrencia_bcho] = \"05\" or [Ocorrencia_bcho] = \"06\") then \"Recebida\" else \"Substituido\"))\nin\n    #\"Personalização Adicionada1\""
                }
              ]
            },
            {
              "name": "Departamentos",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "usr_login",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Nome_usr",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_alteracao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "departamento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\", [Query=\"SELECT us.Login_usr AS usr_login,#(lf)       us.Nome_usr,#(lf)       CAST(UsrLot.DataAlt_Ul AS date) AS data_alteracao,#(lf)       dp.Descr_cad AS departamento#(lf)  FROM usuarios AS us#(lf) INNER JOIN UsrLot#(lf)       ON us.Login_usr = UsrLot.User_ul#(lf)  LEFT JOIN Departamentos AS dp#(lf)       ON dp.Cod_cad = UsrLot.Depto_ul\", CreateNavigationProperties=false]),\n    #\"Texto em Maiúscula\" = Table.TransformColumns(Fonte,{{\"usr_login\", Text.Upper, type text}, {\"Nome_usr\", Text.Upper, type text}, {\"departamento\", Text.Upper, type text}})\nin\n    #\"Texto em Maiúscula\""
                }
              ]
            },
            {
              "name": "Ocorrencia",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Num_oco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Descr_oco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "CodCateg_oco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "UsrCad_oco",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "DataCad_oco",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AtInat_oco",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_Ocorrencia = Fonte{[Schema=\"dbo\",Item=\"Ocorrencia\"]}[Data]\nin\n    dbo_Ocorrencia"
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "Solicitações",
              "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\", [Query=\"SELECT * FROM VwAtendimento#(lf)WHERE DataCadastro >= '01/01/2019'#(lf)#(tab)--AND CodCateg IN ('04.05', '04.13', '04.14')\", CreateNavigationProperties=false]),\n    #\"Data Inserida\" = Table.AddColumn(Fonte, \"DataCad\", each DateTime.Date([DataCadastro]), type date),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Data Inserida\", \"Empreendimento\", each if [Empresa_atd] = 10 then \"Park\" else if [Empresa_atd] = 13 then \"Exclusive\" else if [Empresa_atd] = 18 then \"Premium\" else if [Empresa_atd] = 41 then \"Porto\" else if [Empresa_atd] = 42 then \"Pyrenéus\" else if [Empresa_atd] = 35 then \"Beach\" else if [Empresa_atd] = 36 then \"Jeriquiá\" else if [Empresa_atd] = 39 then \"Pipa\" else if [Empresa_atd] = 43 then \"Porto 2\" else \"N/A\"),\n    #\"Coluna Condicional Adicionada1\" = Table.AddColumn(#\"Coluna Condicional Adicionada\", \"StatusAtendimento\", each if [Status_atd] = 0 then \"Aberto\" else if [Status_atd] = 1 then \"Encerrado\" else if [Status_atd] = 2 then \"Cancelado\" else if [Status_atd] = 3 then \"A Retornar\" else \"N/A\"),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"Coluna Condicional Adicionada1\", {{\"UsrResponAtendimento\", each Text.BeforeDelimiter(_, \" \"), type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"UsrResponAtendimento\", Text.Proper, type text}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colocar Cada Palavra Em Maiúscula\",{{\"Empreendimento\", type text}})\nin\n    #\"Tipo Alterado\""
            },
            {
              "name": "Comentario",
              "expression": "let\n    Fonte = Sql.Database(\"DCWBD24\", \"UAU\"),\n    dbo_Comentario = Fonte{[Schema=\"dbo\",Item=\"Comentario\"]}[Data],\n    #\"Linhas Filtradas\" = Table.SelectRows(dbo_Comentario, each [DataHora_Com] > #datetime(2018, 7, 1, 0, 0, 0)),\n    #\"Filtrado VENDAS\" = Table.SelectRows(#\"Linhas Filtradas\", each Text.StartsWith([NumDoc_Com], \"VENDAS \")),\n    #\"Filtrado Empresa e Excluido\" = Table.SelectRows(#\"Filtrado VENDAS\", each ([Excluido_Com] = 0) and ([Empresa_Com] = 10)),\n    #\"Linhas Filtradas1\" = Table.SelectRows(#\"Filtrado Empresa e Excluido\", each Text.StartsWith([Comentario_Com], \"Boleto\")),\n    #\"Texto Extraído Após o Delimitador\" = Table.TransformColumns(#\"Linhas Filtradas1\", {{\"NumDoc_Com\", each Text.AfterDelimiter(_, \"VENDAS \"), type text}}),\n    #\"Dividir Coluna por Delimitador\" = Table.SplitColumn(#\"Texto Extraído Após o Delimitador\", \"NumDoc_Com\", Splitter.SplitTextByDelimiter(\"-\", QuoteStyle.Csv), {\"Venda\", \"Obra\"}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Dividir Coluna por Delimitador\",{{\"Venda\", Int64.Type}}),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Tipo Alterado\",{\"Venda\", \"Obra\", \"User_Com\", \"DataHora_Com\", \"Empresa_Com\", \"Comentario_Com\"}),\n    #\"Texto Extraído Após o Delimitador1\" = Table.TransformColumns(#\"Outras Colunas Removidas\", {{\"Comentario_Com\", each Text.AfterDelimiter(_, \"Nosso número   : \"), type text}}),\n    #\"Texto Extraído Antes do Delimitador\" = Table.TransformColumns(#\"Texto Extraído Após o Delimitador1\", {{\"Comentario_Com\", each Text.BeforeDelimiter(_, \"Nº documento   : \"), type text}}),\n    #\"Texto Limpo\" = Table.TransformColumns(#\"Texto Extraído Antes do Delimitador\",{{\"Comentario_Com\", Text.Clean, type text}}),\n    #\"Dividir Coluna por Delimitador1\" = Table.SplitColumn(#\"Texto Limpo\", \"Comentario_Com\", Splitter.SplitTextByDelimiter(\" - \", QuoteStyle.Csv), {\"NN.1\", \"NN.2\", \"NN.3\", \"NN.4\", \"NN.5\", \"NN.6\", \"NN.7\", \"NN.8\"}),\n    #\"Colunas Não Dinâmicas\" = Table.UnpivotOtherColumns(#\"Dividir Coluna por Delimitador1\", {\"Venda\", \"Obra\", \"User_Com\", \"DataHora_Com\", \"Empresa_Com\"}, \"Atributo\", \"Valor\"),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Colunas Não Dinâmicas\",{{\"Valor\", \"NossoNum_Bol\"}})\nin\n    #\"Colunas Renomeadas\""
            },
            {
              "name": "fn_GAV_Boletos",
              "expression": "let\n    Fonte = Sql.Database(\"DCWBD03\", \"UAU\"),\n    dbo_fn_GAV_Boletos = Fonte{[Schema=\"dbo\",Item=\"fn_GAV_Boletos\"]}[Data]\nin\n    dbo_fn_GAV_Boletos"
            },
            {
              "name": "DataRef",
              "expression": "#date(2014, 7, 1) meta [IsParameterQuery=true, Type=\"Date\", IsParameterQueryRequired=true]"
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ],
            "times": [
              "09:00",
              "13:00"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2024-02-08T19:45:46.907",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "8748463b-fc8b-44df-94ce-5a5e05478c8d",
          "name": "Usage Metrics Report",
          "tables": [],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Sunday",
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday",
              "Saturday"
            ],
            "times": [
              "19:11"
            ],
            "enabled": true,
            "localTimeZoneId": "UTC",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2024-07-26T11:25:11.017",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "1afc3784-7d5c-406f-b664-7d32e8890a8e",
          "name": "Painel Acompanhamento Recebimentos",
          "tables": [
            {
              "name": "empresas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT * FROM corporativo.empresas#(cr)#(lf)WHERE cod_empresa IN (10, 13, 18, 35, 36, 39, 41, 42, 43, 44, 80, 81, 99)\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"cod_empresa\", \"empreendimento\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "tipo_parcela",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT * FROM pos_vendas.tipo_parcela\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"cod_tipo_parcela\", \"tipo_parcela\"}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Outras Colunas Removidas\", each ([tipo_parcela] = \"Entrada\" or [tipo_parcela] = \"Parcela\" or [tipo_parcela] = \"Sinal\"))\nin\n    #\"Linhas Filtradas\""
                }
              ]
            },
            {
              "name": "tipo_carteira",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8sxLTMnMLchJzStJVYrViVZyzVVwyUwEM91KS0qL8pViYwE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [tipo_carteira = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"tipo_carteira\", type text}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "faixa_idade_venda",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Índice",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"JYzBDcAwCMRWifimlUKgJJkF8ej+S5RyH8viLNzppricRpGLsyi4a3vbMPhKZ6ws6VPRP+mCRv5Gd7medMNn404RHw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [faixa_idade_venda = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"faixa_idade_venda\", type text}}),\n    #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Tipo Alterado\", \"Índice\", 0, 1, Int64.Type)\nin\n    #\"Índice Adicionado\""
                }
              ]
            },
            {
              "name": "faixa_vencimento",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Índice",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"TdAxDoMwEETRqyC3BCkzCwmUnMPiCuH+HZEt7Xfj+ZWf7FrLUq5XLdvcZln7RB/3UZt3O8/fPVHKclZkrVlb1ifrm7VnHdw8ICiCEY6AhCQoYQlMaEbz8CY0oxnNaEYzmtGMFmiBFsMXogVa/LXrAQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [faixa_vencimento = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"faixa_vencimento\", type text}}),\n    #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Tipo Alterado\", \"Índice\", 0, 1, Int64.Type)\nin\n    #\"Índice Adicionado\""
                }
              ]
            },
            {
              "name": "Calendario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data Mês",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AnoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês Abreviado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Útil",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Util nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Feriado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Semana do Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Semana do Mês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo Periodo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mes Atual",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Próximo Dia Útil",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR MinDiaCondicional = \n    IF (\n    \tCurrentDiaUtil = 0, \n    \tCALCULATE (\n        \t\tMIN('Calendario'[Data]), \n        \t\tFILTER(Calendario, \n        \t\t'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] >= CurrentDia)\n\t    ), \n\t    CurrentDia\n\t)\n\nRETURN\nMinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Próximo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR PreviousValue = 'Calendario'[Próximo Dia Útil] -- Ajustar para o nome correto da coluna onde está o valor de referência\nVAR MinDiaCondicional = \n    CALCULATE (\n        MIN('Calendario'[Data]), \n        FILTER ( 'Calendario', \n            'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] > PreviousValue\n        )\n    )\nRETURN\n    MinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Tipo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR Ano = Calendario[Ano]\nVAR Mes = Calendario[Mês]\nVAR AntDia5 = LOOKUPVALUE(Calendario[Dia Útil Anterior], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR Dia5 = LOOKUPVALUE(Calendario[Próximo Dia Útil], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR PosDia5 = LOOKUPVALUE(Calendario[Próximo Dia], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR AntDia15 = LOOKUPVALUE(Calendario[Dia Útil Anterior], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR Dia15 = LOOKUPVALUE(Calendario[Próximo Dia Útil], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR PosDia15 = LOOKUPVALUE(Calendario[Próximo Dia], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR Dia = SWITCH( TRUE(),\n\tCalendario[Dia Util nº] = 0, \"Dia Inútil\",\n\tCalendario[Data] = AntDia5, \"Véspera 05\",\n\tCalendario[Dia] = 5 && Calendario[Dia Util nº] <> 0, \"Dia 05\",\n\tCalendario[Data] = Dia5, \"Dia 05\",\n\tCalendario[Data] = PosDia5, \"Pós 05\",\n\tCalendario[Data] = AntDia15, \"Véspera 15\",\n\tCalendario[Dia] = 15 && Calendario[Dia Util nº] <> 0, \"Dia 15\",\n\tCalendario[Data] = Dia15, \"Dia 15\",\n\tCalendario[Data] = PosDia15, \"Pós 15\",\n\tCalendario[Dia] <= 15, \"Quinzena 1\",\n\tCalendario[Dia] > 15, \"Quinzena 2\"\n\t)\n\nRETURN\nDia",
                  "columnType": "Calculated"
                },
                {
                  "name": "Dia Útil Anterior",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR PreviousValue = 'Calendario'[Próximo Dia Útil] -- Ajustar para o nome correto da coluna onde está o valor de referência\nVAR MinDiaCondicional = \n    CALCULATE (\n        MAX('Calendario'[Data]), \n        FILTER ( 'Calendario', \n            'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] < PreviousValue\n        )\n    )\nRETURN\nMinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "[Vlr Recebido % (Ult.6 Meses)]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia (Inadimplente)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE([Vlr Recebido % (Ult.6 Meses)], recebimento_dia_hist[tipo_carteira] = \"Inadimplente\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia (Futuro)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE([Vlr Recebido % (Ult.6 Meses)], recebimento_dia_hist[tipo_carteira] = \"Futuro\")",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(#date(2035,12,31))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n  #\"Mês Abreviado Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Mês Abreviado\", each Text.Start([Mês], 3), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Mês Abreviado Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana nº Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia da Semana nº Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Dia da Semana Inserido\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}, {\"Mês Abreviado\", Text.Proper}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Colocar Cada Palavra Em Maiúscula\", {\"Data\"}, Feriados, {\"Data\"}, \"Feriados\", JoinKind.LeftOuter),\n    #\"Feriados Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Feriados\", {\"Feriado\"}, {\"Feriado\"}),\n    #\"Dia Util Inserido\" = Table.AddColumn(#\"Feriados Expandido\", \"Dia Útil\", each if [Feriado] <> null then 0 else if [Dia da Semana nº] = 0 then 0 else if [Dia da Semana nº] = 6 then 0 else 1),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Dia Util Inserido\",{{\"Dia Útil\", type logical}}),\n    #\"Ano Mês Inserido\" = Table.AddColumn(#\"Tipo Alterado1\", \"AnoMes\", each Text.Combine({Text.From([Ano], \"pt-BR\"), Text.PadStart(Text.From([Mês nº], \"pt-BR\"), 2, \"0\")}, \"\")),\n  #\"Início do mês inserido\" = Table.AddColumn(#\"Ano Mês Inserido\", \"Data Mês\", each Date.StartOfMonth([Data]), type nullable date),\n    #\"Linhas Agrupadas\" = Table.Group(#\"Início do mês inserido\", {\"Ano\", \"Trimestre\", \"Mês nº\", \"Mês\", \"Mês Abreviado\", \"AnoMes\", \"Data Mês\", \"Dia Útil\"}, {{\"Calendario\", each _, type table [Data=nullable date, Ano=number, Trimestre=text, Mês nº=number, Mês=nullable text, Mês Abreviado=nullable text, Dia=number, Dia da Semana nº=number, Dia da Semana=nullable text, Feriado=nullable text, Dia Útil=nullable logical, AnoMes=number, Data Mês=nullable date]}}),\n    #\"Personalização Adicionada2\" = Table.AddColumn(#\"Linhas Agrupadas\", \"Personalizar\", each Table.AddIndexColumn([Calendario], \"Índice\", 1, 1, Int64.Type)),\n    #\"Personalizar Expandido\" = Table.ExpandTableColumn(#\"Personalização Adicionada2\", \"Personalizar\", {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}, {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}),\n    #\"Coluna Condicional Adicionada1\" = Table.AddColumn(#\"Personalizar Expandido\", \"Dia Util nº\", each if [Dia Útil] = true then [Índice] else 0),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Coluna Condicional Adicionada1\",{{\"Data\", Order.Ascending}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Linhas Classificadas\",{\"Calendario\", \"Índice\"}),\n    #\"Tipo Alterado2\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"Data\", type date}, {\"Dia\", Int64.Type}, {\"Dia da Semana nº\", Int64.Type}, {\"Dia da Semana\", type text}, {\"Feriado\", type text}, {\"Dia Util nº\", Int64.Type}, {\"AnoMes\", Int64.Type}}),\n  #\"Colunas reordenadas\" = Table.ReorderColumns(#\"Tipo Alterado2\", {\"Data\", \"Data Mês\", \"AnoMes\", \"Ano\", \"Trimestre\", \"Mês nº\", \"Mês\", \"Mês Abreviado\", \"Dia\", \"Dia Útil\", \"Dia Util nº\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\"}),\n    #\"Semana do Ano Inserida\" = Table.AddColumn(#\"Colunas reordenadas\", \"Semana do Ano\", each Date.WeekOfYear([Data]), Int64.Type),\n    #\"Semana do Mês Inserida\" = Table.AddColumn(#\"Semana do Ano Inserida\", \"Semana do Mês\", each Date.WeekOfMonth([Data], 1), Int64.Type),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Semana do Mês Inserida\", \"Tipo Periodo\", each if [Data] >= Date.AddMonths(Date.StartOfMonth(Date.From(DateTime.LocalNow())), -6) and [Data] < Date.StartOfMonth(Date.From(DateTime.LocalNow())) then \"6 meses\" else \"> 6 meses\"),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Coluna Condicional Adicionada\", \"Mes Atual\", each if [Data Mês] = Date.StartOfMonth(Date.From(DateTime.LocalNow())) then \"Sim\" else \"Não\")\nin\n    #\"Personalização Adicionada\""
                }
              ]
            },
            {
              "name": "carteira_hist",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idade_empreendimento",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       idade_empreendimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN parc.data_vencimento = parc.data_visao THEN 'Em Dia'#(cr)#(lf)                   WHEN parc.data_vencimento < parc.data_visao THEN 'Inadimplente'#(cr)#(lf)                   WHEN parc.data_vencimento > parc.data_visao THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) < 4 THEN CONCAT('0', CAST(DATEDIFF(month, parc.data_visao, parc.data_venda) AS varchar))#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND 0 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '-5>'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > 0 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              parc.idade_empreendimento,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios,#(cr)#(lf)                     ch.idade_empreendimento,#(cr)#(lf)                     ch.data_visao,#(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     DATETRUNC(month, ch.data_vencimento) AS data_vencimento,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     SUM(ch.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ch.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_hist AS ch#(cr)#(lf)               WHERE ch.data_visao >= '2023-01-01'#(cr)#(lf)                --  AND ch.data_visao < '2024-06-01'#(cr)#(lf)                 AND ch.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ch.bloqueios IS NULL OR ch.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios, #(cr)#(lf)                     ch.idade_empreendimento,#(cr)#(lf)                     ch.data_visao, #(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     DATETRUNC(month, ch.data_vencimento), #(cr)#(lf)                     ch.prazo_ref_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       idade_empreendimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "carteira_atual",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_recebimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_conciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Distribuição Meta (%)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "[Vlr Recebido % (Ult.6 Meses)]",
                  "columnType": "Calculated"
                },
                {
                  "name": "data_recebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       tipo_venda,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) = DATETRUNC(month, parc.data_visao) THEN 'Em Dia'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) < DATETRUNC(month, parc.data_visao) THEN 'Inadimplente'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) > DATETRUNC(month, parc.data_visao) THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) = 0 THEN '0'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) < 4 THEN CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar)#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '5+'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND -1 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > -1 AND parc.prazo_ref_venc_mes < 1 THEN '0'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes >= 1 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) = DATETRUNC(month, parc.data_visao) AND #(cr)#(lf)                        DATETRUNC(month, parc.data_vencimento) > DATETRUNC(month, parc.data_visao) THEN 'Venda Nova - Futuro'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) = DATETRUNC(month, parc.data_visao) THEN 'Venda Nova'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) < DATETRUNC(month, parc.data_visao) THEN 'Venda Antiga'#(cr)#(lf)               END AS tipo_venda,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.tipo_recebimento,#(cr)#(lf)              parc.data_vencimento,#(cr)#(lf)              parc.data_recebimento,#(cr)#(lf)              parc.data_conciliacao,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ca.empreendimento,#(cr)#(lf)                     ca.tipo_parcela,#(cr)#(lf)                     ca.bloqueios,#(cr)#(lf)                     ca.data_visao,#(cr)#(lf)                     ca.data_venda,#(cr)#(lf)                     CASE #(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) < DATETRUNC(month, ca.data_vencimento) THEN 'Antecipado'#(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) = DATETRUNC(month, ca.data_vencimento) THEN 'Em Dia'#(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) > DATETRUNC(month, ca.data_vencimento) THEN 'Atrasado'#(cr)#(lf)                      END AS tipo_recebimento,#(cr)#(lf)                     ca.data_vencimento,#(cr)#(lf)                     ca.data_recebimento,#(cr)#(lf)                     ca.data_conciliacao,#(cr)#(lf)                     ca.prazo_venda_venc_mes,#(cr)#(lf)                     ca.prazo_ref_venc_mes,#(cr)#(lf)                     ca.prazo_receb_venc_mes,#(cr)#(lf)                     SUM(ca.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ca.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_atual AS ca#(cr)#(lf)               WHERE ca.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ca.bloqueios IS NULL OR ca.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ca.empreendimento,#(cr)#(lf)                     ca.tipo_parcela,#(cr)#(lf)                     ca.bloqueios, #(cr)#(lf)                     ca.data_visao, #(cr)#(lf)                     ca.data_venda,#(cr)#(lf)                     ca.data_vencimento,#(cr)#(lf)                     ca.data_recebimento, #(cr)#(lf)                     ca.data_conciliacao,#(cr)#(lf)                     ca.prazo_venda_venc_mes,#(cr)#(lf)                     ca.prazo_ref_venc_mes,#(cr)#(lf)                     ca.prazo_receb_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       tipo_venda,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}, {\"data_vencimento\", type date}, {\"data_conciliacao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "recebimento_dia_hist",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_recebimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_conciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_recebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)       #(tab)           WHEN DATETRUNC(month, parc.data_vencimento) = parc.data_visao THEN 'Em Dia'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) < parc.data_visao THEN 'Inadimplente'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) > parc.data_visao THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) < 4 THEN CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar) --CONCAT('0', CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar))#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND 0 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '5+'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > 0 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.tipo_recebimento,#(cr)#(lf)              parc.data_vencimento,#(cr)#(lf)              parc.data_recebimento,#(cr)#(lf)              parc.data_conciliacao,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios,#(cr)#(lf)                     ch.data_visao,#(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     CASE #(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) < DATETRUNC(month, ch.data_vencimento) THEN 'Antecipado'#(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) = DATETRUNC(month, ch.data_vencimento) THEN 'Em Dia'#(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) > DATETRUNC(month, ch.data_vencimento) THEN 'Atrasado'#(cr)#(lf)                      END AS tipo_recebimento,#(cr)#(lf)                     ch.data_vencimento,#(cr)#(lf)                     ch.data_recebimento,#(cr)#(lf)                     ch.data_conciliacao,#(cr)#(lf)                     ch.prazo_venda_venc_mes,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     ch.prazo_receb_venc_mes,#(cr)#(lf)                     SUM(ch.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ch.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_hist AS ch#(cr)#(lf)               WHERE ch.data_visao >= '2023-01-01'#(cr)#(lf)                --  AND ch.data_visao < '2024-06-01'#(cr)#(lf)                 AND ch.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ch.bloqueios IS NULL OR ch.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ch.empreendimento, #(cr)#(lf)                     ch.tipo_parcela, #(cr)#(lf)                     ch.bloqueios, #(cr)#(lf)                     ch.data_visao, #(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     ch.data_vencimento,#(cr)#(lf)                     ch.data_recebimento, #(cr)#(lf)                     ch.data_conciliacao,#(cr)#(lf)                     ch.prazo_venda_venc_mes,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     ch.prazo_receb_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}, {\"data_vencimento\", type date}, {\"data_conciliacao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Base Negociação",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data Visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Valor Presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Faixa Vencimento Agrupada",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Percentual Meta Negociada",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vlr Presente Atual",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nCALCULATE(SUM(recebimento_dia_hist[valor_presente]), \n\tFILTER(recebimento_dia_hist, \n\trecebimento_dia_hist[empreendimento] = 'Base Negociação'[Empresa] && \n\trecebimento_dia_hist[data_visao] = 'Base Negociação'[Data Visao] && \n\trecebimento_dia_hist[tipo_parcela] = 'Base Negociação'[tipo_parcela] && \n\trecebimento_dia_hist[tipo_carteira] = 'Base Negociação'[tipo_carteira] && \n\trecebimento_dia_hist[faixa_idade_venda] = 'Base Negociação'[faixa_idade_venda] && \n\trecebimento_dia_hist[faixa_vencimento] = 'Base Negociação'[faixa_vencimento]))",
                  "columnType": "Calculated"
                },
                {
                  "name": "Vlr Meta",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "'Base Negociação'[Percentual Meta Negociada]*'Base Negociação'[Vlr Presente Atual]",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Excel.Workbook(Web.Contents(\"https://gavresorts.sharepoint.com/sites/controladoria2-DataandAnalyticsDnA/Documentos%20Compartilhados/Data%20and%20Analytics%20(DnA)/Meta%20de%20Recebimentos/Meta%20Recebimentos%20-%20Consolidado.xlsx\"), null, true),\n    #\"Base Negociação_Sheet\" = Fonte{[Item=\"Metas - Consolidado\",Kind=\"Sheet\"]}[Data],\n    #\"Cabeçalhos Promovidos\" = Table.PromoteHeaders(#\"Base Negociação_Sheet\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabeçalhos Promovidos\",{{\"Empresa\", type text}, {\"Data Visao\", type date}, {\"tipo_parcela\", type text}, {\"tipo_carteira\", type text}, {\"faixa_idade_venda\", type text}, {\"faixa_vencimento\", type text}, {\"Valor Presente\", type number}, {\"Faixa Vencimento Agrupada\", type text}, {\"Percentual Meta Negociada\", Percentage.Type}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each [Data Visao] >= #date(2024, 7, 1)),\n    #\"Linhas Filtradas1\" = Table.SelectRows(#\"Linhas Filtradas\", each ([Origem] = \"Meta (6 meses)\")),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Linhas Filtradas1\",{\"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Medidas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [],
              "measures": [
                {
                  "name": "Vlr Faturado Atual",
                  "expression": "CALCULATE(SUM(carteira_atual[valor_presente]), USERELATIONSHIP(Calendario[Data], carteira_atual[data_vencimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Atual",
                  "expression": "CALCULATE(SUM(carteira_atual[valor_pago]), carteira_atual[data_recebimento] <= TODAY(),USERELATIONSHIP(Calendario[Data], carteira_atual[data_recebimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado Hist",
                  "expression": "CALCULATE(SUM(carteira_hist[valor_presente]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Hist",
                  "expression": "CALCULATE(SUM(carteira_hist[valor_pago]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Vencimento)",
                  "expression": "IF( ISBLANK( CALCULATE( SUM(recebimento_dia_hist[valor_presente]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_vencimento]))), 0,\nCALCULATE(SUM(recebimento_dia_hist[valor_presente]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_vencimento])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido",
                  "expression": "CALCULATE(SUM(recebimento_dia_hist[valor_pago]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_recebimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido % (Ult.6 Meses)",
                  "expression": "[Vlr Ult.6 Meses Distribuido]/CALCULATE( [Vlr Recebido (Ult.6 Meses)], ALLEXCEPT(recebimento_dia_hist, empresas[empreendimento],recebimento_dia_hist[tipo_parcela],recebimento_dia_hist[tipo_carteira],recebimento_dia_hist[faixa_vencimento],recebimento_dia_hist[faixa_idade_venda]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Presente Mes",
                  "expression": "CALCULATE(SUM('Base Negociação'[Vlr Presente Atual]),ALLEXCEPT(Calendario, Calendario[Tipo Dia]),'Base Negociação'[Data Visao]=DATE(YEAR(TODAY()),MONTH(TODAY()),1))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Ult.6 Meses)",
                  "expression": "CALCULATE([Vlr Recebido], ALLEXCEPT(Calendario,Calendario[Tipo Periodo],Calendario[Tipo Dia]),Calendario[Tipo Periodo]=\"6 meses\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Meta",
                  "expression": "SUM('Base Negociação'[Vlr Meta])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida",
                  "expression": "[Meta Distribuida (Em Dia)] + [Meta Distribuida (Futuro)] + [Meta Distribuida (Inadimplente)]",
                  "isHidden": false
                },
                {
                  "name": "Dias Tipo Dia",
                  "expression": "CALCULATE(DISTINCTCOUNT(Calendario[Dia]),ALLEXCEPT(Calendario,Calendario[Tipo Dia],Calendario[Mes Atual]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Ult.6 Meses Distribuido",
                  "expression": "DIVIDE([Vlr Recebido (Ult.6 Meses)],[Dias Tipo Dia])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Meta (R$)",
                  "expression": "[Vlr Recebido Atual]-[Meta Distribuida]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Atual (%)",
                  "expression": "DIVIDE([Vlr Recebido Atual],[Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Valor Meta (%)",
                  "expression": "DIVIDE([Valor Meta],[Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (%)",
                  "expression": "DIVIDE( [Meta Distribuida], [Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido Historico",
                  "expression": "SWITCH(MAX(Calendario[Mes Atual]),\"Sim\",[Vlr Recebido Atual],[Vlr Recebido Hist])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Meta Historico",
                  "expression": "IF(([Valor Recebido Historico] - [Valor Meta]) = [Valor Recebido Historico], 0, [Valor Recebido Historico] - [Valor Meta])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Faturado x Recebido",
                  "expression": "[Vlr Recebido Atual] - [Vlr Faturado (Vencimento)]",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Inadimplente)",
                  "expression": "CALCULATE([Valor Meta], ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Inadimplente\",'Base Negociação'[Data Visao]=DATE(YEAR(TODAY()),MONTH(TODAY()),1)) * SUM(Calendario[Percentual Meta Tipo Dia (Inadimplente)])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Futuro)",
                  "expression": "CALCULATE([Valor Meta],ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Futuro\",'Base Negociação'[Data Visao] = DATE(YEAR(TODAY()),MONTH(TODAY()),1)) * SUM(Calendario[Percentual Meta Tipo Dia (Futuro)])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Em Dia)",
                  "expression": "CALCULATE([Valor Meta], ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Em Dia\",'Base Negociação'[Data Visao]=DATE(YEAR(TODAY()),MONTH(TODAY()),1)) * SUM(Calendario[Percentual Meta Tipo Dia])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Coluna 1\" = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Coluna 1\", type text}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Tipo Alterado\",{\"Coluna 1\"})\nin\n    #\"Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Data Atualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualizacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n\tFonte = #table({\"Ultima Atualizacao\"}, {{DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),-3,0)}}),\n\t#\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualizacao\", type datetimezone}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "Feriados",
              "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"rZrLbtNAFIZfJcq6qL7ETrOEXiSQqKKWHWIxdQy15NqVcxGvg1ig8ghs82L4MkFN5vzjf4yXUc83c2p//sczyefP00tVFWqn8unZ1A/PveA88PyL+sONSrb5Rm2yXVl/ulVJVhZt1fTL2RHlRede2FALFyqIurkCz4XyY035Th36XYdB4NShr+cKnTrU1zCYOXU40x1GTnPN9Vyx01wLTc2drsaBcnLj39VwcuNgVNjvxn36faPe3KRZpSb3qtio+g+hp4VsWiUZv/73ZgeJWcbrmFZhkqmvRsf4DvNEmgkc5plrJuSZ5haHB3XZ3mI9T+TQW6iZ2KG3WPc2d+htpudx8ODgTuDigXYnBB5cltXzdj25fKyy9SZrJqmTJSJz9pQN6gZjMm1PWd/vWCZzT9nmpsVk8hrzxpol8teY90KzRAob19nrrjOTxUbPCz0vkchGzzPNErls3N+57plIZ6PnSM87wKuDk0xSIyeJvL7bv+zSLM/LYtqty74ldMVilLZyMYhZuRjkq1wMglUuBokqF4MolYtBhsrFIDzlYpCacrHLHUQ5KReDO/h2la73P8vJVTlZqmr/Q+t/8Wrdv15v1GrbIsu3vdBiAHRw0Q3yh0DBECgcAs2GQNEQKB4CzYdAQ4wIhhgRQiNuy/W6fmdIi8eyfne4UpPLskjSbP+rHmnarnN+8Erej9siS7LndoR3ab5/eTqb3KVJ9jV1Gm0x5mgH3UcazR91tGDU0cJRR5uNOlo06mjxqKPNRx1t1GchGPVZCLln4Sqrx0gn901cfCi7IQL9eiitU9f9lBBL/ZS0UhGUsFQRlLBWEZSwWBGUsFoRlLBcEZSwXhGUsGAR1CA3pCWrn5LWrI5aVmWSqyfVyt88C3fp8/7PQ54l+lzC9y3nLCQNXh05Gu0GSBq8XJI02C+QNNhAkDTYUZA02GKQNNhzkDTYhJD0f7mGtikcjfYtS7WqyvZEqH4hfFepddYefQbnvmd7OuwU6tRKwafBTqGnwE4h++0Ust5OIdvtFLLcTiG77RSy2k4NcgNabKWQve+LVfqcFqv97yLJjtHmEHlhUZhBQa8EimRmUGA0gwKtGRS4zaBAcAYFljMoUJ1Bge8MOtwmZD6BIv1v1ab7fis63n/31oFWTuuQxUYdUNaoA34adUBGow6YZ9QBzYw64JRRBwQy6sj7gdQ4rUMe6Bfkm6xQq3I9bb+ps77dYgB0AgGkCAaAKxgA0mAA2IMBoBEGgE8YAGJhABiGAdc7jZyDgFW+cvKpUg8qf2yPGV5/RehG2JoSCat/MmETUCZsBsqETUGZsDkoEzYJZcJmoUzYNJQJ53tuFVEkemLwU/0WuUqLTdrY2/wQZtafhDJjf0REpicPZcYeiTJjT0WZsQejzNizUWbs8Sgz9oSUGXtIyswAD3qiUmTg94Tprsy33V59mVaFenrYJqpof1oSH//0xzzSYmB4ikbA+KCVgeF5KwPDY1cGhqevDAwPYRkYnsUyMDySZWB4MsvA/2MYPqclYHxcq+P+eqeKb/uXPEuaxA+94/fYV9jVDYGZrTKY8BhQmPkAUJipPoWZ0lOYqTuFmaJTmKk4hZlyU9gwSwShGUxQucG+/AU=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Feriado = _t, Data = _t, Tipo = _t, TipoRegiao = _t, Regiao = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Data\", type date}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each ([TipoRegiao] = \"Nacional\") and ([Tipo] = \"\"))\nin\n    #\"Linhas Filtradas\""
            },
            {
              "name": "Erros em Base Negociação",
              "expression": "let\nFonte = #\"Base Negociação\",\n  #\"Incompatibilidades de Tipo Detectadas\" = let\n    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),\n    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),\n    fieldNames = Record.FieldNames(recordTypeFields),\n    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),\n    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = \"O tipo do valor não corresponde ao tipo da coluna.\", Detail = v], fieldTypes{i}})\nin\n    Table.TransformColumns(Fonte, pairs),\n  #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Incompatibilidades de Tipo Detectadas\", \"Número da Linha\" ,1),\n  #\"Erros Mantidos\" = Table.SelectRowsWithErrors(#\"Índice Adicionado\", {\"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"}),\n  #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Erros Mantidos\", {\"Número da Linha\", \"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"})\nin\n  #\"Colunas Reordenadas\""
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "refreshSchedule": {
            "days": [
              "Monday",
              "Tuesday",
              "Wednesday",
              "Thursday",
              "Friday"
            ],
            "times": [
              "09:30"
            ],
            "enabled": true,
            "localTimeZoneId": "E. South America Standard Time",
            "notifyOption": "MailOnFailure"
          },
          "targetStorageMode": "Abf",
          "createdDate": "2024-07-31T18:04:27.183",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "d1814b1a-ac27-4a0d-adf7-70e5c53802a6",
          "name": "Painel Acompanhamento Recebimentos - Julho",
          "tables": [],
          "configuredBy": "bi.consultoria@gavresorts.com.br",
          "configuredById": "86772481-5847-410b-9d2f-e751fa00339f",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2024-08-05T18:44:03.57",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "ad19aed7-3228-4be3-ac9d-58007a4884e6",
          "name": "Painel Acompanhamento Recebimentos - Agosto",
          "tables": [],
          "configuredBy": "bi.consultoria@gavresorts.com.br",
          "configuredById": "86772481-5847-410b-9d2f-e751fa00339f",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2024-09-02T21:49:49.583",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "b9e7dfe9-b749-4208-ab1c-745b4e4e246f",
          "name": "Painel Acompanhamento Recebimentos - Setembro",
          "tables": [],
          "configuredBy": "bi.consultoria@gavresorts.com.br",
          "configuredById": "86772481-5847-410b-9d2f-e751fa00339f",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2024-10-01T21:44:36.623",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "8ad4f05a-fff9-4301-bbff-439d0565c1db",
          "name": "Painel Acompanhamento Recebimentos - Outubro",
          "tables": [],
          "configuredBy": "bi.consultoria@gavresorts.com.br",
          "configuredById": "86772481-5847-410b-9d2f-e751fa00339f",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2024-11-01T17:40:09.823",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "c19a2044-8ae7-4a57-86bf-4a8be5ccf09e",
          "name": "Painel Acompanhamento Recebimentos - Novembro",
          "tables": [],
          "configuredBy": "bi.consultoria@gavresorts.com.br",
          "configuredById": "86772481-5847-410b-9d2f-e751fa00339f",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2024-12-02T20:17:51.937",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "fe2d1580-8147-49cc-8d08-43e97ab600bc",
          "name": "Painel Acompanhamento Recebimentos - Dezembro",
          "tables": [],
          "configuredBy": "bi.controladoria@gavresorts.com.br",
          "configuredById": "fb7df61d-5b73-44a9-8dcf-b5aed8984fea",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2025-01-02T18:19:04.44",
          "contentProviderType": "PbixInImportMode"
        },
        {
          "id": "59dd4756-05d2-4730-99cb-a13a06334bad",
          "name": "Painel Acompanhamento Recebimentos - Janeiro",
          "tables": [
            {
              "name": "empresas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_empresa",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT * FROM corporativo.empresas#(cr)#(lf)WHERE cod_empresa IN (10, 13, 18, 35, 36, 39, 41, 42, 43, 44, 80, 81, 99)\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"cod_empresa\", \"empreendimento\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "tipo_parcela",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "cod_tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = PostgreSQL.Database(\"172.16.0.10\", \"dw\"),\n    SQL = \"SELECT * FROM pos_vendas.tipo_parcela\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null, [EnableFolding=true]),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(Consulta,{\"cod_tipo_parcela\", \"tipo_parcela\"}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Outras Colunas Removidas\", each ([tipo_parcela] = \"Entrada\" or [tipo_parcela] = \"Parcela\" or [tipo_parcela] = \"Sinal\"))\nin\n    #\"Linhas Filtradas\""
                }
              ]
            },
            {
              "name": "tipo_carteira",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45W8sxLTMnMLchJzStJVYrViVZyzVVwyUwEM91KS0qL8pViYwE=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [tipo_carteira = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"tipo_carteira\", type text}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "faixa_idade_venda",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Índice",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"JYzBDcAwCMRWifimlUKgJJkF8ej+S5RyH8viLNzppricRpGLsyi4a3vbMPhKZ6ws6VPRP+mCRv5Gd7medMNn404RHw==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [faixa_idade_venda = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"faixa_idade_venda\", type text}}),\n    #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Tipo Alterado\", \"Índice\", 0, 1, Int64.Type)\nin\n    #\"Índice Adicionado\""
                }
              ]
            },
            {
              "name": "faixa_vencimento",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Índice",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"TdAxDoMwEETRqyC3BCkzCwmUnMPiCuH+HZEt7Xfj+ZWf7FrLUq5XLdvcZln7RB/3UZt3O8/fPVHKclZkrVlb1ifrm7VnHdw8ICiCEY6AhCQoYQlMaEbz8CY0oxnNaEYzmtGMFmiBFsMXogVa/LXrAQ==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [faixa_vencimento = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"faixa_vencimento\", type text}}),\n    #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Tipo Alterado\", \"Índice\", 0, 1, Int64.Type)\nin\n    #\"Índice Adicionado\""
                }
              ]
            },
            {
              "name": "Calendario",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Data",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data Mês",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "AnoMes",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Trimestre",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mês Abreviado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Útil",
                  "dataType": "Boolean",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia Util nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana nº",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Dia da Semana",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Feriado",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Semana do Ano",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Semana do Mês",
                  "dataType": "Int64",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Tipo Periodo",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Mes Atual",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Próximo Dia Útil",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR MinDiaCondicional = \n    IF (\n    \tCurrentDiaUtil = 0, \n    \tCALCULATE (\n        \t\tMIN('Calendario'[Data]), \n        \t\tFILTER(Calendario, \n        \t\t'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] >= CurrentDia)\n\t    ), \n\t    CurrentDia\n\t)\n\nRETURN\nMinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Próximo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR PreviousValue = 'Calendario'[Próximo Dia Útil] -- Ajustar para o nome correto da coluna onde está o valor de referência\nVAR MinDiaCondicional = \n    CALCULATE (\n        MIN('Calendario'[Data]), \n        FILTER ( 'Calendario', \n            'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] > PreviousValue\n        )\n    )\nRETURN\n    MinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Tipo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR Ano = Calendario[Ano]\nVAR Mes = Calendario[Mês]\nVAR AntDia5 = LOOKUPVALUE(Calendario[Dia Útil Anterior], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR Dia5 = LOOKUPVALUE(Calendario[Próximo Dia Útil], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR PosDia5 = LOOKUPVALUE(Calendario[Próximo Dia], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 5)\nVAR AntDia15 = LOOKUPVALUE(Calendario[Dia Útil Anterior], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR Dia15 = LOOKUPVALUE(Calendario[Próximo Dia Útil], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR PosDia15 = LOOKUPVALUE(Calendario[Próximo Dia], Calendario[Ano], Ano, Calendario[Mês], Mes, Calendario[Dia], 15)\nVAR Dia = SWITCH( TRUE(),\n\tCalendario[Dia Util nº] = 0, \"Dia Inútil\",\n\tCalendario[Data] = AntDia5, \"Véspera 05\",\n\tCalendario[Dia] = 5 && Calendario[Dia Util nº] <> 0, \"Dia 05\",\n\tCalendario[Data] = Dia5, \"Dia 05\",\n\tCalendario[Data] = PosDia5, \"Pós 05\",\n\tCalendario[Data] = AntDia15, \"Véspera 15\",\n\tCalendario[Dia] = 15 && Calendario[Dia Util nº] <> 0, \"Dia 15\",\n\tCalendario[Data] = Dia15, \"Dia 15\",\n\tCalendario[Data] = PosDia15, \"Pós 15\",\n\tCalendario[Dia] <= 15, \"Quinzena 1\",\n\tCalendario[Dia] > 15, \"Quinzena 2\"\n\t)\n\nRETURN\nDia",
                  "columnType": "Calculated"
                },
                {
                  "name": "Dia Útil Anterior",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nVAR CurrentDia = 'Calendario'[Data]\nVAR CurrentDiaUtil = 'Calendario'[Dia Util nº]\nVAR PreviousValue = 'Calendario'[Próximo Dia Útil] -- Ajustar para o nome correto da coluna onde está o valor de referência\nVAR MinDiaCondicional = \n    CALCULATE (\n        MAX('Calendario'[Data]), \n        FILTER ( 'Calendario', \n            'Calendario'[Dia Util nº] <> 0 && 'Calendario'[Data] < PreviousValue\n        )\n    )\nRETURN\nMinDiaCondicional",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "[Vlr Recebido % (Ult.6 Meses)]",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia (Inadimplente)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE([Vlr Recebido % (Ult.6 Meses)], recebimento_dia_hist[tipo_carteira] = \"Inadimplente\")",
                  "columnType": "Calculated"
                },
                {
                  "name": "Percentual Meta Tipo Dia (Futuro)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "CALCULATE([Vlr Recebido % (Ult.6 Meses)], recebimento_dia_hist[tipo_carteira] = \"Futuro\")",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = #date(2014,7,1),\n    Personalizar1 = List.Dates(Fonte,Number.From(#date(2035,12,31))-Number.From(Fonte), #duration(1,0,0,0)),\n    #\"Convertido para Tabela\" = Table.FromList(Personalizar1, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Ano Inserido\" = Table.AddColumn(#\"Convertido para Tabela\", \"Ano\", each Date.Year([Column1]), Int64.Type),\n    #\"Trimestre Inserido\" = Table.AddColumn(#\"Ano Inserido\", \"Trimestre\", each Number.ToText(Date.QuarterOfYear([Column1]))&\"º Trimestre\", type text),\n    #\"Mês Inserido\" = Table.AddColumn(#\"Trimestre Inserido\", \"Mês nº\", each Date.Month([Column1]), Int64.Type),\n    #\"Nome do Mês Inserido\" = Table.AddColumn(#\"Mês Inserido\", \"Mês\", each Date.MonthName([Column1]), type text),\n  #\"Mês Abreviado Inserido\" = Table.AddColumn(#\"Nome do Mês Inserido\", \"Mês Abreviado\", each Text.Start([Mês], 3), type text),\n    #\"Dia Inserido\" = Table.AddColumn(#\"Mês Abreviado Inserido\", \"Dia\", each Date.Day([Column1]), Int64.Type),\n    #\"Dia da Semana nº Inserido\" = Table.AddColumn(#\"Dia Inserido\", \"Dia da Semana nº\", each Date.DayOfWeek([Column1]), Int64.Type),\n    #\"Dia da Semana Inserido\" = Table.AddColumn(#\"Dia da Semana nº Inserido\", \"Dia da Semana\", each Date.ToText([Column1],\"dddd\")),\n    #\"Colunas Renomeadas\" = Table.RenameColumns(#\"Dia da Semana Inserido\",{{\"Column1\", \"Data\"}}),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Colunas Renomeadas\",{{\"Data\", type date}, {\"Dia da Semana\", type text}}),\n    #\"Colocar Cada Palavra Em Maiúscula\" = Table.TransformColumns(#\"Tipo Alterado\",{{\"Dia da Semana\", Text.Proper}, {\"Mês\", Text.Proper}, {\"Mês Abreviado\", Text.Proper}}),\n    #\"Consultas Mescladas\" = Table.NestedJoin(#\"Colocar Cada Palavra Em Maiúscula\", {\"Data\"}, Feriados, {\"Data\"}, \"Feriados\", JoinKind.LeftOuter),\n    #\"Feriados Expandido\" = Table.ExpandTableColumn(#\"Consultas Mescladas\", \"Feriados\", {\"Feriado\"}, {\"Feriado\"}),\n    #\"Dia Util Inserido\" = Table.AddColumn(#\"Feriados Expandido\", \"Dia Útil\", each if [Feriado] <> null then 0 else if [Dia da Semana nº] = 0 then 0 else if [Dia da Semana nº] = 6 then 0 else 1),\n    #\"Tipo Alterado1\" = Table.TransformColumnTypes(#\"Dia Util Inserido\",{{\"Dia Útil\", type logical}}),\n    #\"Ano Mês Inserido\" = Table.AddColumn(#\"Tipo Alterado1\", \"AnoMes\", each Text.Combine({Text.From([Ano], \"pt-BR\"), Text.PadStart(Text.From([Mês nº], \"pt-BR\"), 2, \"0\")}, \"\")),\n  #\"Início do mês inserido\" = Table.AddColumn(#\"Ano Mês Inserido\", \"Data Mês\", each Date.StartOfMonth([Data]), type nullable date),\n    #\"Linhas Agrupadas\" = Table.Group(#\"Início do mês inserido\", {\"Ano\", \"Trimestre\", \"Mês nº\", \"Mês\", \"Mês Abreviado\", \"AnoMes\", \"Data Mês\", \"Dia Útil\"}, {{\"Calendario\", each _, type table [Data=nullable date, Ano=number, Trimestre=text, Mês nº=number, Mês=nullable text, Mês Abreviado=nullable text, Dia=number, Dia da Semana nº=number, Dia da Semana=nullable text, Feriado=nullable text, Dia Útil=nullable logical, AnoMes=number, Data Mês=nullable date]}}),\n    #\"Personalização Adicionada2\" = Table.AddColumn(#\"Linhas Agrupadas\", \"Personalizar\", each Table.AddIndexColumn([Calendario], \"Índice\", 1, 1, Int64.Type)),\n    #\"Personalizar Expandido\" = Table.ExpandTableColumn(#\"Personalização Adicionada2\", \"Personalizar\", {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}, {\"Data\", \"Dia\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\", \"Índice\"}),\n    #\"Coluna Condicional Adicionada1\" = Table.AddColumn(#\"Personalizar Expandido\", \"Dia Util nº\", each if [Dia Útil] = true then [Índice] else 0),\n    #\"Linhas Classificadas\" = Table.Sort(#\"Coluna Condicional Adicionada1\",{{\"Data\", Order.Ascending}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Linhas Classificadas\",{\"Calendario\", \"Índice\"}),\n    #\"Tipo Alterado2\" = Table.TransformColumnTypes(#\"Colunas Removidas\",{{\"Data\", type date}, {\"Dia\", Int64.Type}, {\"Dia da Semana nº\", Int64.Type}, {\"Dia da Semana\", type text}, {\"Feriado\", type text}, {\"Dia Util nº\", Int64.Type}, {\"AnoMes\", Int64.Type}}),\n  #\"Colunas reordenadas\" = Table.ReorderColumns(#\"Tipo Alterado2\", {\"Data\", \"Data Mês\", \"AnoMes\", \"Ano\", \"Trimestre\", \"Mês nº\", \"Mês\", \"Mês Abreviado\", \"Dia\", \"Dia Útil\", \"Dia Util nº\", \"Dia da Semana nº\", \"Dia da Semana\", \"Feriado\"}),\n    #\"Semana do Ano Inserida\" = Table.AddColumn(#\"Colunas reordenadas\", \"Semana do Ano\", each Date.WeekOfYear([Data]), Int64.Type),\n    #\"Semana do Mês Inserida\" = Table.AddColumn(#\"Semana do Ano Inserida\", \"Semana do Mês\", each Date.WeekOfMonth([Data], 1), Int64.Type),\n    #\"Coluna Condicional Adicionada\" = Table.AddColumn(#\"Semana do Mês Inserida\", \"Tipo Periodo\", each if [Data] >= Date.AddMonths(Date.StartOfMonth(Date.From(DateTime.LocalNow())), -6) and [Data] < Date.StartOfMonth(Date.From(DateTime.LocalNow())) then \"6 meses\" else \"> 6 meses\"),\n    #\"Personalização Adicionada\" = Table.AddColumn(#\"Coluna Condicional Adicionada\", \"Mes Atual\", each if [Data Mês] = Date.FromText(\"01/01/2025\") then \"Sim\" else \"Não\")\nin\n    #\"Personalização Adicionada\""
                }
              ]
            },
            {
              "name": "carteira_hist",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "idade_empreendimento",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       idade_empreendimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN parc.data_vencimento = parc.data_visao THEN 'Em Dia'#(cr)#(lf)                   WHEN parc.data_vencimento < parc.data_visao THEN 'Inadimplente'#(cr)#(lf)                   WHEN parc.data_vencimento > parc.data_visao THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) < 4 THEN CONCAT('0', CAST(DATEDIFF(month, parc.data_visao, parc.data_venda) AS varchar))#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_visao, parc.data_venda) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND 0 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '-5>'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > 0 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              parc.idade_empreendimento,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios,#(cr)#(lf)                     ch.idade_empreendimento,#(cr)#(lf)                     ch.data_visao,#(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     DATETRUNC(month, ch.data_vencimento) AS data_vencimento,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     SUM(ch.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ch.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_hist AS ch#(cr)#(lf)               WHERE ch.data_visao >= '2023-01-01'#(cr)#(lf)                --  AND ch.data_visao < '2024-06-01'#(cr)#(lf)                 AND ch.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ch.bloqueios IS NULL OR ch.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios, #(cr)#(lf)                     ch.idade_empreendimento,#(cr)#(lf)                     ch.data_visao, #(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     DATETRUNC(month, ch.data_vencimento), #(cr)#(lf)                     ch.prazo_ref_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       idade_empreendimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "carteira_atual",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_recebimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_conciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Distribuição Meta (%)",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "[Vlr Recebido % (Ult.6 Meses)]",
                  "columnType": "Calculated"
                },
                {
                  "name": "data_recebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       tipo_venda,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) = DATETRUNC(month, parc.data_recebimento) THEN 'Em Dia'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) < DATETRUNC(month, parc.data_recebimento) THEN 'Inadimplente'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) > DATETRUNC(month, parc.data_recebimento) THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) = 0 THEN '0'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) < 4 THEN CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar)#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_recebimento) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '5+'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND -1 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > -1 AND parc.prazo_ref_venc_mes < 1 THEN '0'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes >= 1 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              CASE#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) = DATETRUNC(month, parc.data_recebimento) AND #(cr)#(lf)                        DATETRUNC(month, parc.data_vencimento) > DATETRUNC(month, parc.data_recebimento) THEN 'Venda Nova - Futuro'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) = DATETRUNC(month, parc.data_recebimento) THEN 'Venda Nova'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_venda) < DATETRUNC(month, parc.data_recebimento) THEN 'Venda Antiga'#(cr)#(lf)               END AS tipo_venda,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.tipo_recebimento,#(cr)#(lf)              parc.data_vencimento,#(cr)#(lf)              parc.data_recebimento,#(cr)#(lf)              parc.data_conciliacao,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ca.empreendimento,#(cr)#(lf)                     ca.tipo_parcela,#(cr)#(lf)                     ca.bloqueios,#(cr)#(lf)                     ca.data_visao,#(cr)#(lf)                     ca.data_venda,#(cr)#(lf)                     CASE #(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) < DATETRUNC(month, ca.data_vencimento) THEN 'Antecipado'#(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) = DATETRUNC(month, ca.data_vencimento) THEN 'Em Dia'#(cr)#(lf)                          WHEN DATETRUNC(month, ca.data_recebimento) > DATETRUNC(month, ca.data_vencimento) THEN 'Atrasado'#(cr)#(lf)                      END AS tipo_recebimento,#(cr)#(lf)                     ca.data_vencimento,#(cr)#(lf)                     ca.data_recebimento,#(cr)#(lf)                     ca.data_conciliacao,#(cr)#(lf)                     ca.prazo_venda_venc_mes,#(cr)#(lf)                     ca.prazo_ref_venc_mes,#(cr)#(lf)                     ca.prazo_receb_venc_mes,#(cr)#(lf)                     SUM(ca.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ca.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_atual AS ca#(cr)#(lf)               WHERE ca.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ca.bloqueios IS NULL OR ca.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ca.empreendimento,#(cr)#(lf)                     ca.tipo_parcela,#(cr)#(lf)                     ca.bloqueios, #(cr)#(lf)                     ca.data_visao, #(cr)#(lf)                     ca.data_venda,#(cr)#(lf)                     ca.data_vencimento,#(cr)#(lf)                     ca.data_recebimento, #(cr)#(lf)                     ca.data_conciliacao,#(cr)#(lf)                     ca.prazo_venda_venc_mes,#(cr)#(lf)                     ca.prazo_ref_venc_mes,#(cr)#(lf)                     ca.prazo_receb_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       tipo_venda,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}, {\"data_vencimento\", type date}, {\"data_conciliacao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "recebimento_dia_hist",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "empreendimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "bloqueios",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_recebimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_vencimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_conciliacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "valor_pago",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "data_recebimento",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Sql.Database(\"ljn5j45l7epurpbolf7kdqr3om-5p27ghvhjsgufd2isyzbayuxie.datamart.fabric.microsoft.com\", \"db_powerbiprodsam_20230606_07142601_51aa\"),\n    SQL = \"SELECT #(cr)#(lf)       empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao,#(cr)#(lf)       SUM(valor_presente) AS valor_presente,#(cr)#(lf)       SUM(valor_pago) AS valor_pago#(cr)#(lf)  FROM (#(cr)#(lf)       SELECT #(cr)#(lf)              parc.empreendimento,#(cr)#(lf)              parc.tipo_parcela,#(cr)#(lf)              CASE#(cr)#(lf)       #(tab)           WHEN DATETRUNC(month, parc.data_vencimento) = parc.data_visao THEN 'Em Dia'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) < parc.data_visao THEN 'Inadimplente'#(cr)#(lf)                   WHEN DATETRUNC(month, parc.data_vencimento) > parc.data_visao THEN 'Futuro'#(cr)#(lf)               END AS tipo_carteira,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) < 4 THEN CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar) --CONCAT('0', CAST(DATEDIFF(month, parc.data_venda, parc.data_visao) AS varchar))#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 4 AND 6 THEN '04 a 06'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 7 AND 12 THEN '07 a 12'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 13 AND 24 THEN '13 a 24'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 25 AND 36 THEN '25 a 36'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 37 AND 48 THEN '37 a 48'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) BETWEEN 49 AND 60 THEN '49 a 60'#(cr)#(lf)                   WHEN DATEDIFF(month, parc.data_venda, parc.data_visao) > 60 THEN '61+'#(cr)#(lf)               END AS faixa_idade_venda,#(cr)#(lf)              CASE  #(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes BETWEEN -4 AND 0 THEN CAST(parc.prazo_ref_venc_mes AS varchar)#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes < -4 THEN '5+'#(cr)#(lf)                   WHEN parc.prazo_ref_venc_mes > 0 THEN CONCAT('Ano ', CAST(FLOOR((CAST(parc.prazo_ref_venc_mes AS float) / 12) * 1.0) AS varchar))#(cr)#(lf)               END AS faixa_vencimento,#(cr)#(lf)              parc.data_visao,#(cr)#(lf)              parc.bloqueios,#(cr)#(lf)              parc.tipo_recebimento,#(cr)#(lf)              parc.data_vencimento,#(cr)#(lf)              parc.data_recebimento,#(cr)#(lf)              parc.data_conciliacao,#(cr)#(lf)              parc.valor_presente,#(cr)#(lf)              parc.valor_pago#(cr)#(lf)         FROM (#(cr)#(lf)              SELECT #(cr)#(lf)                     ch.empreendimento,#(cr)#(lf)                     ch.tipo_parcela,#(cr)#(lf)                     ch.bloqueios,#(cr)#(lf)                     ch.data_visao,#(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     CASE #(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) < DATETRUNC(month, ch.data_vencimento) THEN 'Antecipado'#(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) = DATETRUNC(month, ch.data_vencimento) THEN 'Em Dia'#(cr)#(lf)                          WHEN DATETRUNC(month, ch.data_recebimento) > DATETRUNC(month, ch.data_vencimento) THEN 'Atrasado'#(cr)#(lf)                      END AS tipo_recebimento,#(cr)#(lf)                     ch.data_vencimento,#(cr)#(lf)                     ch.data_recebimento,#(cr)#(lf)                     ch.data_conciliacao,#(cr)#(lf)                     ch.prazo_venda_venc_mes,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     ch.prazo_receb_venc_mes,#(cr)#(lf)                     SUM(ch.valor_presente) AS valor_presente,#(cr)#(lf)                     SUM(ch.valor_pago) AS valor_pago#(cr)#(lf)                FROM carteira_hist AS ch#(cr)#(lf)               WHERE ch.data_visao >= '2023-01-01'#(cr)#(lf)                --  AND ch.data_visao < '2024-06-01'#(cr)#(lf)                 AND ch.tipo_parcela IN ('Entrada','Sinal','Parcela')#(cr)#(lf)                 AND (ch.bloqueios IS NULL OR ch.bloqueios <> 'Reaproveitamento')#(cr)#(lf)               GROUP BY ch.empreendimento, #(cr)#(lf)                     ch.tipo_parcela, #(cr)#(lf)                     ch.bloqueios, #(cr)#(lf)                     ch.data_visao, #(cr)#(lf)                     ch.data_venda,#(cr)#(lf)                     ch.data_vencimento,#(cr)#(lf)                     ch.data_recebimento, #(cr)#(lf)                     ch.data_conciliacao,#(cr)#(lf)                     ch.prazo_venda_venc_mes,#(cr)#(lf)                     ch.prazo_ref_venc_mes,#(cr)#(lf)                     ch.prazo_receb_venc_mes#(cr)#(lf)            ) AS parc#(cr)#(lf)     ) AS parc#(cr)#(lf) GROUP BY empreendimento,#(cr)#(lf)       tipo_parcela,#(cr)#(lf)       tipo_carteira,#(cr)#(lf)       faixa_idade_venda,#(cr)#(lf)       faixa_vencimento,#(cr)#(lf)       data_visao,#(cr)#(lf)       bloqueios,#(cr)#(lf)       tipo_recebimento,#(cr)#(lf)       data_vencimento,#(cr)#(lf)       data_recebimento,#(cr)#(lf)       data_conciliacao\",\n    Consulta = Value.NativeQuery(Fonte, SQL, null),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Consulta,{{\"data_visao\", type date}, {\"data_vencimento\", type date}, {\"data_conciliacao\", type date}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            },
            {
              "name": "Base Negociação",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Empresa",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Data Visao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_parcela",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "tipo_carteira",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_idade_venda",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "faixa_vencimento",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Valor Presente",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Faixa Vencimento Agrupada",
                  "dataType": "String",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Percentual Meta Negociada",
                  "dataType": "Double",
                  "isHidden": false,
                  "columnType": "Data"
                },
                {
                  "name": "Vlr Presente Atual",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "\nCALCULATE(SUM(recebimento_dia_hist[valor_presente]), \n\tFILTER(recebimento_dia_hist, \n\trecebimento_dia_hist[empreendimento] = 'Base Negociação'[Empresa] && \n\trecebimento_dia_hist[data_visao] = 'Base Negociação'[Data Visao] && \n\trecebimento_dia_hist[tipo_parcela] = 'Base Negociação'[tipo_parcela] && \n\trecebimento_dia_hist[tipo_carteira] = 'Base Negociação'[tipo_carteira] && \n\trecebimento_dia_hist[faixa_idade_venda] = 'Base Negociação'[faixa_idade_venda] && \n\trecebimento_dia_hist[faixa_vencimento] = 'Base Negociação'[faixa_vencimento]))",
                  "columnType": "Calculated"
                },
                {
                  "name": "Vlr Meta",
                  "dataType": "String",
                  "isHidden": false,
                  "expression": "'Base Negociação'[Percentual Meta Negociada]*'Base Negociação'[Vlr Presente Atual]",
                  "columnType": "Calculated"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n    Fonte = Excel.Workbook(Web.Contents(\"https://gavresorts.sharepoint.com/sites/controladoria2-DataandAnalyticsDnA/Documentos%20Compartilhados/Data%20and%20Analytics%20(DnA)/Meta%20de%20Recebimentos/Meta%20Recebimentos%20-%20Consolidado.xlsx\"), null, true),\n    #\"Base Negociação_Sheet\" = Fonte{[Item=\"Metas - Consolidado\",Kind=\"Sheet\"]}[Data],\n    #\"Cabeçalhos Promovidos\" = Table.PromoteHeaders(#\"Base Negociação_Sheet\", [PromoteAllScalars=true]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(#\"Cabeçalhos Promovidos\",{{\"Empresa\", type text}, {\"Data Visao\", type date}, {\"tipo_parcela\", type text}, {\"tipo_carteira\", type text}, {\"faixa_idade_venda\", type text}, {\"faixa_vencimento\", type text}, {\"Valor Presente\", type number}, {\"Faixa Vencimento Agrupada\", type text}, {\"Percentual Meta Negociada\", Percentage.Type}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each [Data Visao] >= #date(2024, 7, 1)),\n    #\"Linhas Filtradas1\" = Table.SelectRows(#\"Linhas Filtradas\", each ([Origem] = \"Meta (6 meses)\")),\n    #\"Outras Colunas Removidas\" = Table.SelectColumns(#\"Linhas Filtradas1\",{\"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"})\nin\n    #\"Outras Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Medidas",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [],
              "measures": [
                {
                  "name": "Vlr Faturado Atual",
                  "expression": "CALCULATE(SUM(carteira_atual[valor_presente]), USERELATIONSHIP(Calendario[Data], carteira_atual[data_vencimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Atual",
                  "expression": "CALCULATE(SUM(carteira_atual[valor_pago]), carteira_atual[data_recebimento] <= TODAY(),USERELATIONSHIP(Calendario[Data], carteira_atual[data_recebimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado Hist",
                  "expression": "CALCULATE(SUM(carteira_hist[valor_presente]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Hist",
                  "expression": "CALCULATE(SUM(carteira_hist[valor_pago]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Faturado (Vencimento)",
                  "expression": "IF( ISBLANK( CALCULATE( SUM(recebimento_dia_hist[valor_presente]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_vencimento]))), 0,\nCALCULATE(SUM(recebimento_dia_hist[valor_presente]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_vencimento])))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido",
                  "expression": "CALCULATE(SUM(recebimento_dia_hist[valor_pago]), USERELATIONSHIP(Calendario[Data], recebimento_dia_hist[data_recebimento]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido % (Ult.6 Meses)",
                  "expression": "[Vlr Ult.6 Meses Distribuido]/CALCULATE( [Vlr Recebido (Ult.6 Meses)], ALLEXCEPT(recebimento_dia_hist, empresas[empreendimento],recebimento_dia_hist[tipo_parcela],recebimento_dia_hist[tipo_carteira],recebimento_dia_hist[faixa_vencimento],recebimento_dia_hist[faixa_idade_venda]))",
                  "isHidden": false
                },
                {
                  "name": "Valor Presente Mes",
                  "expression": "CALCULATE(SUM('Base Negociação'[Vlr Presente Atual]),ALLEXCEPT(Calendario, Calendario[Tipo Dia]),'Base Negociação'[Data Visao]=DATE(2025,1,1))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido (Ult.6 Meses)",
                  "expression": "CALCULATE([Vlr Recebido], ALLEXCEPT(Calendario,Calendario[Tipo Periodo],Calendario[Tipo Dia]),Calendario[Tipo Periodo]=\"6 meses\")",
                  "isHidden": false
                },
                {
                  "name": "Valor Meta",
                  "expression": "SUM('Base Negociação'[Vlr Meta])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida",
                  "expression": "[Meta Distribuida (Em Dia)] + [Meta Distribuida (Futuro)] + [Meta Distribuida (Inadimplente)]",
                  "isHidden": false
                },
                {
                  "name": "Dias Tipo Dia",
                  "expression": "CALCULATE(DISTINCTCOUNT(Calendario[Dia]),ALLEXCEPT(Calendario,Calendario[Tipo Dia],Calendario[Mes Atual]))",
                  "isHidden": false
                },
                {
                  "name": "Vlr Ult.6 Meses Distribuido",
                  "expression": "DIVIDE([Vlr Recebido (Ult.6 Meses)],[Dias Tipo Dia])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Meta (R$)",
                  "expression": "[Vlr Recebido Atual]-[Meta Distribuida]",
                  "isHidden": false
                },
                {
                  "name": "Vlr Recebido Atual (%)",
                  "expression": "DIVIDE([Vlr Recebido Atual],[Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Valor Meta (%)",
                  "expression": "DIVIDE([Valor Meta],[Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (%)",
                  "expression": "DIVIDE( [Meta Distribuida], [Valor Presente Mes])",
                  "isHidden": false
                },
                {
                  "name": "Valor Recebido Historico",
                  "expression": "SWITCH(MAX(Calendario[Mes Atual]),\"Sim\",[Vlr Recebido Atual],[Vlr Recebido Hist])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Meta Historico",
                  "expression": "IF(([Valor Recebido Historico] - [Valor Meta]) = [Valor Recebido Historico], 0, [Valor Recebido Historico] - [Valor Meta])",
                  "isHidden": false
                },
                {
                  "name": "Desvio Faturado x Recebido",
                  "expression": "[Vlr Recebido Atual] - [Vlr Faturado (Vencimento)]",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Inadimplente)",
                  "expression": "CALCULATE([Valor Meta], ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Inadimplente\",'Base Negociação'[Data Visao]=DATE(2025,1,1)) * SUM(Calendario[Percentual Meta Tipo Dia (Inadimplente)])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Futuro)",
                  "expression": "CALCULATE([Valor Meta],ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Futuro\",'Base Negociação'[Data Visao] = DATE(2025,1,1)) * SUM(Calendario[Percentual Meta Tipo Dia (Futuro)])",
                  "isHidden": false
                },
                {
                  "name": "Meta Distribuida (Em Dia)",
                  "expression": "CALCULATE([Valor Meta], ALLEXCEPT(Calendario, Calendario[Tipo Dia]), 'Base Negociação'[tipo_carteira] = \"Em Dia\",'Base Negociação'[Data Visao]=DATE(2025,1,1)) * SUM(Calendario[Percentual Meta Tipo Dia])",
                  "isHidden": false
                }
              ],
              "source": [
                {
                  "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i44FAA==\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [#\"Coluna 1\" = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Coluna 1\", type text}}),\n    #\"Colunas Removidas\" = Table.RemoveColumns(#\"Tipo Alterado\",{\"Coluna 1\"})\nin\n    #\"Colunas Removidas\""
                }
              ]
            },
            {
              "name": "Data Atualização",
              "isHidden": false,
              "storageMode": "Import",
              "columns": [
                {
                  "name": "Ultima Atualizacao",
                  "dataType": "DateTime",
                  "isHidden": false,
                  "columnType": "Data"
                }
              ],
              "measures": [],
              "source": [
                {
                  "expression": "let\n\tFonte = #table({\"Ultima Atualizacao\"}, {{DateTimeZone.SwitchZone(DateTimeZone.LocalNow(),-3,0)}}),\n\t#\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Ultima Atualizacao\", type datetimezone}})\nin\n    #\"Tipo Alterado\""
                }
              ]
            }
          ],
          "expressions": [
            {
              "name": "Feriados",
              "expression": "let\n    Fonte = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"rZrLbtNAFIZfJcq6qL7ETrOEXiSQqKKWHWIxdQy15NqVcxGvg1ig8ghs82L4MkFN5vzjf4yXUc83c2p//sczyefP00tVFWqn8unZ1A/PveA88PyL+sONSrb5Rm2yXVl/ulVJVhZt1fTL2RHlRede2FALFyqIurkCz4XyY035Th36XYdB4NShr+cKnTrU1zCYOXU40x1GTnPN9Vyx01wLTc2drsaBcnLj39VwcuNgVNjvxn36faPe3KRZpSb3qtio+g+hp4VsWiUZv/73ZgeJWcbrmFZhkqmvRsf4DvNEmgkc5plrJuSZ5haHB3XZ3mI9T+TQW6iZ2KG3WPc2d+htpudx8ODgTuDigXYnBB5cltXzdj25fKyy9SZrJqmTJSJz9pQN6gZjMm1PWd/vWCZzT9nmpsVk8hrzxpol8teY90KzRAob19nrrjOTxUbPCz0vkchGzzPNErls3N+57plIZ6PnSM87wKuDk0xSIyeJvL7bv+zSLM/LYtqty74ldMVilLZyMYhZuRjkq1wMglUuBokqF4MolYtBhsrFIDzlYpCacrHLHUQ5KReDO/h2la73P8vJVTlZqmr/Q+t/8Wrdv15v1GrbIsu3vdBiAHRw0Q3yh0DBECgcAs2GQNEQKB4CzYdAQ4wIhhgRQiNuy/W6fmdIi8eyfne4UpPLskjSbP+rHmnarnN+8Erej9siS7LndoR3ab5/eTqb3KVJ9jV1Gm0x5mgH3UcazR91tGDU0cJRR5uNOlo06mjxqKPNRx1t1GchGPVZCLln4Sqrx0gn901cfCi7IQL9eiitU9f9lBBL/ZS0UhGUsFQRlLBWEZSwWBGUsFoRlLBcEZSwXhGUsGAR1CA3pCWrn5LWrI5aVmWSqyfVyt88C3fp8/7PQ54l+lzC9y3nLCQNXh05Gu0GSBq8XJI02C+QNNhAkDTYUZA02GKQNNhzkDTYhJD0f7mGtikcjfYtS7WqyvZEqH4hfFepddYefQbnvmd7OuwU6tRKwafBTqGnwE4h++0Ust5OIdvtFLLcTiG77RSy2k4NcgNabKWQve+LVfqcFqv97yLJjtHmEHlhUZhBQa8EimRmUGA0gwKtGRS4zaBAcAYFljMoUJ1Bge8MOtwmZD6BIv1v1ab7fis63n/31oFWTuuQxUYdUNaoA34adUBGow6YZ9QBzYw64JRRBwQy6sj7gdQ4rUMe6Bfkm6xQq3I9bb+ps77dYgB0AgGkCAaAKxgA0mAA2IMBoBEGgE8YAGJhABiGAdc7jZyDgFW+cvKpUg8qf2yPGV5/RehG2JoSCat/MmETUCZsBsqETUGZsDkoEzYJZcJmoUzYNJQJ53tuFVEkemLwU/0WuUqLTdrY2/wQZtafhDJjf0REpicPZcYeiTJjT0WZsQejzNizUWbs8Sgz9oSUGXtIyswAD3qiUmTg94Tprsy33V59mVaFenrYJqpof1oSH//0xzzSYmB4ikbA+KCVgeF5KwPDY1cGhqevDAwPYRkYnsUyMDySZWB4MsvA/2MYPqclYHxcq+P+eqeKb/uXPEuaxA+94/fYV9jVDYGZrTKY8BhQmPkAUJipPoWZ0lOYqTuFmaJTmKk4hZlyU9gwSwShGUxQucG+/AU=\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [Feriado = _t, Data = _t, Tipo = _t, TipoRegiao = _t, Regiao = _t]),\n    #\"Tipo Alterado\" = Table.TransformColumnTypes(Fonte,{{\"Data\", type date}}),\n    #\"Linhas Filtradas\" = Table.SelectRows(#\"Tipo Alterado\", each ([TipoRegiao] = \"Nacional\") and ([Tipo] = \"\"))\nin\n    #\"Linhas Filtradas\""
            },
            {
              "name": "Erros em Base Negociação",
              "expression": "let\nFonte = #\"Base Negociação\",\n  #\"Incompatibilidades de Tipo Detectadas\" = let\n    tableWithOnlyPrimitiveTypes = Table.SelectColumns(Fonte, Table.ColumnsOfType(Fonte, {type nullable number, type nullable text, type nullable logical, type nullable date, type nullable datetime, type nullable datetimezone, type nullable time, type nullable duration})),\n    recordTypeFields = Type.RecordFields(Type.TableRow(Value.Type(tableWithOnlyPrimitiveTypes))),\n    fieldNames = Record.FieldNames(recordTypeFields),\n    fieldTypes = List.Transform(Record.ToList(recordTypeFields), each [Type]),\n    pairs = List.Transform(List.Positions(fieldNames), (i) => {fieldNames{i}, (v) => if v = null or Value.Is(v, fieldTypes{i}) then v else error [Message = \"O tipo do valor não corresponde ao tipo da coluna.\", Detail = v], fieldTypes{i}})\nin\n    Table.TransformColumns(Fonte, pairs),\n  #\"Índice Adicionado\" = Table.AddIndexColumn(#\"Incompatibilidades de Tipo Detectadas\", \"Número da Linha\" ,1),\n  #\"Erros Mantidos\" = Table.SelectRowsWithErrors(#\"Índice Adicionado\", {\"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"}),\n  #\"Colunas Reordenadas\" = Table.ReorderColumns(#\"Erros Mantidos\", {\"Número da Linha\", \"Empresa\", \"Data Visao\", \"tipo_parcela\", \"tipo_carteira\", \"faixa_idade_venda\", \"faixa_vencimento\", \"Valor Presente\", \"Faixa Vencimento Agrupada\", \"Percentual Meta Negociada\"})\nin\n  #\"Colunas Reordenadas\""
            }
          ],
          "configuredBy": "powerbi@gavresorts.com.br",
          "configuredById": "ba508337-dcf1-4d48-8660-98bd3cef1d24",
          "isEffectiveIdentityRequired": false,
          "isEffectiveIdentityRolesRequired": false,
          "targetStorageMode": "Abf",
          "createdDate": "2025-02-03T14:51:24.627",
          "contentProviderType": "PbixInImportMode"
        }
      ],
      "dataflows": [],
      "datamarts": []
    }
  ]
}